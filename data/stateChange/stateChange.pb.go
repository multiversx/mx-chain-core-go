// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stateChange.proto

package stateChange

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActionType int32

const (
	Read  ActionType = 0
	Write ActionType = 1
)

var ActionType_name = map[int32]string{
	0: "Read",
	1: "Write",
}

var ActionType_value = map[string]int32{
	"Read":  0,
	"Write": 1,
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e577663eebb0888, []int{0}
}

type Operation int32

const (
	GetCode        Operation = 0
	SaveAccount    Operation = 1
	WriteCode      Operation = 2
	RemoveDataTrie Operation = 3
)

var Operation_name = map[int32]string{
	0: "GetCode",
	1: "SaveAccount",
	2: "WriteCode",
	3: "RemoveDataTrie",
}

var Operation_value = map[string]int32{
	"GetCode":        0,
	"SaveAccount":    1,
	"WriteCode":      2,
	"RemoveDataTrie": 3,
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e577663eebb0888, []int{1}
}

type StateChanges struct {
	StateChanges []*StateChange `protobuf:"bytes,1,rep,name=StateChanges,proto3" json:"stateChanges"`
}

func (m *StateChanges) Reset()      { *m = StateChanges{} }
func (*StateChanges) ProtoMessage() {}
func (*StateChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e577663eebb0888, []int{0}
}
func (m *StateChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StateChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChanges.Merge(m, src)
}
func (m *StateChanges) XXX_Size() int {
	return m.Size()
}
func (m *StateChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChanges.DiscardUnknown(m)
}

var xxx_messageInfo_StateChanges proto.InternalMessageInfo

func (m *StateChanges) GetStateChanges() []*StateChange {
	if m != nil {
		return m.StateChanges
	}
	return nil
}

type StateChange struct {
	Type            ActionType        `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.ActionType" json:"type"`
	Index           int32             `protobuf:"varint,2,opt,name=Index,proto3" json:"index"`
	TxHash          []byte            `protobuf:"bytes,3,opt,name=TxHash,proto3" json:"txHash"`
	MainTrieKey     []byte            `protobuf:"bytes,4,opt,name=MainTrieKey,proto3" json:"mainTrieKey"`
	MainTrieVal     []byte            `protobuf:"bytes,5,opt,name=MainTrieVal,proto3" json:"mainTrieVal"`
	Operation       Operation         `protobuf:"varint,6,opt,name=Operation,proto3,enum=proto.Operation" json:"operation"`
	DataTrieChanges []*DataTrieChange `protobuf:"bytes,7,rep,name=DataTrieChanges,proto3" json:"dataTrieChanges,omitempty"`
}

func (m *StateChange) Reset()      { *m = StateChange{} }
func (*StateChange) ProtoMessage() {}
func (*StateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e577663eebb0888, []int{1}
}
func (m *StateChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChange.Merge(m, src)
}
func (m *StateChange) XXX_Size() int {
	return m.Size()
}
func (m *StateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChange.DiscardUnknown(m)
}

var xxx_messageInfo_StateChange proto.InternalMessageInfo

func (m *StateChange) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return Read
}

func (m *StateChange) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *StateChange) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *StateChange) GetMainTrieKey() []byte {
	if m != nil {
		return m.MainTrieKey
	}
	return nil
}

func (m *StateChange) GetMainTrieVal() []byte {
	if m != nil {
		return m.MainTrieVal
	}
	return nil
}

func (m *StateChange) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return GetCode
}

func (m *StateChange) GetDataTrieChanges() []*DataTrieChange {
	if m != nil {
		return m.DataTrieChanges
	}
	return nil
}

type DataTrieChange struct {
	Type ActionType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.ActionType" json:"type"`
	Key  []byte     `protobuf:"bytes,2,opt,name=Key,proto3" json:"key"`
	Val  []byte     `protobuf:"bytes,3,opt,name=Val,proto3" json:"val"`
}

func (m *DataTrieChange) Reset()      { *m = DataTrieChange{} }
func (*DataTrieChange) ProtoMessage() {}
func (*DataTrieChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e577663eebb0888, []int{2}
}
func (m *DataTrieChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataTrieChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataTrieChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTrieChange.Merge(m, src)
}
func (m *DataTrieChange) XXX_Size() int {
	return m.Size()
}
func (m *DataTrieChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTrieChange.DiscardUnknown(m)
}

var xxx_messageInfo_DataTrieChange proto.InternalMessageInfo

func (m *DataTrieChange) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return Read
}

func (m *DataTrieChange) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataTrieChange) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type DataAnalysisStateChange struct {
	StateChange     *StateChange `protobuf:"bytes,1,opt,name=StateChange,proto3" json:"stateChange"`
	Operation       Operation    `protobuf:"varint,2,opt,name=Operation,proto3,enum=proto.Operation" json:"operation"`
	Nonce           bool         `protobuf:"varint,3,opt,name=Nonce,proto3" json:"nonceChanged"`
	Balance         bool         `protobuf:"varint,4,opt,name=Balance,proto3" json:"balanceChanged"`
	CodeHash        bool         `protobuf:"varint,5,opt,name=CodeHash,proto3" json:"codeHashChanged"`
	RootHash        bool         `protobuf:"varint,6,opt,name=RootHash,proto3" json:"rootHashChanged"`
	DeveloperReward bool         `protobuf:"varint,7,opt,name=DeveloperReward,proto3" json:"developerRewardChanged"`
	OwnerAddress    bool         `protobuf:"varint,8,opt,name=OwnerAddress,proto3" json:"ownerAddressChanged"`
	UserName        bool         `protobuf:"varint,9,opt,name=UserName,proto3" json:"userNameChanged"`
	CodeMetadata    bool         `protobuf:"varint,10,opt,name=CodeMetadata,proto3" json:"codeMetadataChanged"`
}

func (m *DataAnalysisStateChange) Reset()      { *m = DataAnalysisStateChange{} }
func (*DataAnalysisStateChange) ProtoMessage() {}
func (*DataAnalysisStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e577663eebb0888, []int{3}
}
func (m *DataAnalysisStateChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataAnalysisStateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataAnalysisStateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataAnalysisStateChange.Merge(m, src)
}
func (m *DataAnalysisStateChange) XXX_Size() int {
	return m.Size()
}
func (m *DataAnalysisStateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DataAnalysisStateChange.DiscardUnknown(m)
}

var xxx_messageInfo_DataAnalysisStateChange proto.InternalMessageInfo

func (m *DataAnalysisStateChange) GetStateChange() *StateChange {
	if m != nil {
		return m.StateChange
	}
	return nil
}

func (m *DataAnalysisStateChange) GetOperation() Operation {
	if m != nil {
		return m.Operation
	}
	return GetCode
}

func (m *DataAnalysisStateChange) GetNonce() bool {
	if m != nil {
		return m.Nonce
	}
	return false
}

func (m *DataAnalysisStateChange) GetBalance() bool {
	if m != nil {
		return m.Balance
	}
	return false
}

func (m *DataAnalysisStateChange) GetCodeHash() bool {
	if m != nil {
		return m.CodeHash
	}
	return false
}

func (m *DataAnalysisStateChange) GetRootHash() bool {
	if m != nil {
		return m.RootHash
	}
	return false
}

func (m *DataAnalysisStateChange) GetDeveloperReward() bool {
	if m != nil {
		return m.DeveloperReward
	}
	return false
}

func (m *DataAnalysisStateChange) GetOwnerAddress() bool {
	if m != nil {
		return m.OwnerAddress
	}
	return false
}

func (m *DataAnalysisStateChange) GetUserName() bool {
	if m != nil {
		return m.UserName
	}
	return false
}

func (m *DataAnalysisStateChange) GetCodeMetadata() bool {
	if m != nil {
		return m.CodeMetadata
	}
	return false
}

func init() {
	proto.RegisterEnum("proto.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("proto.Operation", Operation_name, Operation_value)
	proto.RegisterType((*StateChanges)(nil), "proto.StateChanges")
	proto.RegisterType((*StateChange)(nil), "proto.StateChange")
	proto.RegisterType((*DataTrieChange)(nil), "proto.DataTrieChange")
	proto.RegisterType((*DataAnalysisStateChange)(nil), "proto.DataAnalysisStateChange")
}

func init() { proto.RegisterFile("stateChange.proto", fileDescriptor_8e577663eebb0888) }

var fileDescriptor_8e577663eebb0888 = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xb7, 0x01, 0xf3, 0x67, 0x20, 0x40, 0x26, 0x6a, 0xe3, 0x44, 0xaa, 0x4d, 0x39, 0x54, 0x28,
	0x0a, 0x41, 0x4d, 0x8f, 0x51, 0x0f, 0x38, 0xa9, 0x9a, 0xaa, 0x4d, 0x22, 0x4d, 0xd2, 0xb4, 0xda,
	0xc3, 0x4a, 0x83, 0x3d, 0x0b, 0xd6, 0x62, 0x0f, 0xb2, 0x07, 0x02, 0x87, 0x95, 0xf6, 0xb8, 0xc7,
	0xfd, 0x18, 0xfb, 0x51, 0x72, 0xcc, 0x31, 0x27, 0x6b, 0xe3, 0x5c, 0x56, 0x3e, 0xe5, 0x23, 0xac,
	0x66, 0xc0, 0xd8, 0xce, 0xee, 0x25, 0x27, 0x66, 0x7e, 0x7f, 0xde, 0xbc, 0xf7, 0xf8, 0x01, 0xd8,
	0xf4, 0x19, 0x66, 0xe4, 0x78, 0x84, 0xdd, 0x21, 0x39, 0x98, 0x78, 0x94, 0x51, 0xa8, 0x88, 0x8f,
	0xdd, 0xee, 0xd0, 0x66, 0xa3, 0xe9, 0xe0, 0xc0, 0xa4, 0x4e, 0x6f, 0x48, 0x87, 0xb4, 0x27, 0xe0,
	0xc1, 0xf4, 0x8d, 0xb8, 0x89, 0x8b, 0x38, 0x2d, 0x5d, 0xed, 0xff, 0x41, 0xed, 0x32, 0x29, 0xe5,
	0xc3, 0xd3, 0xec, 0x5d, 0x95, 0x5b, 0xf9, 0x4e, 0xf5, 0x10, 0x2e, 0xd5, 0x07, 0x29, 0xca, 0x68,
	0x46, 0x81, 0x5e, 0x4b, 0xb5, 0xe1, 0xa3, 0x8c, 0xb3, 0xfd, 0x21, 0x0f, 0xaa, 0x29, 0x00, 0xf6,
	0x40, 0xe1, 0x6a, 0x31, 0x21, 0xaa, 0xdc, 0x92, 0x3b, 0xf5, 0xc3, 0xcd, 0x55, 0xc5, 0xbe, 0xc9,
	0x6c, 0xea, 0x72, 0xc2, 0x28, 0x47, 0x81, 0x5e, 0x60, 0x8b, 0x09, 0x41, 0x42, 0x08, 0x75, 0xa0,
	0xfc, 0xe5, 0x5a, 0x64, 0xae, 0xe6, 0x5a, 0x72, 0x47, 0x31, 0x2a, 0x51, 0xa0, 0x2b, 0x36, 0x07,
	0xd0, 0x12, 0x87, 0x6d, 0x50, 0xbc, 0x9a, 0x9f, 0x62, 0x7f, 0xa4, 0xe6, 0x5b, 0x72, 0xa7, 0x66,
	0x80, 0x28, 0xd0, 0x8b, 0x4c, 0x20, 0x68, 0xc5, 0xc0, 0x5f, 0x41, 0xf5, 0x0c, 0xdb, 0xee, 0x95,
	0x67, 0x93, 0xbf, 0xc9, 0x42, 0x2d, 0x08, 0x61, 0x23, 0x0a, 0xf4, 0xaa, 0x93, 0xc0, 0x28, 0xad,
	0x49, 0x5b, 0xae, 0xf1, 0x58, 0x55, 0xbe, 0xb5, 0x5c, 0xe3, 0x31, 0x4a, 0x6b, 0xe0, 0xef, 0xa0,
	0x72, 0x31, 0x21, 0x1e, 0xe6, 0xb3, 0xa8, 0x45, 0x31, 0x60, 0x73, 0x35, 0xe0, 0x1a, 0x37, 0x36,
	0xa2, 0x40, 0xaf, 0xd0, 0xf8, 0x8a, 0x12, 0x07, 0x7c, 0x0d, 0x1a, 0x27, 0x98, 0x61, 0x5e, 0x2d,
	0xde, 0x7b, 0x49, 0xec, 0xfd, 0x87, 0x55, 0x91, 0x2c, 0x6b, 0xfc, 0x14, 0x05, 0xfa, 0x8e, 0x95,
	0x75, 0xec, 0x53, 0xc7, 0x66, 0xc4, 0x99, 0xb0, 0x05, 0x7a, 0x5e, 0xac, 0x7d, 0x03, 0xea, 0x59,
	0xe8, 0xe5, 0x5f, 0xc6, 0x0e, 0xc8, 0xf3, 0xfd, 0xe5, 0xc4, 0x32, 0x4a, 0x51, 0xa0, 0xe7, 0xdf,
	0x92, 0x05, 0xe2, 0x18, 0xa7, 0xf8, 0x9e, 0xf2, 0x09, 0x35, 0xc3, 0x63, 0xc4, 0xb1, 0xf6, 0x6d,
	0x01, 0x6c, 0xf3, 0x97, 0xfb, 0x2e, 0x1e, 0x2f, 0x7c, 0xdb, 0x4f, 0xe7, 0xe1, 0x8f, 0x4c, 0x3c,
	0x44, 0x27, 0xdf, 0x0f, 0x9a, 0x58, 0x7d, 0x2a, 0x68, 0x28, 0x13, 0xab, 0xcc, 0xea, 0x73, 0x2f,
	0x5e, 0xfd, 0x2f, 0x40, 0x39, 0xa7, 0xae, 0x49, 0x44, 0xfb, 0xe5, 0x65, 0xa8, 0x5d, 0x0e, 0x2c,
	0xcb, 0x5b, 0x68, 0x49, 0xc3, 0x7d, 0x50, 0x32, 0xf0, 0x18, 0x73, 0x65, 0x41, 0x28, 0x61, 0x14,
	0xe8, 0xf5, 0xc1, 0x12, 0x8a, 0xb5, 0xb1, 0x04, 0xf6, 0x40, 0xf9, 0x98, 0x5a, 0x44, 0x64, 0x53,
	0x11, 0xf2, 0xad, 0x28, 0xd0, 0x1b, 0xe6, 0x0a, 0x8b, 0xf5, 0x6b, 0x11, 0x37, 0x20, 0x4a, 0x99,
	0x30, 0x14, 0x13, 0x83, 0xb7, 0xc2, 0xd6, 0x86, 0x58, 0x04, 0x4f, 0x40, 0xe3, 0x84, 0xcc, 0xc8,
	0x98, 0x0f, 0x85, 0xc8, 0x0d, 0xf6, 0x2c, 0xb5, 0x24, 0x7c, 0xbb, 0x51, 0xa0, 0xff, 0x68, 0x65,
	0xa9, 0xd8, 0xfe, 0xdc, 0x02, 0x8f, 0x40, 0xed, 0xe2, 0xc6, 0x25, 0x5e, 0xdf, 0xb2, 0x3c, 0xe2,
	0xfb, 0x6a, 0x59, 0x94, 0xd8, 0x8e, 0x02, 0x7d, 0x8b, 0xa6, 0xf0, 0xd8, 0x9f, 0x11, 0xf3, 0x9e,
	0xff, 0xf5, 0x89, 0x77, 0x8e, 0x1d, 0xa2, 0x56, 0x92, 0x9e, 0xa7, 0x2b, 0x6c, 0xdd, 0x73, 0x2c,
	0xe2, 0xaf, 0xf1, 0x81, 0xcf, 0x08, 0xc3, 0x3c, 0xbc, 0x2a, 0x48, 0x5e, 0x33, 0x53, 0xf8, 0xfa,
	0xb5, 0xb4, 0x78, 0xef, 0x67, 0x00, 0x92, 0x78, 0xc2, 0x32, 0x28, 0x20, 0x82, 0xad, 0xa6, 0x04,
	0x2b, 0x40, 0xf9, 0xcf, 0xb3, 0x19, 0x69, 0xca, 0x7b, 0xff, 0xa4, 0xa2, 0x00, 0xab, 0xa0, 0xf4,
	0x27, 0x61, 0xbc, 0x44, 0x53, 0x82, 0x0d, 0x50, 0xbd, 0xc4, 0x33, 0xd2, 0x37, 0x4d, 0x3a, 0x75,
	0x59, 0x53, 0x86, 0x1b, 0xa0, 0x22, 0x5c, 0x82, 0xcf, 0x41, 0x08, 0xea, 0x88, 0x38, 0x74, 0x46,
	0xe2, 0x9f, 0x49, 0x33, 0x6f, 0xbc, 0xbb, 0x7b, 0xd0, 0xa4, 0xfb, 0x07, 0x4d, 0x7a, 0x7a, 0xd0,
	0xe4, 0xf7, 0xa1, 0x26, 0x7f, 0x0a, 0x35, 0xf9, 0x36, 0xd4, 0xe4, 0xbb, 0x50, 0x93, 0xef, 0x43,
	0x4d, 0xfe, 0x1c, 0x6a, 0xf2, 0x97, 0x50, 0x93, 0x9e, 0x42, 0x4d, 0xfe, 0xf8, 0xa8, 0x49, 0x77,
	0x8f, 0x9a, 0x74, 0xff, 0xa8, 0x49, 0xaf, 0x8e, 0x53, 0x7f, 0xc1, 0xce, 0x74, 0xcc, 0xec, 0x19,
	0xf1, 0xfc, 0x79, 0xcf, 0x99, 0x77, 0xcd, 0x11, 0xb6, 0xdd, 0xae, 0x49, 0x3d, 0xd2, 0x1d, 0xd2,
	0x1e, 0x9f, 0xab, 0x97, 0x0a, 0xf6, 0x51, 0xea, 0x3c, 0x28, 0x8a, 0x0c, 0xff, 0xf6, 0x35, 0x00,
	0x00, 0xff, 0xff, 0x38, 0x09, 0xdf, 0xde, 0xea, 0x05, 0x00, 0x00,
}

func (x ActionType) String() string {
	s, ok := ActionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Operation) String() string {
	s, ok := Operation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *StateChanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StateChanges)
	if !ok {
		that2, ok := that.(StateChanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StateChanges) != len(that1.StateChanges) {
		return false
	}
	for i := range this.StateChanges {
		if !this.StateChanges[i].Equal(that1.StateChanges[i]) {
			return false
		}
	}
	return true
}
func (this *StateChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StateChange)
	if !ok {
		that2, ok := that.(StateChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !bytes.Equal(this.TxHash, that1.TxHash) {
		return false
	}
	if !bytes.Equal(this.MainTrieKey, that1.MainTrieKey) {
		return false
	}
	if !bytes.Equal(this.MainTrieVal, that1.MainTrieVal) {
		return false
	}
	if this.Operation != that1.Operation {
		return false
	}
	if len(this.DataTrieChanges) != len(that1.DataTrieChanges) {
		return false
	}
	for i := range this.DataTrieChanges {
		if !this.DataTrieChanges[i].Equal(that1.DataTrieChanges[i]) {
			return false
		}
	}
	return true
}
func (this *DataTrieChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataTrieChange)
	if !ok {
		that2, ok := that.(DataTrieChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Val, that1.Val) {
		return false
	}
	return true
}
func (this *DataAnalysisStateChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataAnalysisStateChange)
	if !ok {
		that2, ok := that.(DataAnalysisStateChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateChange.Equal(that1.StateChange) {
		return false
	}
	if this.Operation != that1.Operation {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.CodeHash != that1.CodeHash {
		return false
	}
	if this.RootHash != that1.RootHash {
		return false
	}
	if this.DeveloperReward != that1.DeveloperReward {
		return false
	}
	if this.OwnerAddress != that1.OwnerAddress {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	if this.CodeMetadata != that1.CodeMetadata {
		return false
	}
	return true
}
func (this *StateChanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stateChange.StateChanges{")
	if this.StateChanges != nil {
		s = append(s, "StateChanges: "+fmt.Sprintf("%#v", this.StateChanges)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StateChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&stateChange.StateChange{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "TxHash: "+fmt.Sprintf("%#v", this.TxHash)+",\n")
	s = append(s, "MainTrieKey: "+fmt.Sprintf("%#v", this.MainTrieKey)+",\n")
	s = append(s, "MainTrieVal: "+fmt.Sprintf("%#v", this.MainTrieVal)+",\n")
	s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	if this.DataTrieChanges != nil {
		s = append(s, "DataTrieChanges: "+fmt.Sprintf("%#v", this.DataTrieChanges)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataTrieChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&stateChange.DataTrieChange{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Val: "+fmt.Sprintf("%#v", this.Val)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataAnalysisStateChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&stateChange.DataAnalysisStateChange{")
	if this.StateChange != nil {
		s = append(s, "StateChange: "+fmt.Sprintf("%#v", this.StateChange)+",\n")
	}
	s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	s = append(s, "CodeHash: "+fmt.Sprintf("%#v", this.CodeHash)+",\n")
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	s = append(s, "DeveloperReward: "+fmt.Sprintf("%#v", this.DeveloperReward)+",\n")
	s = append(s, "OwnerAddress: "+fmt.Sprintf("%#v", this.OwnerAddress)+",\n")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	s = append(s, "CodeMetadata: "+fmt.Sprintf("%#v", this.CodeMetadata)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStateChange(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StateChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateChanges) > 0 {
		for iNdEx := len(m.StateChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StateChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StateChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataTrieChanges) > 0 {
		for iNdEx := len(m.DataTrieChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataTrieChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Operation != 0 {
		i = encodeVarintStateChange(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MainTrieVal) > 0 {
		i -= len(m.MainTrieVal)
		copy(dAtA[i:], m.MainTrieVal)
		i = encodeVarintStateChange(dAtA, i, uint64(len(m.MainTrieVal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MainTrieKey) > 0 {
		i -= len(m.MainTrieKey)
		copy(dAtA[i:], m.MainTrieKey)
		i = encodeVarintStateChange(dAtA, i, uint64(len(m.MainTrieKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintStateChange(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintStateChange(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintStateChange(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataTrieChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataTrieChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataTrieChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintStateChange(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintStateChange(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintStateChange(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataAnalysisStateChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataAnalysisStateChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataAnalysisStateChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CodeMetadata {
		i--
		if m.CodeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.UserName {
		i--
		if m.UserName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.OwnerAddress {
		i--
		if m.OwnerAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.DeveloperReward {
		i--
		if m.DeveloperReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RootHash {
		i--
		if m.RootHash {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CodeHash {
		i--
		if m.CodeHash {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Balance {
		i--
		if m.Balance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce {
		i--
		if m.Nonce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Operation != 0 {
		i = encodeVarintStateChange(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x10
	}
	if m.StateChange != nil {
		{
			size, err := m.StateChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateChange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateChange(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateChange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StateChanges) > 0 {
		for _, e := range m.StateChanges {
			l = e.Size()
			n += 1 + l + sovStateChange(uint64(l))
		}
	}
	return n
}

func (m *StateChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStateChange(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovStateChange(uint64(m.Index))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovStateChange(uint64(l))
	}
	l = len(m.MainTrieKey)
	if l > 0 {
		n += 1 + l + sovStateChange(uint64(l))
	}
	l = len(m.MainTrieVal)
	if l > 0 {
		n += 1 + l + sovStateChange(uint64(l))
	}
	if m.Operation != 0 {
		n += 1 + sovStateChange(uint64(m.Operation))
	}
	if len(m.DataTrieChanges) > 0 {
		for _, e := range m.DataTrieChanges {
			l = e.Size()
			n += 1 + l + sovStateChange(uint64(l))
		}
	}
	return n
}

func (m *DataTrieChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStateChange(uint64(m.Type))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStateChange(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovStateChange(uint64(l))
	}
	return n
}

func (m *DataAnalysisStateChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateChange != nil {
		l = m.StateChange.Size()
		n += 1 + l + sovStateChange(uint64(l))
	}
	if m.Operation != 0 {
		n += 1 + sovStateChange(uint64(m.Operation))
	}
	if m.Nonce {
		n += 2
	}
	if m.Balance {
		n += 2
	}
	if m.CodeHash {
		n += 2
	}
	if m.RootHash {
		n += 2
	}
	if m.DeveloperReward {
		n += 2
	}
	if m.OwnerAddress {
		n += 2
	}
	if m.UserName {
		n += 2
	}
	if m.CodeMetadata {
		n += 2
	}
	return n
}

func sovStateChange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateChange(x uint64) (n int) {
	return sovStateChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StateChanges) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStateChanges := "[]*StateChange{"
	for _, f := range this.StateChanges {
		repeatedStringForStateChanges += strings.Replace(f.String(), "StateChange", "StateChange", 1) + ","
	}
	repeatedStringForStateChanges += "}"
	s := strings.Join([]string{`&StateChanges{`,
		`StateChanges:` + repeatedStringForStateChanges + `,`,
		`}`,
	}, "")
	return s
}
func (this *StateChange) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDataTrieChanges := "[]*DataTrieChange{"
	for _, f := range this.DataTrieChanges {
		repeatedStringForDataTrieChanges += strings.Replace(f.String(), "DataTrieChange", "DataTrieChange", 1) + ","
	}
	repeatedStringForDataTrieChanges += "}"
	s := strings.Join([]string{`&StateChange{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`MainTrieKey:` + fmt.Sprintf("%v", this.MainTrieKey) + `,`,
		`MainTrieVal:` + fmt.Sprintf("%v", this.MainTrieVal) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`DataTrieChanges:` + repeatedStringForDataTrieChanges + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataTrieChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataTrieChange{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Val:` + fmt.Sprintf("%v", this.Val) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataAnalysisStateChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataAnalysisStateChange{`,
		`StateChange:` + strings.Replace(this.StateChange.String(), "StateChange", "StateChange", 1) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`CodeHash:` + fmt.Sprintf("%v", this.CodeHash) + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`DeveloperReward:` + fmt.Sprintf("%v", this.DeveloperReward) + `,`,
		`OwnerAddress:` + fmt.Sprintf("%v", this.OwnerAddress) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`CodeMetadata:` + fmt.Sprintf("%v", this.CodeMetadata) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStateChange(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StateChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateChanges = append(m.StateChanges, &StateChange{})
			if err := m.StateChanges[len(m.StateChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainTrieKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainTrieKey = append(m.MainTrieKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MainTrieKey == nil {
				m.MainTrieKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainTrieVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainTrieVal = append(m.MainTrieVal[:0], dAtA[iNdEx:postIndex]...)
			if m.MainTrieVal == nil {
				m.MainTrieVal = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataTrieChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataTrieChanges = append(m.DataTrieChanges, &DataTrieChange{})
			if err := m.DataTrieChanges[len(m.DataTrieChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataTrieChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataTrieChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataTrieChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataAnalysisStateChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataAnalysisStateChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataAnalysisStateChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StateChange == nil {
				m.StateChange = &StateChange{}
			}
			if err := m.StateChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nonce = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Balance = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CodeHash = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RootHash = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeveloperReward = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerAddress = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserName = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CodeMetadata = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStateChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStateChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateChange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateChange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateChange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateChange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateChange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateChange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateChange = fmt.Errorf("proto: unexpected end of group")
)
