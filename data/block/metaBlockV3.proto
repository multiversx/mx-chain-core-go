// This file holds the data structures related to the functionality of a meta block V3
syntax = "proto3";

package proto;

option go_package = "block";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "block.proto";
import "metaBlock.proto";



// MetaBlockV3 holds all the fields needed for a meta block v3. This is the part that is being hashed and run through consensus.
message MetaBlockV3 {
  uint64                       Nonce               = 1 [(gogoproto.jsontag) = "nonce"];
  uint32                       Epoch               = 2 [(gogoproto.jsontag) = "epoch"];
  uint64                       Round               = 3 [(gogoproto.jsontag) = "round"];
  uint64                       TimestampMs         = 4 [(gogoproto.jsontag) = "timestampMs,omitempty"];
  repeated ShardData           ShardInfo           = 5 [(gogoproto.jsontag) = "shardInfo", (gogoproto.nullable) = false];
  repeated PeerData            PeerInfo            = 6 [(gogoproto.jsontag) = "peerInfo", (gogoproto.nullable) = false];
  bytes                        LeaderSignature     = 7 [(gogoproto.jsontag) = "leaderSignature,omitempty"];
  bytes                        PrevHash            = 8 [(gogoproto.jsontag) = "prevHash,omitempty"];
  bytes                        PrevRandSeed        = 9 [(gogoproto.jsontag) = "prevRandSeed,omitempty"];
  bytes                        RandSeed            = 10 [(gogoproto.jsontag) = "randSeed,omitempty"];
  repeated MiniBlockHeader     MiniBlockHeaders    = 11 [(gogoproto.jsontag) = "miniBlockHeaders", (gogoproto.nullable) = false];
  EpochStart                   EpochStart          = 12 [(gogoproto.jsontag) = "epochStart,omitempty", (gogoproto.nullable) = false];
  bytes                        ChainID             = 13 [(gogoproto.jsontag) = "chainID,omitempty"];
  bytes                        SoftwareVersion     = 14 [(gogoproto.jsontag) = "softwareVersion,omitempty"];
  bytes                        Reserved            = 15 [(gogoproto.jsontag) = "reserved,omitempty"];
  uint64                       GasLimit            = 16 [(gogoproto.jsontag) = "gasLimit,omitempty"];
  uint32                       TxCount             = 17 [(gogoproto.jsontag) = "txCount"];
  MetaExecutionResultInfo      LastExecutionResult = 18 [(gogoproto.jsontag) = "lastExecutionResult,omitempty"];
  repeated MetaExecutionResult ExecutionResults    = 19 [(gogoproto.jsontag) = "executionResults,omitempty"];

}

// BaseMetaExecutionResult contains a base execution result and somen extra fields
message BaseMetaExecutionResult {
  BaseExecutionResult BaseExecutionResult     = 1 [(gogoproto.jsontag) = "baseExecutionResult,omitempty"];
  bytes               ValidatorStatsRootHash  = 2 [(gogoproto.jsontag) = "validatorStatsRootHash,omitempty"];
  bytes               AccumulatedFeesInEpoch  = 3 [(gogoproto.jsontag) = "accumulatedFeesInEpoch,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes               DevFeesInEpoch          = 4 [(gogoproto.jsontag) = "devFeesInEpoch,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
}


// MetaExecutionResultInfo contains a base meta execution result and the header hash when the results was notarized
message MetaExecutionResultInfo {
  bytes                    NotarizedOnHeaderHash = 1 [(gogoproto.jsontag) = "notarizedOnHeaderHash,omitempty"];
  BaseMetaExecutionResult  ExecutionResult       = 2 [(gogoproto.jsontag) = "baseExecutionResultMeta,omitempty"];
}

// MetaExecutionResult contains a base execution result meta and extra fields for meta
message MetaExecutionResult {
  BaseMetaExecutionResult  ExecutionResult = 1 [(gogoproto.jsontag) = "executionResult,omitempty"];
  bytes                    ReceiptsHash    = 2 [(gogoproto.jsontag) = "receiptsHash,omitempty"];
  bytes                    DeveloperFees   = 3 [(gogoproto.jsontag) = "developerFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes                    AccumulatedFees = 4 [(gogoproto.jsontag) = "accumulatedFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  uint64                   GasUsed         = 5 [(gogoproto.jsontag) = "gasUsed"];
  uint64                   ExecutedTxCount = 6 [(gogoproto.jsontag) = "executedTxCount"];
}

