// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

package block

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type identifies the type of the block
type Type int32

const (
	TxBlock                  Type = 0
	StateBlock               Type = 30
	PeerBlock                Type = 60
	SmartContractResultBlock Type = 90
	InvalidBlock             Type = 120
	ReceiptBlock             Type = 150
	RewardsBlock             Type = 255
)

var Type_name = map[int32]string{
	0:   "TxBlock",
	30:  "StateBlock",
	60:  "PeerBlock",
	90:  "SmartContractResultBlock",
	120: "InvalidBlock",
	150: "ReceiptBlock",
	255: "RewardsBlock",
}

var Type_value = map[string]int32{
	"TxBlock":                  0,
	"StateBlock":               30,
	"PeerBlock":                60,
	"SmartContractResultBlock": 90,
	"InvalidBlock":             120,
	"ReceiptBlock":             150,
	"RewardsBlock":             255,
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0}
}

type ProcessingType int32

const (
	Normal    ProcessingType = 0
	Scheduled ProcessingType = 1
	Processed ProcessingType = 2
)

var ProcessingType_name = map[int32]string{
	0: "Normal",
	1: "Scheduled",
	2: "Processed",
}

var ProcessingType_value = map[string]int32{
	"Normal":    0,
	"Scheduled": 1,
	"Processed": 2,
}

func (ProcessingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{1}
}

type MiniBlockState int32

const (
	Final           MiniBlockState = 0
	Proposed        MiniBlockState = 1
	PartialExecuted MiniBlockState = 2
)

var MiniBlockState_name = map[int32]string{
	0: "Final",
	1: "Proposed",
	2: "PartialExecuted",
}

var MiniBlockState_value = map[string]int32{
	"Final":           0,
	"Proposed":        1,
	"PartialExecuted": 2,
}

func (MiniBlockState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{2}
}

type MiniBlock struct {
	TxHashes        [][]byte `protobuf:"bytes,1,rep,name=TxHashes,proto3" json:"txHashes,omitempty"`
	ReceiverShardID uint32   `protobuf:"varint,2,opt,name=ReceiverShardID,proto3" json:"receiverShardID"`
	SenderShardID   uint32   `protobuf:"varint,3,opt,name=SenderShardID,proto3" json:"senderShardID"`
	Type            Type     `protobuf:"varint,4,opt,name=Type,proto3,enum=proto.Type" json:"type"`
	Reserved        []byte   `protobuf:"bytes,5,opt,name=Reserved,proto3" json:"reserved,omitempty"`
}

func (m *MiniBlock) Reset()      { *m = MiniBlock{} }
func (*MiniBlock) ProtoMessage() {}
func (*MiniBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0}
}
func (m *MiniBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MiniBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniBlock.Merge(m, src)
}
func (m *MiniBlock) XXX_Size() int {
	return m.Size()
}
func (m *MiniBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MiniBlock proto.InternalMessageInfo

func (m *MiniBlock) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *MiniBlock) GetReceiverShardID() uint32 {
	if m != nil {
		return m.ReceiverShardID
	}
	return 0
}

func (m *MiniBlock) GetSenderShardID() uint32 {
	if m != nil {
		return m.SenderShardID
	}
	return 0
}

func (m *MiniBlock) GetType() Type {
	if m != nil {
		return m.Type
	}
	return TxBlock
}

func (m *MiniBlock) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type MiniBlockHeader struct {
	Hash            []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"hash,omitempty"`
	SenderShardID   uint32 `protobuf:"varint,2,opt,name=SenderShardID,proto3" json:"senderShardID"`
	ReceiverShardID uint32 `protobuf:"varint,3,opt,name=ReceiverShardID,proto3" json:"receiverShardID"`
	TxCount         uint32 `protobuf:"varint,4,opt,name=TxCount,proto3" json:"txCount"`
	Type            Type   `protobuf:"varint,5,opt,name=Type,proto3,enum=proto.Type" json:"type"`
	Reserved        []byte `protobuf:"bytes,6,opt,name=Reserved,proto3" json:"reserved,omitempty"`
}

func (m *MiniBlockHeader) Reset()      { *m = MiniBlockHeader{} }
func (*MiniBlockHeader) ProtoMessage() {}
func (*MiniBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{1}
}
func (m *MiniBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MiniBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniBlockHeader.Merge(m, src)
}
func (m *MiniBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *MiniBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MiniBlockHeader proto.InternalMessageInfo

func (m *MiniBlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MiniBlockHeader) GetSenderShardID() uint32 {
	if m != nil {
		return m.SenderShardID
	}
	return 0
}

func (m *MiniBlockHeader) GetReceiverShardID() uint32 {
	if m != nil {
		return m.ReceiverShardID
	}
	return 0
}

func (m *MiniBlockHeader) GetTxCount() uint32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *MiniBlockHeader) GetType() Type {
	if m != nil {
		return m.Type
	}
	return TxBlock
}

func (m *MiniBlockHeader) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

// PeerChange holds a change in one peer to shard assignation
type PeerChange struct {
	PubKey      []byte `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"pubKey,omitempty"`
	ShardIdDest uint32 `protobuf:"varint,2,opt,name=ShardIdDest,proto3" json:"shardIdDest"`
}

func (m *PeerChange) Reset()      { *m = PeerChange{} }
func (*PeerChange) ProtoMessage() {}
func (*PeerChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{2}
}
func (m *PeerChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PeerChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerChange.Merge(m, src)
}
func (m *PeerChange) XXX_Size() int {
	return m.Size()
}
func (m *PeerChange) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerChange.DiscardUnknown(m)
}

var xxx_messageInfo_PeerChange proto.InternalMessageInfo

func (m *PeerChange) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PeerChange) GetShardIdDest() uint32 {
	if m != nil {
		return m.ShardIdDest
	}
	return 0
}

// Header holds the metadata of a block. This is the part that is being hashed and run through consensus.
// The header holds the hash of the body and also the link to the previous block header hash
type Header struct {
	Nonce              uint64            `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	PrevHash           []byte            `protobuf:"bytes,2,opt,name=PrevHash,proto3" json:"prevHash,omitempty"`
	PrevRandSeed       []byte            `protobuf:"bytes,3,opt,name=PrevRandSeed,proto3" json:"prevRandSeed,omitempty"`
	RandSeed           []byte            `protobuf:"bytes,4,opt,name=RandSeed,proto3" json:"randSeed,omitempty"`
	PubKeysBitmap      []byte            `protobuf:"bytes,5,opt,name=PubKeysBitmap,proto3" json:"pubKeysBitmap,omitempty"`
	ShardID            uint32            `protobuf:"varint,6,opt,name=ShardID,proto3" json:"shardID"`
	TimeStamp          uint64            `protobuf:"varint,7,opt,name=TimeStamp,proto3" json:"timeStamp,omitempty"`
	Round              uint64            `protobuf:"varint,8,opt,name=Round,proto3" json:"round"`
	Epoch              uint32            `protobuf:"varint,9,opt,name=Epoch,proto3" json:"epoch"`
	BlockBodyType      Type              `protobuf:"varint,10,opt,name=BlockBodyType,proto3,enum=proto.Type" json:"blockBodyType"`
	Signature          []byte            `protobuf:"bytes,11,opt,name=Signature,proto3" json:"signature,omitempty"`
	LeaderSignature    []byte            `protobuf:"bytes,12,opt,name=LeaderSignature,proto3" json:"leaderSignature,omitempty"`
	MiniBlockHeaders   []MiniBlockHeader `protobuf:"bytes,13,rep,name=MiniBlockHeaders,proto3" json:"miniBlockHeaders"`
	PeerChanges        []PeerChange      `protobuf:"bytes,14,rep,name=PeerChanges,proto3" json:"peerChanges"`
	RootHash           []byte            `protobuf:"bytes,15,opt,name=RootHash,proto3" json:"rootHash,omitempty"`
	MetaBlockHashes    [][]byte          `protobuf:"bytes,16,rep,name=MetaBlockHashes,proto3" json:"metaBlockHashes,omitempty"`
	TxCount            uint32            `protobuf:"varint,17,opt,name=TxCount,proto3" json:"txCount"`
	EpochStartMetaHash []byte            `protobuf:"bytes,18,opt,name=EpochStartMetaHash,proto3" json:"epochStartMetaHash,omitempty"`
	ReceiptsHash       []byte            `protobuf:"bytes,19,opt,name=ReceiptsHash,proto3" json:"receiptsHash,omitempty"`
	ChainID            []byte            `protobuf:"bytes,20,opt,name=ChainID,proto3" json:"chainID,omitempty"`
	SoftwareVersion    []byte            `protobuf:"bytes,21,opt,name=SoftwareVersion,proto3" json:"softwareVersion,omitempty"`
	AccumulatedFees    *math_big.Int     `protobuf:"bytes,22,opt,name=AccumulatedFees,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"accumulatedFees,omitempty"`
	DeveloperFees      *math_big.Int     `protobuf:"bytes,23,opt,name=DeveloperFees,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"developerFees,omitempty"`
	Reserved           []byte            `protobuf:"bytes,24,opt,name=Reserved,proto3" json:"reserved,omitempty"`
}

func (m *Header) Reset()      { *m = Header{} }
func (*Header) ProtoMessage() {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{3}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Header) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *Header) GetPrevRandSeed() []byte {
	if m != nil {
		return m.PrevRandSeed
	}
	return nil
}

func (m *Header) GetRandSeed() []byte {
	if m != nil {
		return m.RandSeed
	}
	return nil
}

func (m *Header) GetPubKeysBitmap() []byte {
	if m != nil {
		return m.PubKeysBitmap
	}
	return nil
}

func (m *Header) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Header) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Header) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Header) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Header) GetBlockBodyType() Type {
	if m != nil {
		return m.BlockBodyType
	}
	return TxBlock
}

func (m *Header) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Header) GetLeaderSignature() []byte {
	if m != nil {
		return m.LeaderSignature
	}
	return nil
}

func (m *Header) GetMiniBlockHeaders() []MiniBlockHeader {
	if m != nil {
		return m.MiniBlockHeaders
	}
	return nil
}

func (m *Header) GetPeerChanges() []PeerChange {
	if m != nil {
		return m.PeerChanges
	}
	return nil
}

func (m *Header) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *Header) GetMetaBlockHashes() [][]byte {
	if m != nil {
		return m.MetaBlockHashes
	}
	return nil
}

func (m *Header) GetTxCount() uint32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *Header) GetEpochStartMetaHash() []byte {
	if m != nil {
		return m.EpochStartMetaHash
	}
	return nil
}

func (m *Header) GetReceiptsHash() []byte {
	if m != nil {
		return m.ReceiptsHash
	}
	return nil
}

func (m *Header) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Header) GetSoftwareVersion() []byte {
	if m != nil {
		return m.SoftwareVersion
	}
	return nil
}

func (m *Header) GetAccumulatedFees() *math_big.Int {
	if m != nil {
		return m.AccumulatedFees
	}
	return nil
}

func (m *Header) GetDeveloperFees() *math_big.Int {
	if m != nil {
		return m.DeveloperFees
	}
	return nil
}

func (m *Header) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type Body struct {
	MiniBlocks []*MiniBlock `protobuf:"bytes,1,rep,name=MiniBlocks,proto3" json:"miniBlocks,omitempty"`
}

func (m *Body) Reset()      { *m = Body{} }
func (*Body) ProtoMessage() {}
func (*Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{4}
}
func (m *Body) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Body.Merge(m, src)
}
func (m *Body) XXX_Size() int {
	return m.Size()
}
func (m *Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Body proto.InternalMessageInfo

func (m *Body) GetMiniBlocks() []*MiniBlock {
	if m != nil {
		return m.MiniBlocks
	}
	return nil
}

// BodyHeaderPair holds a body and header hash pair
type BodyHeaderPair struct {
	Body   []byte `protobuf:"bytes,1,opt,name=Body,proto3" json:"body,omitempty"`
	Header []byte `protobuf:"bytes,2,opt,name=Header,proto3" json:"header,omitempty"`
}

func (m *BodyHeaderPair) Reset()      { *m = BodyHeaderPair{} }
func (*BodyHeaderPair) ProtoMessage() {}
func (*BodyHeaderPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{5}
}
func (m *BodyHeaderPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BodyHeaderPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BodyHeaderPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyHeaderPair.Merge(m, src)
}
func (m *BodyHeaderPair) XXX_Size() int {
	return m.Size()
}
func (m *BodyHeaderPair) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyHeaderPair.DiscardUnknown(m)
}

var xxx_messageInfo_BodyHeaderPair proto.InternalMessageInfo

func (m *BodyHeaderPair) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *BodyHeaderPair) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Type", Type_name, Type_value)
	proto.RegisterEnum("proto.ProcessingType", ProcessingType_name, ProcessingType_value)
	proto.RegisterEnum("proto.MiniBlockState", MiniBlockState_name, MiniBlockState_value)
	proto.RegisterType((*MiniBlock)(nil), "proto.MiniBlock")
	proto.RegisterType((*MiniBlockHeader)(nil), "proto.MiniBlockHeader")
	proto.RegisterType((*PeerChange)(nil), "proto.PeerChange")
	proto.RegisterType((*Header)(nil), "proto.Header")
	proto.RegisterType((*Body)(nil), "proto.Body")
	proto.RegisterType((*BodyHeaderPair)(nil), "proto.BodyHeaderPair")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor_8e550b1f5926e92d) }

var fileDescriptor_8e550b1f5926e92d = []byte{
	// 1221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x6d, 0xc9, 0x8e, 0x57, 0xbf, 0x5e, 0x27, 0x0e, 0x9b, 0xa6, 0xa4, 0x61, 0xa0, 0x85,
	0x1b, 0xc4, 0x36, 0xea, 0xa2, 0x28, 0xd0, 0x9f, 0x14, 0xa1, 0x9d, 0x34, 0x6e, 0x9b, 0x40, 0xa0,
	0x8c, 0x1e, 0x82, 0x5e, 0x56, 0xe4, 0x5a, 0x22, 0x2a, 0x72, 0x89, 0xe5, 0xca, 0x91, 0x6f, 0x3d,
	0x16, 0x3d, 0xe5, 0x94, 0x47, 0x28, 0x8a, 0xbe, 0x40, 0x5f, 0x21, 0xc7, 0x1c, 0x73, 0x62, 0x1b,
	0xe5, 0x52, 0xf0, 0x94, 0x37, 0x68, 0xb1, 0xb3, 0x94, 0xb8, 0x94, 0x83, 0x22, 0x39, 0xf4, 0x24,
	0xf1, 0x9b, 0xf9, 0x66, 0x67, 0x3e, 0xce, 0xec, 0x10, 0xd5, 0xfb, 0x23, 0xe6, 0xfd, 0xb8, 0x17,
	0x73, 0x26, 0x18, 0xae, 0xc1, 0xcf, 0xb5, 0xdd, 0x41, 0x20, 0x86, 0xe3, 0xfe, 0x9e, 0xc7, 0xc2,
	0xfd, 0x01, 0x1b, 0xb0, 0x7d, 0x80, 0xfb, 0xe3, 0x53, 0x78, 0x82, 0x07, 0xf8, 0xa7, 0x58, 0xdb,
	0x4f, 0x96, 0xd0, 0xda, 0xfd, 0x20, 0x0a, 0x1c, 0x19, 0x09, 0x1f, 0xa0, 0x4b, 0x27, 0x93, 0x7b,
	0x24, 0x19, 0xd2, 0xc4, 0x34, 0xb6, 0x96, 0x77, 0x1a, 0xce, 0x66, 0x96, 0xda, 0x58, 0xe4, 0xd8,
	0x4d, 0x16, 0x06, 0x82, 0x86, 0xb1, 0x38, 0x77, 0xe7, 0x7e, 0xf8, 0x4b, 0xd4, 0x76, 0xa9, 0x47,
	0x83, 0x33, 0xca, 0x7b, 0x43, 0xc2, 0xfd, 0xe3, 0x23, 0x73, 0x69, 0xcb, 0xd8, 0x69, 0x3a, 0x1b,
	0x59, 0x6a, 0xb7, 0x79, 0xd9, 0xe4, 0x2e, 0xfa, 0xe2, 0x4f, 0x51, 0xb3, 0x47, 0x23, 0xbf, 0x20,
	0x2f, 0x03, 0x79, 0x3d, 0x4b, 0xed, 0x66, 0xa2, 0x1b, 0xdc, 0xb2, 0x1f, 0xfe, 0x10, 0x55, 0x4f,
	0xce, 0x63, 0x6a, 0x56, 0xb7, 0x8c, 0x9d, 0xd6, 0x41, 0x5d, 0xd5, 0xb3, 0x27, 0x21, 0xe7, 0x52,
	0x96, 0xda, 0x55, 0x71, 0x1e, 0x53, 0x17, 0x5c, 0x64, 0x59, 0x2e, 0x4d, 0x28, 0x3f, 0xa3, 0xbe,
	0x59, 0xdb, 0x32, 0x66, 0x65, 0xf1, 0x1c, 0xd3, 0xcb, 0x9a, 0xf9, 0x6d, 0xff, 0xb1, 0x84, 0xda,
	0x73, 0x61, 0xee, 0x51, 0xe2, 0x53, 0x8e, 0x3f, 0x40, 0x55, 0x59, 0xb4, 0x69, 0x40, 0x0c, 0x9c,
	0xa5, 0x76, 0x6b, 0x48, 0x92, 0xa1, 0xc6, 0x07, 0xfb, 0xc5, 0x9a, 0x96, 0xde, 0xb0, 0xa6, 0xd7,
	0x68, 0xb9, 0xfc, 0x16, 0x5a, 0xbe, 0x8f, 0x56, 0x4f, 0x26, 0x87, 0x6c, 0x1c, 0x09, 0x50, 0xa5,
	0xe9, 0xd4, 0xb3, 0xd4, 0x5e, 0x15, 0x0a, 0x72, 0x67, 0xb6, 0xb9, 0x72, 0xb5, 0xb7, 0x53, 0x6e,
	0xe5, 0x0d, 0x95, 0x0b, 0x11, 0xea, 0x52, 0xca, 0x0f, 0x87, 0x24, 0x1a, 0x50, 0x7c, 0x13, 0xad,
	0x74, 0xc7, 0xfd, 0x6f, 0xe9, 0x79, 0xae, 0xda, 0xe5, 0x2c, 0xb5, 0x3b, 0x31, 0x20, 0x1a, 0x3b,
	0xf7, 0xc1, 0x1f, 0xa1, 0xba, 0x2a, 0xc6, 0x3f, 0xa2, 0x89, 0xc8, 0x75, 0x6b, 0x67, 0xa9, 0x5d,
	0x4f, 0x0a, 0xd8, 0xd5, 0x7d, 0xb6, 0x7f, 0x6d, 0xa0, 0x95, 0xfc, 0xfd, 0xd8, 0xa8, 0xf6, 0x80,
	0x45, 0x1e, 0x85, 0xa3, 0xaa, 0xce, 0x5a, 0x96, 0xda, 0xb5, 0x48, 0x02, 0xae, 0xc2, 0x65, 0x39,
	0x5d, 0x4e, 0xcf, 0xe0, 0x25, 0x2e, 0x15, 0xe5, 0xc4, 0x39, 0xa6, 0x97, 0x33, 0xf3, 0xc3, 0xb7,
	0x50, 0x43, 0xfe, 0x77, 0x49, 0xe4, 0xf7, 0x28, 0xf5, 0xe1, 0x85, 0x34, 0x9c, 0x6b, 0x59, 0x6a,
	0x6f, 0xc6, 0x1a, 0xae, 0x71, 0x4b, 0xfe, 0x20, 0xe1, 0x8c, 0x5b, 0xd5, 0x24, 0xbc, 0xc8, 0x9b,
	0xfb, 0xe1, 0xdb, 0xa8, 0xa9, 0x04, 0x49, 0x9c, 0x40, 0x84, 0x24, 0xce, 0xbb, 0xf6, 0xdd, 0x2c,
	0xb5, 0xaf, 0xc6, 0xba, 0x41, 0x63, 0x97, 0x19, 0xb2, 0x17, 0x66, 0x2d, 0xb4, 0x52, 0xf4, 0x42,
	0x92, 0xb7, 0xce, 0xcc, 0x86, 0x3f, 0x41, 0x6b, 0x27, 0x41, 0x48, 0x7b, 0x82, 0x84, 0xb1, 0xb9,
	0x0a, 0xb2, 0x5d, 0xcd, 0x52, 0x7b, 0x43, 0xcc, 0x40, 0xed, 0x84, 0xc2, 0x53, 0x2a, 0xed, 0xb2,
	0x71, 0xe4, 0x9b, 0x97, 0x0a, 0xa5, 0xb9, 0x04, 0x5c, 0x85, 0x4b, 0x87, 0x3b, 0x31, 0xf3, 0x86,
	0xe6, 0x1a, 0x1c, 0x0e, 0x0e, 0x54, 0x02, 0xae, 0xc2, 0xf1, 0x11, 0x6a, 0xc2, 0x68, 0x39, 0xcc,
	0x3f, 0x87, 0x6e, 0x44, 0x17, 0xbb, 0x11, 0x06, 0xa6, 0xaf, 0x7b, 0xb9, 0x65, 0x92, 0x4c, 0xbf,
	0x17, 0x0c, 0x22, 0x22, 0xc6, 0x9c, 0x9a, 0x75, 0x10, 0x09, 0xd2, 0x4f, 0x66, 0xa0, 0x9e, 0xfe,
	0xdc, 0x13, 0x7f, 0x8d, 0xda, 0xdf, 0x41, 0xcb, 0x14, 0xe4, 0x06, 0x90, 0xdf, 0xcb, 0x52, 0xfb,
	0x9d, 0x51, 0xd9, 0xa4, 0x85, 0x58, 0x64, 0xe1, 0x1f, 0x50, 0x67, 0xe1, 0x92, 0x48, 0xcc, 0xe6,
	0xd6, 0xf2, 0x4e, 0xfd, 0x60, 0x33, 0x2f, 0x64, 0xc1, 0xec, 0x98, 0x4f, 0x53, 0xbb, 0x22, 0x67,
	0x20, 0x5c, 0xe0, 0xb9, 0x17, 0x22, 0xe1, 0x7b, 0xa8, 0x5e, 0x4c, 0x52, 0x62, 0xb6, 0x20, 0xf0,
	0x7a, 0x1e, 0xb8, 0xb0, 0x38, 0x1b, 0x79, 0xcc, 0x7a, 0x5c, 0x78, 0xbb, 0x3a, 0x15, 0x9a, 0x90,
	0x31, 0x01, 0x8d, 0xdf, 0xd6, 0x9a, 0x30, 0xc7, 0x4a, 0x4d, 0x98, 0x63, 0x52, 0xa4, 0xfb, 0x54,
	0x10, 0x95, 0x91, 0xda, 0x09, 0x1d, 0xd8, 0x09, 0x20, 0x52, 0x58, 0x36, 0xe9, 0x22, 0x2d, 0xb0,
	0xf4, 0x6b, 0x69, 0xfd, 0x3f, 0xae, 0xa5, 0x2e, 0xc2, 0xd0, 0x1a, 0x3d, 0x41, 0xb8, 0x90, 0x31,
	0x20, 0x5b, 0x0c, 0xd9, 0x6e, 0x65, 0xa9, 0x7d, 0x9d, 0x5e, 0xb0, 0x6a, 0xa7, 0xbe, 0x86, 0x2b,
	0x47, 0x17, 0xae, 0xc8, 0x58, 0x24, 0x10, 0x6b, 0xa3, 0x18, 0x5d, 0xae, 0xe1, 0xfa, 0xe8, 0xea,
	0xfe, 0x78, 0x1f, 0xad, 0x1e, 0x0e, 0x49, 0x10, 0x1d, 0x1f, 0x99, 0x97, 0x81, 0x7a, 0x25, 0x4b,
	0xed, 0x75, 0x4f, 0x41, 0x1a, 0x6b, 0xe6, 0x25, 0x25, 0xeb, 0xb1, 0x53, 0xf1, 0x88, 0x70, 0xfa,
	0x3d, 0xe5, 0x49, 0xc0, 0x22, 0xf3, 0x4a, 0xd1, 0x57, 0x49, 0xd9, 0xa4, 0x4b, 0xb6, 0xc0, 0xc2,
	0x8f, 0x0d, 0xd4, 0xbe, 0xed, 0x79, 0xe3, 0x70, 0x3c, 0x22, 0x82, 0xfa, 0x77, 0x29, 0x4d, 0xcc,
	0x4d, 0x88, 0x74, 0x2a, 0x23, 0x91, 0xb2, 0xa9, 0x88, 0xf4, 0xfb, 0x9f, 0xf6, 0x9d, 0x90, 0x88,
	0xe1, 0x7e, 0x3f, 0x18, 0xec, 0x1d, 0x47, 0xe2, 0x73, 0xed, 0x6b, 0x20, 0x1c, 0x8f, 0x84, 0xdc,
	0x16, 0xc9, 0x64, 0x3f, 0x9c, 0xec, 0x42, 0x15, 0xbb, 0x1e, 0xe3, 0x74, 0x77, 0xc0, 0xf6, 0x7d,
	0x22, 0xc8, 0x9e, 0x13, 0x0c, 0x8e, 0x23, 0x71, 0x48, 0x12, 0x41, 0xb9, 0xbb, 0x78, 0x3c, 0xfe,
	0xc5, 0x40, 0xcd, 0x23, 0x7a, 0x46, 0x47, 0x2c, 0xa6, 0x1c, 0x12, 0xba, 0x0a, 0x09, 0xf9, 0xf2,
	0x52, 0xf2, 0x75, 0xc3, 0xff, 0x91, 0x4e, 0xf9, 0xe8, 0xd2, 0x5e, 0x32, 0xdf, 0x70, 0x2f, 0xb9,
	0xa8, 0x2a, 0xef, 0x0d, 0xfc, 0x0d, 0x42, 0xf3, 0x49, 0x53, 0x9f, 0x39, 0xf5, 0x83, 0xce, 0xe2,
	0xb4, 0x3a, 0x66, 0x96, 0xda, 0x97, 0xe7, 0x33, 0xaa, 0xf7, 0xb7, 0xc6, 0xde, 0x3e, 0x45, 0x2d,
	0x19, 0x53, 0x0d, 0x6c, 0x97, 0x04, 0xf0, 0x8d, 0x20, 0x11, 0xfd, 0x1b, 0xa1, 0xcf, 0x7c, 0x7d,
	0xd7, 0xa9, 0x2c, 0x6e, 0xce, 0xb6, 0x56, 0xbe, 0x88, 0x60, 0x2f, 0x0e, 0x01, 0xd1, 0xf7, 0xa2,
	0xf2, 0xb9, 0xf1, 0xb3, 0xa1, 0x76, 0x36, 0xae, 0xcb, 0x59, 0x82, 0xc3, 0x3b, 0x15, 0xdc, 0x42,
	0xa8, 0x27, 0x88, 0xa0, 0xea, 0xd9, 0xc2, 0x4d, 0xb4, 0x26, 0x87, 0x5e, 0x3d, 0x7e, 0x81, 0xaf,
	0x23, 0xb3, 0x17, 0x12, 0x2e, 0x0e, 0x59, 0x24, 0x38, 0xf1, 0x84, 0x4b, 0x93, 0xf1, 0x48, 0x28,
	0xeb, 0x43, 0xdc, 0x41, 0x8d, 0xe3, 0xe8, 0x8c, 0x8c, 0x02, 0x5f, 0x21, 0x13, 0xbc, 0x3e, 0x1f,
	0x17, 0x85, 0x3c, 0x31, 0x14, 0xf4, 0x88, 0x70, 0x3f, 0x51, 0xd0, 0x3f, 0xc6, 0x8d, 0xcf, 0x50,
	0xab, 0xcb, 0x99, 0x47, 0x93, 0x24, 0x88, 0x06, 0x90, 0x13, 0x42, 0x2b, 0x0f, 0x18, 0x0f, 0xc9,
	0xa8, 0x53, 0x91, 0x29, 0xf4, 0xbc, 0x21, 0xf5, 0xc7, 0x23, 0xea, 0x77, 0x0c, 0xc8, 0x48, 0x39,
	0x53, 0xbf, 0xb3, 0x74, 0xe3, 0x16, 0x6a, 0xcd, 0xc5, 0x83, 0xcc, 0xf1, 0x1a, 0xaa, 0xdd, 0x0d,
	0x22, 0xa0, 0x36, 0xe4, 0x72, 0x66, 0x31, 0x4b, 0x80, 0xb9, 0x81, 0xda, 0x5d, 0xc2, 0x45, 0x40,
	0x46, 0x77, 0x26, 0xd4, 0x1b, 0x0b, 0xc9, 0x77, 0xbe, 0x7a, 0xf6, 0xc2, 0xaa, 0x3c, 0x7f, 0x61,
	0x55, 0x5e, 0xbd, 0xb0, 0x8c, 0x9f, 0xa6, 0x96, 0xf1, 0xdb, 0xd4, 0x32, 0x9e, 0x4e, 0x2d, 0xe3,
	0xd9, 0xd4, 0x32, 0x9e, 0x4f, 0x2d, 0xe3, 0xaf, 0xa9, 0x65, 0xfc, 0x3d, 0xb5, 0x2a, 0xaf, 0xa6,
	0x96, 0xf1, 0xf8, 0xa5, 0x55, 0x79, 0xf6, 0xd2, 0xaa, 0x3c, 0x7f, 0x69, 0x55, 0x1e, 0xd6, 0x60,
	0x8d, 0xf4, 0x57, 0xe0, 0x35, 0x7f, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xe4, 0x54,
	0x0d, 0x3a, 0x0b, 0x00, 0x00,
}

func (x Type) String() string {
	s, ok := Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ProcessingType) String() string {
	s, ok := ProcessingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MiniBlockState) String() string {
	s, ok := MiniBlockState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MiniBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MiniBlock)
	if !ok {
		that2, ok := that.(MiniBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TxHashes) != len(that1.TxHashes) {
		return false
	}
	for i := range this.TxHashes {
		if !bytes.Equal(this.TxHashes[i], that1.TxHashes[i]) {
			return false
		}
	}
	if this.ReceiverShardID != that1.ReceiverShardID {
		return false
	}
	if this.SenderShardID != that1.SenderShardID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Reserved, that1.Reserved) {
		return false
	}
	return true
}
func (this *MiniBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MiniBlockHeader)
	if !ok {
		that2, ok := that.(MiniBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if this.SenderShardID != that1.SenderShardID {
		return false
	}
	if this.ReceiverShardID != that1.ReceiverShardID {
		return false
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Reserved, that1.Reserved) {
		return false
	}
	return true
}
func (this *PeerChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerChange)
	if !ok {
		that2, ok := that.(PeerChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PubKey, that1.PubKey) {
		return false
	}
	if this.ShardIdDest != that1.ShardIdDest {
		return false
	}
	return true
}
func (this *Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !bytes.Equal(this.PrevHash, that1.PrevHash) {
		return false
	}
	if !bytes.Equal(this.PrevRandSeed, that1.PrevRandSeed) {
		return false
	}
	if !bytes.Equal(this.RandSeed, that1.RandSeed) {
		return false
	}
	if !bytes.Equal(this.PubKeysBitmap, that1.PubKeysBitmap) {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.TimeStamp != that1.TimeStamp {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.BlockBodyType != that1.BlockBodyType {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.LeaderSignature, that1.LeaderSignature) {
		return false
	}
	if len(this.MiniBlockHeaders) != len(that1.MiniBlockHeaders) {
		return false
	}
	for i := range this.MiniBlockHeaders {
		if !this.MiniBlockHeaders[i].Equal(&that1.MiniBlockHeaders[i]) {
			return false
		}
	}
	if len(this.PeerChanges) != len(that1.PeerChanges) {
		return false
	}
	for i := range this.PeerChanges {
		if !this.PeerChanges[i].Equal(&that1.PeerChanges[i]) {
			return false
		}
	}
	if !bytes.Equal(this.RootHash, that1.RootHash) {
		return false
	}
	if len(this.MetaBlockHashes) != len(that1.MetaBlockHashes) {
		return false
	}
	for i := range this.MetaBlockHashes {
		if !bytes.Equal(this.MetaBlockHashes[i], that1.MetaBlockHashes[i]) {
			return false
		}
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	if !bytes.Equal(this.EpochStartMetaHash, that1.EpochStartMetaHash) {
		return false
	}
	if !bytes.Equal(this.ReceiptsHash, that1.ReceiptsHash) {
		return false
	}
	if !bytes.Equal(this.ChainID, that1.ChainID) {
		return false
	}
	if !bytes.Equal(this.SoftwareVersion, that1.SoftwareVersion) {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.AccumulatedFees, that1.AccumulatedFees) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.DeveloperFees, that1.DeveloperFees) {
			return false
		}
	}
	if !bytes.Equal(this.Reserved, that1.Reserved) {
		return false
	}
	return true
}
func (this *Body) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Body)
	if !ok {
		that2, ok := that.(Body)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MiniBlocks) != len(that1.MiniBlocks) {
		return false
	}
	for i := range this.MiniBlocks {
		if !this.MiniBlocks[i].Equal(that1.MiniBlocks[i]) {
			return false
		}
	}
	return true
}
func (this *BodyHeaderPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BodyHeaderPair)
	if !ok {
		that2, ok := that.(BodyHeaderPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !bytes.Equal(this.Header, that1.Header) {
		return false
	}
	return true
}
func (this *MiniBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&block.MiniBlock{")
	s = append(s, "TxHashes: "+fmt.Sprintf("%#v", this.TxHashes)+",\n")
	s = append(s, "ReceiverShardID: "+fmt.Sprintf("%#v", this.ReceiverShardID)+",\n")
	s = append(s, "SenderShardID: "+fmt.Sprintf("%#v", this.SenderShardID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Reserved: "+fmt.Sprintf("%#v", this.Reserved)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MiniBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&block.MiniBlockHeader{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "SenderShardID: "+fmt.Sprintf("%#v", this.SenderShardID)+",\n")
	s = append(s, "ReceiverShardID: "+fmt.Sprintf("%#v", this.ReceiverShardID)+",\n")
	s = append(s, "TxCount: "+fmt.Sprintf("%#v", this.TxCount)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Reserved: "+fmt.Sprintf("%#v", this.Reserved)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&block.PeerChange{")
	s = append(s, "PubKey: "+fmt.Sprintf("%#v", this.PubKey)+",\n")
	s = append(s, "ShardIdDest: "+fmt.Sprintf("%#v", this.ShardIdDest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Header) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 28)
	s = append(s, "&block.Header{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "PrevHash: "+fmt.Sprintf("%#v", this.PrevHash)+",\n")
	s = append(s, "PrevRandSeed: "+fmt.Sprintf("%#v", this.PrevRandSeed)+",\n")
	s = append(s, "RandSeed: "+fmt.Sprintf("%#v", this.RandSeed)+",\n")
	s = append(s, "PubKeysBitmap: "+fmt.Sprintf("%#v", this.PubKeysBitmap)+",\n")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "BlockBodyType: "+fmt.Sprintf("%#v", this.BlockBodyType)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "LeaderSignature: "+fmt.Sprintf("%#v", this.LeaderSignature)+",\n")
	if this.MiniBlockHeaders != nil {
		vs := make([]MiniBlockHeader, len(this.MiniBlockHeaders))
		for i := range vs {
			vs[i] = this.MiniBlockHeaders[i]
		}
		s = append(s, "MiniBlockHeaders: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.PeerChanges != nil {
		vs := make([]PeerChange, len(this.PeerChanges))
		for i := range vs {
			vs[i] = this.PeerChanges[i]
		}
		s = append(s, "PeerChanges: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	s = append(s, "MetaBlockHashes: "+fmt.Sprintf("%#v", this.MetaBlockHashes)+",\n")
	s = append(s, "TxCount: "+fmt.Sprintf("%#v", this.TxCount)+",\n")
	s = append(s, "EpochStartMetaHash: "+fmt.Sprintf("%#v", this.EpochStartMetaHash)+",\n")
	s = append(s, "ReceiptsHash: "+fmt.Sprintf("%#v", this.ReceiptsHash)+",\n")
	s = append(s, "ChainID: "+fmt.Sprintf("%#v", this.ChainID)+",\n")
	s = append(s, "SoftwareVersion: "+fmt.Sprintf("%#v", this.SoftwareVersion)+",\n")
	s = append(s, "AccumulatedFees: "+fmt.Sprintf("%#v", this.AccumulatedFees)+",\n")
	s = append(s, "DeveloperFees: "+fmt.Sprintf("%#v", this.DeveloperFees)+",\n")
	s = append(s, "Reserved: "+fmt.Sprintf("%#v", this.Reserved)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Body) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&block.Body{")
	if this.MiniBlocks != nil {
		s = append(s, "MiniBlocks: "+fmt.Sprintf("%#v", this.MiniBlocks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BodyHeaderPair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&block.BodyHeaderPair{")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlock(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MiniBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.SenderShardID != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.SenderShardID))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverShardID != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.ReceiverShardID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHashes) > 0 {
		for iNdEx := len(m.TxHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashes[iNdEx])
			copy(dAtA[i:], m.TxHashes[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.TxHashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MiniBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.TxCount != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ReceiverShardID != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.ReceiverShardID))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderShardID != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.SenderShardID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardIdDest != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.ShardIdDest))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.DeveloperFees)
		i -= size
		if _, err := __caster.MarshalTo(m.DeveloperFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.AccumulatedFees)
		i -= size
		if _, err := __caster.MarshalTo(m.AccumulatedFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	if len(m.SoftwareVersion) > 0 {
		i -= len(m.SoftwareVersion)
		copy(dAtA[i:], m.SoftwareVersion)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.SoftwareVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ReceiptsHash) > 0 {
		i -= len(m.ReceiptsHash)
		copy(dAtA[i:], m.ReceiptsHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ReceiptsHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.EpochStartMetaHash) > 0 {
		i -= len(m.EpochStartMetaHash)
		copy(dAtA[i:], m.EpochStartMetaHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.EpochStartMetaHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TxCount != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.MetaBlockHashes) > 0 {
		for iNdEx := len(m.MetaBlockHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MetaBlockHashes[iNdEx])
			copy(dAtA[i:], m.MetaBlockHashes[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.MetaBlockHashes[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PeerChanges) > 0 {
		for iNdEx := len(m.PeerChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeerChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.MiniBlockHeaders) > 0 {
		for iNdEx := len(m.MiniBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MiniBlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.LeaderSignature) > 0 {
		i -= len(m.LeaderSignature)
		copy(dAtA[i:], m.LeaderSignature)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.LeaderSignature)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BlockBodyType != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.BlockBodyType))
		i--
		dAtA[i] = 0x50
	}
	if m.Epoch != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x48
	}
	if m.Round != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x40
	}
	if m.TimeStamp != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x38
	}
	if m.ShardID != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PubKeysBitmap) > 0 {
		i -= len(m.PubKeysBitmap)
		copy(dAtA[i:], m.PubKeysBitmap)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PubKeysBitmap)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RandSeed) > 0 {
		i -= len(m.RandSeed)
		copy(dAtA[i:], m.RandSeed)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.RandSeed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrevRandSeed) > 0 {
		i -= len(m.PrevRandSeed)
		copy(dAtA[i:], m.PrevRandSeed)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevRandSeed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrevHash) > 0 {
		i -= len(m.PrevHash)
		copy(dAtA[i:], m.PrevHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Body) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Body) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Body) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MiniBlocks) > 0 {
		for iNdEx := len(m.MiniBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MiniBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BodyHeaderPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BodyHeaderPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BodyHeaderPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MiniBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxHashes) > 0 {
		for _, b := range m.TxHashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.ReceiverShardID != 0 {
		n += 1 + sovBlock(uint64(m.ReceiverShardID))
	}
	if m.SenderShardID != 0 {
		n += 1 + sovBlock(uint64(m.SenderShardID))
	}
	if m.Type != 0 {
		n += 1 + sovBlock(uint64(m.Type))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *MiniBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.SenderShardID != 0 {
		n += 1 + sovBlock(uint64(m.SenderShardID))
	}
	if m.ReceiverShardID != 0 {
		n += 1 + sovBlock(uint64(m.ReceiverShardID))
	}
	if m.TxCount != 0 {
		n += 1 + sovBlock(uint64(m.TxCount))
	}
	if m.Type != 0 {
		n += 1 + sovBlock(uint64(m.Type))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *PeerChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ShardIdDest != 0 {
		n += 1 + sovBlock(uint64(m.ShardIdDest))
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovBlock(uint64(m.Nonce))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.PrevRandSeed)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.RandSeed)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.PubKeysBitmap)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovBlock(uint64(m.ShardID))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovBlock(uint64(m.TimeStamp))
	}
	if m.Round != 0 {
		n += 1 + sovBlock(uint64(m.Round))
	}
	if m.Epoch != 0 {
		n += 1 + sovBlock(uint64(m.Epoch))
	}
	if m.BlockBodyType != 0 {
		n += 1 + sovBlock(uint64(m.BlockBodyType))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.LeaderSignature)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.MiniBlockHeaders) > 0 {
		for _, e := range m.MiniBlockHeaders {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.PeerChanges) > 0 {
		for _, e := range m.PeerChanges {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.MetaBlockHashes) > 0 {
		for _, b := range m.MetaBlockHashes {
			l = len(b)
			n += 2 + l + sovBlock(uint64(l))
		}
	}
	if m.TxCount != 0 {
		n += 2 + sovBlock(uint64(m.TxCount))
	}
	l = len(m.EpochStartMetaHash)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.ReceiptsHash)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.SoftwareVersion)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.AccumulatedFees)
		n += 2 + l + sovBlock(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.DeveloperFees)
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Body) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MiniBlocks) > 0 {
		for _, e := range m.MiniBlocks {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *BodyHeaderPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func sovBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MiniBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MiniBlock{`,
		`TxHashes:` + fmt.Sprintf("%v", this.TxHashes) + `,`,
		`ReceiverShardID:` + fmt.Sprintf("%v", this.ReceiverShardID) + `,`,
		`SenderShardID:` + fmt.Sprintf("%v", this.SenderShardID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MiniBlockHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MiniBlockHeader{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`SenderShardID:` + fmt.Sprintf("%v", this.SenderShardID) + `,`,
		`ReceiverShardID:` + fmt.Sprintf("%v", this.ReceiverShardID) + `,`,
		`TxCount:` + fmt.Sprintf("%v", this.TxCount) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerChange{`,
		`PubKey:` + fmt.Sprintf("%v", this.PubKey) + `,`,
		`ShardIdDest:` + fmt.Sprintf("%v", this.ShardIdDest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Header) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMiniBlockHeaders := "[]MiniBlockHeader{"
	for _, f := range this.MiniBlockHeaders {
		repeatedStringForMiniBlockHeaders += strings.Replace(strings.Replace(f.String(), "MiniBlockHeader", "MiniBlockHeader", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMiniBlockHeaders += "}"
	repeatedStringForPeerChanges := "[]PeerChange{"
	for _, f := range this.PeerChanges {
		repeatedStringForPeerChanges += strings.Replace(strings.Replace(f.String(), "PeerChange", "PeerChange", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPeerChanges += "}"
	s := strings.Join([]string{`&Header{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`PrevHash:` + fmt.Sprintf("%v", this.PrevHash) + `,`,
		`PrevRandSeed:` + fmt.Sprintf("%v", this.PrevRandSeed) + `,`,
		`RandSeed:` + fmt.Sprintf("%v", this.RandSeed) + `,`,
		`PubKeysBitmap:` + fmt.Sprintf("%v", this.PubKeysBitmap) + `,`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`TimeStamp:` + fmt.Sprintf("%v", this.TimeStamp) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`BlockBodyType:` + fmt.Sprintf("%v", this.BlockBodyType) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`LeaderSignature:` + fmt.Sprintf("%v", this.LeaderSignature) + `,`,
		`MiniBlockHeaders:` + repeatedStringForMiniBlockHeaders + `,`,
		`PeerChanges:` + repeatedStringForPeerChanges + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`MetaBlockHashes:` + fmt.Sprintf("%v", this.MetaBlockHashes) + `,`,
		`TxCount:` + fmt.Sprintf("%v", this.TxCount) + `,`,
		`EpochStartMetaHash:` + fmt.Sprintf("%v", this.EpochStartMetaHash) + `,`,
		`ReceiptsHash:` + fmt.Sprintf("%v", this.ReceiptsHash) + `,`,
		`ChainID:` + fmt.Sprintf("%v", this.ChainID) + `,`,
		`SoftwareVersion:` + fmt.Sprintf("%v", this.SoftwareVersion) + `,`,
		`AccumulatedFees:` + fmt.Sprintf("%v", this.AccumulatedFees) + `,`,
		`DeveloperFees:` + fmt.Sprintf("%v", this.DeveloperFees) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Body) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMiniBlocks := "[]*MiniBlock{"
	for _, f := range this.MiniBlocks {
		repeatedStringForMiniBlocks += strings.Replace(f.String(), "MiniBlock", "MiniBlock", 1) + ","
	}
	repeatedStringForMiniBlocks += "}"
	s := strings.Join([]string{`&Body{`,
		`MiniBlocks:` + repeatedStringForMiniBlocks + `,`,
		`}`,
	}, "")
	return s
}
func (this *BodyHeaderPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BodyHeaderPair{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Header:` + fmt.Sprintf("%v", this.Header) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlock(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MiniBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashes = append(m.TxHashes, make([]byte, postIndex-iNdEx))
			copy(m.TxHashes[len(m.TxHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverShardID", wireType)
			}
			m.ReceiverShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderShardID", wireType)
			}
			m.SenderShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiniBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderShardID", wireType)
			}
			m.SenderShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverShardID", wireType)
			}
			m.ReceiverShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIdDest", wireType)
			}
			m.ShardIdDest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIdDest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRandSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevRandSeed = append(m.PrevRandSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevRandSeed == nil {
				m.PrevRandSeed = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandSeed = append(m.RandSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RandSeed == nil {
				m.RandSeed = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeysBitmap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeysBitmap = append(m.PubKeysBitmap[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeysBitmap == nil {
				m.PubKeysBitmap = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBodyType", wireType)
			}
			m.BlockBodyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockBodyType |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderSignature = append(m.LeaderSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderSignature == nil {
				m.LeaderSignature = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlockHeaders = append(m.MiniBlockHeaders, MiniBlockHeader{})
			if err := m.MiniBlockHeaders[len(m.MiniBlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerChanges = append(m.PeerChanges, PeerChange{})
			if err := m.PeerChanges[len(m.PeerChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaBlockHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaBlockHashes = append(m.MetaBlockHashes, make([]byte, postIndex-iNdEx))
			copy(m.MetaBlockHashes[len(m.MetaBlockHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartMetaHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochStartMetaHash = append(m.EpochStartMetaHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EpochStartMetaHash == nil {
				m.EpochStartMetaHash = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsHash = append(m.ReceiptsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptsHash == nil {
				m.ReceiptsHash = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersion = append(m.SoftwareVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.SoftwareVersion == nil {
				m.SoftwareVersion = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.AccumulatedFees = tmp
				}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.DeveloperFees = tmp
				}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Body) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Body: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Body: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlocks = append(m.MiniBlocks, &MiniBlock{})
			if err := m.MiniBlocks[len(m.MiniBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BodyHeaderPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BodyHeaderPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BodyHeaderPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header[:0], dAtA[iNdEx:postIndex]...)
			if m.Header == nil {
				m.Header = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlock = fmt.Errorf("proto: unexpected end of group")
)
