// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sovereignChainHeader.proto

package block

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SovereignChainHeader extends the Header structure with extra fields needed by sovereign chain
type SovereignChainHeader struct {
	Header                    *Header                  `protobuf:"bytes,1,opt,name=Header,proto3" json:"header"`
	ValidatorStatsRootHash    []byte                   `protobuf:"bytes,2,opt,name=ValidatorStatsRootHash,proto3" json:"validatorStatsRootHash"`
	ExtendedShardHeaderHashes [][]byte                 `protobuf:"bytes,3,rep,name=ExtendedShardHeaderHashes,proto3" json:"extendedShardHeaderHashes,omitempty"`
	OutGoingMiniBlockHeader   *OutGoingMiniBlockHeader `protobuf:"bytes,4,opt,name=OutGoingMiniBlockHeader,proto3" json:"outGoingOperations,omitempty"`
	IsStartOfEpoch            bool                     `protobuf:"varint,5,opt,name=IsStartOfEpoch,proto3" json:"isStartOfEpoch,omitempty"`
}

func (m *SovereignChainHeader) Reset()      { *m = SovereignChainHeader{} }
func (*SovereignChainHeader) ProtoMessage() {}
func (*SovereignChainHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9b8ff297a820152, []int{0}
}
func (m *SovereignChainHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SovereignChainHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SovereignChainHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SovereignChainHeader.Merge(m, src)
}
func (m *SovereignChainHeader) XXX_Size() int {
	return m.Size()
}
func (m *SovereignChainHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SovereignChainHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SovereignChainHeader proto.InternalMessageInfo

func (m *SovereignChainHeader) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SovereignChainHeader) GetValidatorStatsRootHash() []byte {
	if m != nil {
		return m.ValidatorStatsRootHash
	}
	return nil
}

func (m *SovereignChainHeader) GetExtendedShardHeaderHashes() [][]byte {
	if m != nil {
		return m.ExtendedShardHeaderHashes
	}
	return nil
}

func (m *SovereignChainHeader) GetOutGoingMiniBlockHeader() *OutGoingMiniBlockHeader {
	if m != nil {
		return m.OutGoingMiniBlockHeader
	}
	return nil
}

func (m *SovereignChainHeader) GetIsStartOfEpoch() bool {
	if m != nil {
		return m.IsStartOfEpoch
	}
	return false
}

type OutGoingMiniBlockHeader struct {
	Hash                                  []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"hash,omitempty"`
	OutGoingOperationsHash                []byte `protobuf:"bytes,2,opt,name=OutGoingOperationsHash,proto3" json:"outGoingOperationsHash,omitempty"`
	AggregatedSignatureOutGoingOperations []byte `protobuf:"bytes,3,opt,name=AggregatedSignatureOutGoingOperations,proto3" json:"aggregatedSignatureOutGoingOperations,omitempty"`
	LeaderSignatureOutGoingOperations     []byte `protobuf:"bytes,4,opt,name=LeaderSignatureOutGoingOperations,proto3" json:"leaderSignatureOutGoingOperations,omitempty"`
}

func (m *OutGoingMiniBlockHeader) Reset()      { *m = OutGoingMiniBlockHeader{} }
func (*OutGoingMiniBlockHeader) ProtoMessage() {}
func (*OutGoingMiniBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9b8ff297a820152, []int{1}
}
func (m *OutGoingMiniBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutGoingMiniBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OutGoingMiniBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutGoingMiniBlockHeader.Merge(m, src)
}
func (m *OutGoingMiniBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *OutGoingMiniBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_OutGoingMiniBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_OutGoingMiniBlockHeader proto.InternalMessageInfo

func (m *OutGoingMiniBlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *OutGoingMiniBlockHeader) GetOutGoingOperationsHash() []byte {
	if m != nil {
		return m.OutGoingOperationsHash
	}
	return nil
}

func (m *OutGoingMiniBlockHeader) GetAggregatedSignatureOutGoingOperations() []byte {
	if m != nil {
		return m.AggregatedSignatureOutGoingOperations
	}
	return nil
}

func (m *OutGoingMiniBlockHeader) GetLeaderSignatureOutGoingOperations() []byte {
	if m != nil {
		return m.LeaderSignatureOutGoingOperations
	}
	return nil
}

func init() {
	proto.RegisterType((*SovereignChainHeader)(nil), "proto.SovereignChainHeader")
	proto.RegisterType((*OutGoingMiniBlockHeader)(nil), "proto.OutGoingMiniBlockHeader")
}

func init() { proto.RegisterFile("sovereignChainHeader.proto", fileDescriptor_b9b8ff297a820152) }

var fileDescriptor_b9b8ff297a820152 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x8f, 0x49, 0x5b, 0x21, 0x6f, 0xec, 0x60, 0xa1, 0x12, 0xaa, 0xc9, 0x09, 0xe3, 0x5f, 0x25,
	0xa0, 0x15, 0xec, 0x03, 0x20, 0x02, 0x13, 0x43, 0x02, 0x55, 0x4a, 0x24, 0x0e, 0x88, 0x8b, 0xdb,
	0x78, 0x8e, 0x45, 0x1b, 0x57, 0x8e, 0x3b, 0x01, 0x12, 0x12, 0x57, 0x6e, 0x7c, 0x0c, 0xc4, 0x07,
	0x41, 0x1c, 0x7b, 0xec, 0xc9, 0xa2, 0xe9, 0x05, 0xf9, 0xb4, 0x8f, 0x80, 0xe6, 0xf4, 0x10, 0x58,
	0xc3, 0x76, 0xca, 0x7b, 0x7e, 0xbf, 0xf7, 0xfb, 0xbd, 0x9f, 0x5f, 0x0c, 0x3b, 0xb9, 0x38, 0xa6,
	0x92, 0x72, 0x96, 0x3d, 0x4d, 0x09, 0xcf, 0x0e, 0x29, 0x49, 0xa8, 0xec, 0x4d, 0xa5, 0x50, 0x02,
	0x35, 0xed, 0xa7, 0xf3, 0x80, 0x71, 0x95, 0xce, 0x86, 0xbd, 0x91, 0x98, 0xf4, 0x99, 0x60, 0xa2,
	0x6f, 0x8f, 0x87, 0xb3, 0x23, 0x9b, 0xd9, 0xc4, 0x46, 0x65, 0x57, 0x67, 0x6b, 0x38, 0x16, 0xa3,
	0x77, 0x65, 0xb2, 0xf7, 0xc3, 0x85, 0x57, 0xe3, 0x0d, 0x0a, 0xe8, 0x21, 0x6c, 0x95, 0x91, 0x07,
	0x02, 0xd0, 0xdd, 0x7a, 0x74, 0xa5, 0x6c, 0xe8, 0x95, 0x87, 0x21, 0x34, 0xda, 0x6f, 0xa5, 0x36,
	0x8e, 0xd6, 0x40, 0x14, 0xc1, 0xf6, 0x6b, 0x32, 0xe6, 0x09, 0x51, 0x42, 0xc6, 0x8a, 0xa8, 0x3c,
	0x12, 0x42, 0x1d, 0x92, 0x3c, 0xf5, 0x2e, 0x05, 0xa0, 0xbb, 0x1d, 0x76, 0x8c, 0xf6, 0xdb, 0xc7,
	0x1b, 0x11, 0x51, 0x4d, 0x27, 0xa2, 0xf0, 0xfa, 0xc1, 0x7b, 0x45, 0xb3, 0x84, 0x26, 0x71, 0x4a,
	0x64, 0x52, 0x4a, 0x9d, 0x96, 0x68, 0xee, 0xb9, 0x81, 0xdb, 0xdd, 0x0e, 0xef, 0x1a, 0xed, 0xdf,
	0xa4, 0x75, 0xa0, 0xfb, 0x62, 0xc2, 0x15, 0x9d, 0x4c, 0xd5, 0x87, 0xa8, 0x9e, 0x09, 0x7d, 0x84,
	0xd7, 0x06, 0x33, 0xf5, 0x5c, 0xf0, 0x8c, 0xbd, 0xe2, 0x19, 0x0f, 0x4f, 0x6f, 0x68, 0x6d, 0xbf,
	0x61, 0xed, 0xe3, 0xb5, 0xfd, 0x1a, 0x54, 0x18, 0x18, 0xed, 0xef, 0x8a, 0x75, 0x71, 0x30, 0xa5,
	0x92, 0x28, 0x2e, 0xb2, 0xaa, 0x7a, 0x9d, 0x00, 0x7a, 0x06, 0x77, 0x5e, 0xe4, 0xb1, 0x22, 0x52,
	0x0d, 0x8e, 0x0e, 0xa6, 0x62, 0x94, 0x7a, 0xcd, 0x00, 0x74, 0x2f, 0x87, 0xbb, 0x46, 0xfb, 0x1e,
	0xff, 0xab, 0x52, 0xa1, 0xfb, 0xa7, 0x67, 0xef, 0xbb, 0x5b, 0x6b, 0x01, 0xdd, 0x81, 0x0d, 0xbb,
	0x06, 0x60, 0xd7, 0x80, 0x8c, 0xf6, 0x77, 0x52, 0x92, 0x57, 0xd9, 0x6c, 0x1d, 0xbd, 0x85, 0xed,
	0xc1, 0x19, 0x0b, 0x95, 0x05, 0xde, 0x32, 0xda, 0x0f, 0xc4, 0x46, 0x44, 0x85, 0xab, 0x86, 0x03,
	0x7d, 0x01, 0xf0, 0xf6, 0x13, 0xc6, 0x24, 0x65, 0x44, 0xd1, 0x24, 0xe6, 0x2c, 0x23, 0x6a, 0x26,
	0xe9, 0x59, 0xb4, 0xe7, 0x5a, 0xb5, 0x7d, 0xa3, 0xfd, 0x3e, 0xb9, 0x48, 0x43, 0x45, 0xfc, 0x62,
	0x0a, 0xe8, 0x13, 0xbc, 0xf1, 0xd2, 0xde, 0xcd, 0xff, 0xc6, 0x68, 0xd8, 0x31, 0xfa, 0x46, 0xfb,
	0xf7, 0xc6, 0xe7, 0x81, 0x2b, 0x23, 0x9c, 0xcf, 0x1c, 0x3e, 0x9e, 0x2f, 0xb1, 0xb3, 0x58, 0x62,
	0xe7, 0x64, 0x89, 0xc1, 0xe7, 0x02, 0x83, 0x6f, 0x05, 0x06, 0x3f, 0x0b, 0x0c, 0xe6, 0x05, 0x06,
	0x8b, 0x02, 0x83, 0x5f, 0x05, 0x06, 0xbf, 0x0b, 0xec, 0x9c, 0x14, 0x18, 0x7c, 0x5d, 0x61, 0x67,
	0xbe, 0xc2, 0xce, 0x62, 0x85, 0x9d, 0x37, 0x4d, 0xfb, 0x78, 0x87, 0x2d, 0xfb, 0x37, 0xee, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x96, 0xb1, 0x70, 0x1e, 0x04, 0x00, 0x00,
}

func (this *SovereignChainHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SovereignChainHeader)
	if !ok {
		that2, ok := that.(SovereignChainHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !bytes.Equal(this.ValidatorStatsRootHash, that1.ValidatorStatsRootHash) {
		return false
	}
	if len(this.ExtendedShardHeaderHashes) != len(that1.ExtendedShardHeaderHashes) {
		return false
	}
	for i := range this.ExtendedShardHeaderHashes {
		if !bytes.Equal(this.ExtendedShardHeaderHashes[i], that1.ExtendedShardHeaderHashes[i]) {
			return false
		}
	}
	if !this.OutGoingMiniBlockHeader.Equal(that1.OutGoingMiniBlockHeader) {
		return false
	}
	if this.IsStartOfEpoch != that1.IsStartOfEpoch {
		return false
	}
	return true
}
func (this *OutGoingMiniBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutGoingMiniBlockHeader)
	if !ok {
		that2, ok := that.(OutGoingMiniBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if !bytes.Equal(this.OutGoingOperationsHash, that1.OutGoingOperationsHash) {
		return false
	}
	if !bytes.Equal(this.AggregatedSignatureOutGoingOperations, that1.AggregatedSignatureOutGoingOperations) {
		return false
	}
	if !bytes.Equal(this.LeaderSignatureOutGoingOperations, that1.LeaderSignatureOutGoingOperations) {
		return false
	}
	return true
}
func (this *SovereignChainHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&block.SovereignChainHeader{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "ValidatorStatsRootHash: "+fmt.Sprintf("%#v", this.ValidatorStatsRootHash)+",\n")
	s = append(s, "ExtendedShardHeaderHashes: "+fmt.Sprintf("%#v", this.ExtendedShardHeaderHashes)+",\n")
	if this.OutGoingMiniBlockHeader != nil {
		s = append(s, "OutGoingMiniBlockHeader: "+fmt.Sprintf("%#v", this.OutGoingMiniBlockHeader)+",\n")
	}
	s = append(s, "IsStartOfEpoch: "+fmt.Sprintf("%#v", this.IsStartOfEpoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutGoingMiniBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&block.OutGoingMiniBlockHeader{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "OutGoingOperationsHash: "+fmt.Sprintf("%#v", this.OutGoingOperationsHash)+",\n")
	s = append(s, "AggregatedSignatureOutGoingOperations: "+fmt.Sprintf("%#v", this.AggregatedSignatureOutGoingOperations)+",\n")
	s = append(s, "LeaderSignatureOutGoingOperations: "+fmt.Sprintf("%#v", this.LeaderSignatureOutGoingOperations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSovereignChainHeader(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SovereignChainHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SovereignChainHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SovereignChainHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsStartOfEpoch {
		i--
		if m.IsStartOfEpoch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.OutGoingMiniBlockHeader != nil {
		{
			size, err := m.OutGoingMiniBlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSovereignChainHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExtendedShardHeaderHashes) > 0 {
		for iNdEx := len(m.ExtendedShardHeaderHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtendedShardHeaderHashes[iNdEx])
			copy(dAtA[i:], m.ExtendedShardHeaderHashes[iNdEx])
			i = encodeVarintSovereignChainHeader(dAtA, i, uint64(len(m.ExtendedShardHeaderHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorStatsRootHash) > 0 {
		i -= len(m.ValidatorStatsRootHash)
		copy(dAtA[i:], m.ValidatorStatsRootHash)
		i = encodeVarintSovereignChainHeader(dAtA, i, uint64(len(m.ValidatorStatsRootHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSovereignChainHeader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutGoingMiniBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutGoingMiniBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutGoingMiniBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeaderSignatureOutGoingOperations) > 0 {
		i -= len(m.LeaderSignatureOutGoingOperations)
		copy(dAtA[i:], m.LeaderSignatureOutGoingOperations)
		i = encodeVarintSovereignChainHeader(dAtA, i, uint64(len(m.LeaderSignatureOutGoingOperations)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AggregatedSignatureOutGoingOperations) > 0 {
		i -= len(m.AggregatedSignatureOutGoingOperations)
		copy(dAtA[i:], m.AggregatedSignatureOutGoingOperations)
		i = encodeVarintSovereignChainHeader(dAtA, i, uint64(len(m.AggregatedSignatureOutGoingOperations)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OutGoingOperationsHash) > 0 {
		i -= len(m.OutGoingOperationsHash)
		copy(dAtA[i:], m.OutGoingOperationsHash)
		i = encodeVarintSovereignChainHeader(dAtA, i, uint64(len(m.OutGoingOperationsHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintSovereignChainHeader(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSovereignChainHeader(dAtA []byte, offset int, v uint64) int {
	offset -= sovSovereignChainHeader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SovereignChainHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	l = len(m.ValidatorStatsRootHash)
	if l > 0 {
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	if len(m.ExtendedShardHeaderHashes) > 0 {
		for _, b := range m.ExtendedShardHeaderHashes {
			l = len(b)
			n += 1 + l + sovSovereignChainHeader(uint64(l))
		}
	}
	if m.OutGoingMiniBlockHeader != nil {
		l = m.OutGoingMiniBlockHeader.Size()
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	if m.IsStartOfEpoch {
		n += 2
	}
	return n
}

func (m *OutGoingMiniBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	l = len(m.OutGoingOperationsHash)
	if l > 0 {
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	l = len(m.AggregatedSignatureOutGoingOperations)
	if l > 0 {
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	l = len(m.LeaderSignatureOutGoingOperations)
	if l > 0 {
		n += 1 + l + sovSovereignChainHeader(uint64(l))
	}
	return n
}

func sovSovereignChainHeader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSovereignChainHeader(x uint64) (n int) {
	return sovSovereignChainHeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SovereignChainHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SovereignChainHeader{`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`ValidatorStatsRootHash:` + fmt.Sprintf("%v", this.ValidatorStatsRootHash) + `,`,
		`ExtendedShardHeaderHashes:` + fmt.Sprintf("%v", this.ExtendedShardHeaderHashes) + `,`,
		`OutGoingMiniBlockHeader:` + strings.Replace(this.OutGoingMiniBlockHeader.String(), "OutGoingMiniBlockHeader", "OutGoingMiniBlockHeader", 1) + `,`,
		`IsStartOfEpoch:` + fmt.Sprintf("%v", this.IsStartOfEpoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutGoingMiniBlockHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutGoingMiniBlockHeader{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`OutGoingOperationsHash:` + fmt.Sprintf("%v", this.OutGoingOperationsHash) + `,`,
		`AggregatedSignatureOutGoingOperations:` + fmt.Sprintf("%v", this.AggregatedSignatureOutGoingOperations) + `,`,
		`LeaderSignatureOutGoingOperations:` + fmt.Sprintf("%v", this.LeaderSignatureOutGoingOperations) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSovereignChainHeader(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SovereignChainHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSovereignChainHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SovereignChainHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SovereignChainHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorStatsRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorStatsRootHash = append(m.ValidatorStatsRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorStatsRootHash == nil {
				m.ValidatorStatsRootHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedShardHeaderHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedShardHeaderHashes = append(m.ExtendedShardHeaderHashes, make([]byte, postIndex-iNdEx))
			copy(m.ExtendedShardHeaderHashes[len(m.ExtendedShardHeaderHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutGoingMiniBlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutGoingMiniBlockHeader == nil {
				m.OutGoingMiniBlockHeader = &OutGoingMiniBlockHeader{}
			}
			if err := m.OutGoingMiniBlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStartOfEpoch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStartOfEpoch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSovereignChainHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutGoingMiniBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSovereignChainHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutGoingMiniBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutGoingMiniBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutGoingOperationsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutGoingOperationsHash = append(m.OutGoingOperationsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OutGoingOperationsHash == nil {
				m.OutGoingOperationsHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedSignatureOutGoingOperations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatedSignatureOutGoingOperations = append(m.AggregatedSignatureOutGoingOperations[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregatedSignatureOutGoingOperations == nil {
				m.AggregatedSignatureOutGoingOperations = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSignatureOutGoingOperations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderSignatureOutGoingOperations = append(m.LeaderSignatureOutGoingOperations[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderSignatureOutGoingOperations == nil {
				m.LeaderSignatureOutGoingOperations = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSovereignChainHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSovereignChainHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSovereignChainHeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSovereignChainHeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSovereignChainHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSovereignChainHeader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSovereignChainHeader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSovereignChainHeader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSovereignChainHeader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSovereignChainHeader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSovereignChainHeader = fmt.Errorf("proto: unexpected end of group")
)
