// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metaBlockV2.proto

package block

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MetaBlockV2 holds all the fields needed for a meta block v2. This is the part that is being hashed and run through consensus.
type MetaBlockV2 struct {
	Nonce               uint64                   `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	Epoch               uint32                   `protobuf:"varint,2,opt,name=Epoch,proto3" json:"epoch"`
	Round               uint64                   `protobuf:"varint,3,opt,name=Round,proto3" json:"round"`
	TimeStampMs         uint64                   `protobuf:"varint,4,opt,name=TimeStampMs,proto3" json:"timeStampMs,omitempty"`
	ShardInfo           []ShardData              `protobuf:"bytes,5,rep,name=ShardInfo,proto3" json:"shardInfo"`
	PeerInfo            []PeerData               `protobuf:"bytes,6,rep,name=PeerInfo,proto3" json:"peerInfo"`
	LeaderSignature     []byte                   `protobuf:"bytes,7,opt,name=LeaderSignature,proto3" json:"leaderSignature,omitempty"`
	PrevHash            []byte                   `protobuf:"bytes,8,opt,name=PrevHash,proto3" json:"prevHash,omitempty"`
	PrevRandSeed        []byte                   `protobuf:"bytes,9,opt,name=PrevRandSeed,proto3" json:"prevRandSeed,omitempty"`
	RandSeed            []byte                   `protobuf:"bytes,10,opt,name=RandSeed,proto3" json:"randSeed,omitempty"`
	MiniBlockHeaders    []MiniBlockHeader        `protobuf:"bytes,11,rep,name=MiniBlockHeaders,proto3" json:"miniBlockHeaders"`
	EpochStart          EpochStart               `protobuf:"bytes,12,opt,name=EpochStart,proto3" json:"epochStart,omitempty"`
	ChainID             []byte                   `protobuf:"bytes,13,opt,name=ChainID,proto3" json:"chainID,omitempty"`
	SoftwareVersion     []byte                   `protobuf:"bytes,14,opt,name=SoftwareVersion,proto3" json:"softwareVersion,omitempty"`
	Reserved            []byte                   `protobuf:"bytes,15,opt,name=Reserved,proto3" json:"reserved,omitempty"`
	GasLimit            uint64                   `protobuf:"varint,16,opt,name=GasLimit,proto3" json:"gasLimit,omitempty"`
	LastExecutionResult *ExecutionResultMetaInfo `protobuf:"bytes,17,opt,name=LastExecutionResult,proto3" json:"lastExecutionResult,omitempty"`
	ExecutionResults    []*ExecutionResultMeta   `protobuf:"bytes,18,rep,name=ExecutionResults,proto3" json:"executionResults,omitempty"`
}

func (m *MetaBlockV2) Reset()      { *m = MetaBlockV2{} }
func (*MetaBlockV2) ProtoMessage() {}
func (*MetaBlockV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_b785f995c647775f, []int{0}
}
func (m *MetaBlockV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaBlockV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MetaBlockV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaBlockV2.Merge(m, src)
}
func (m *MetaBlockV2) XXX_Size() int {
	return m.Size()
}
func (m *MetaBlockV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaBlockV2.DiscardUnknown(m)
}

var xxx_messageInfo_MetaBlockV2 proto.InternalMessageInfo

func (m *MetaBlockV2) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MetaBlockV2) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MetaBlockV2) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MetaBlockV2) GetTimeStampMs() uint64 {
	if m != nil {
		return m.TimeStampMs
	}
	return 0
}

func (m *MetaBlockV2) GetShardInfo() []ShardData {
	if m != nil {
		return m.ShardInfo
	}
	return nil
}

func (m *MetaBlockV2) GetPeerInfo() []PeerData {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *MetaBlockV2) GetLeaderSignature() []byte {
	if m != nil {
		return m.LeaderSignature
	}
	return nil
}

func (m *MetaBlockV2) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *MetaBlockV2) GetPrevRandSeed() []byte {
	if m != nil {
		return m.PrevRandSeed
	}
	return nil
}

func (m *MetaBlockV2) GetRandSeed() []byte {
	if m != nil {
		return m.RandSeed
	}
	return nil
}

func (m *MetaBlockV2) GetMiniBlockHeaders() []MiniBlockHeader {
	if m != nil {
		return m.MiniBlockHeaders
	}
	return nil
}

func (m *MetaBlockV2) GetEpochStart() EpochStart {
	if m != nil {
		return m.EpochStart
	}
	return EpochStart{}
}

func (m *MetaBlockV2) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *MetaBlockV2) GetSoftwareVersion() []byte {
	if m != nil {
		return m.SoftwareVersion
	}
	return nil
}

func (m *MetaBlockV2) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

func (m *MetaBlockV2) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *MetaBlockV2) GetLastExecutionResult() *ExecutionResultMetaInfo {
	if m != nil {
		return m.LastExecutionResult
	}
	return nil
}

func (m *MetaBlockV2) GetExecutionResults() []*ExecutionResultMeta {
	if m != nil {
		return m.ExecutionResults
	}
	return nil
}

// ExecutionResultMetaInfo contains a base execution result and the header hash when the results was notarized
type ExecutionResultMetaInfo struct {
	NotarizedAtHeaderHash   []byte                   `protobuf:"bytes,1,opt,name=NotarizedAtHeaderHash,proto3" json:"notarizedAtHeaderHash,omitempty"`
	BaseExecutionResultMeta *BaseExecutionResultMeta `protobuf:"bytes,2,opt,name=BaseExecutionResultMeta,proto3" json:"baseExecutionResultMeta,omitempty"`
}

func (m *ExecutionResultMetaInfo) Reset()      { *m = ExecutionResultMetaInfo{} }
func (*ExecutionResultMetaInfo) ProtoMessage() {}
func (*ExecutionResultMetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b785f995c647775f, []int{1}
}
func (m *ExecutionResultMetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionResultMetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExecutionResultMetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionResultMetaInfo.Merge(m, src)
}
func (m *ExecutionResultMetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionResultMetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionResultMetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionResultMetaInfo proto.InternalMessageInfo

func (m *ExecutionResultMetaInfo) GetNotarizedAtHeaderHash() []byte {
	if m != nil {
		return m.NotarizedAtHeaderHash
	}
	return nil
}

func (m *ExecutionResultMetaInfo) GetBaseExecutionResultMeta() *BaseExecutionResultMeta {
	if m != nil {
		return m.BaseExecutionResultMeta
	}
	return nil
}

// ExecutionResultMeta contains a base execution result meta and extra fields for meta
type ExecutionResultMeta struct {
	BaseExecutionResultMeta *BaseExecutionResultMeta `protobuf:"bytes,1,opt,name=BaseExecutionResultMeta,proto3" json:"baseExecutionResultMeta,omitempty"`
	ValidatorStatsRootHash  []byte                   `protobuf:"bytes,2,opt,name=ValidatorStatsRootHash,proto3" json:"validatorStatsRootHash,omitempty"`
	AccumulatedFeesInEpoch  *math_big.Int            `protobuf:"bytes,3,opt,name=AccumulatedFeesInEpoch,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"accumulatedFeesInEpoch,omitempty"`
	DevFeesInEpoch          *math_big.Int            `protobuf:"bytes,4,opt,name=DevFeesInEpoch,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"devFeesInEpoch,omitempty"`
}

func (m *ExecutionResultMeta) Reset()      { *m = ExecutionResultMeta{} }
func (*ExecutionResultMeta) ProtoMessage() {}
func (*ExecutionResultMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_b785f995c647775f, []int{2}
}
func (m *ExecutionResultMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionResultMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExecutionResultMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionResultMeta.Merge(m, src)
}
func (m *ExecutionResultMeta) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionResultMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionResultMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionResultMeta proto.InternalMessageInfo

func (m *ExecutionResultMeta) GetBaseExecutionResultMeta() *BaseExecutionResultMeta {
	if m != nil {
		return m.BaseExecutionResultMeta
	}
	return nil
}

func (m *ExecutionResultMeta) GetValidatorStatsRootHash() []byte {
	if m != nil {
		return m.ValidatorStatsRootHash
	}
	return nil
}

func (m *ExecutionResultMeta) GetAccumulatedFeesInEpoch() *math_big.Int {
	if m != nil {
		return m.AccumulatedFeesInEpoch
	}
	return nil
}

func (m *ExecutionResultMeta) GetDevFeesInEpoch() *math_big.Int {
	if m != nil {
		return m.DevFeesInEpoch
	}
	return nil
}

// BaseExecutionResultMeta contains a base execution result and extra fields for meta
type BaseExecutionResultMeta struct {
	BaseExecutionResult *BaseExecutionResult `protobuf:"bytes,1,opt,name=BaseExecutionResult,proto3" json:"baseExecutionResult,omitempty"`
	ReceiptsHash        []byte               `protobuf:"bytes,2,opt,name=ReceiptsHash,proto3" json:"receiptsHash,omitempty"`
	AccumulatedFees     *math_big.Int        `protobuf:"bytes,3,opt,name=AccumulatedFees,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"accumulatedFees,omitempty"`
	DeveloperFees       *math_big.Int        `protobuf:"bytes,4,opt,name=DeveloperFees,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"developerFees,omitempty"`
	GasUsed             uint64               `protobuf:"varint,5,opt,name=GasUsed,proto3" json:"gasUsed,omitempty"`
	ExecutedTxCount     uint64               `protobuf:"varint,6,opt,name=ExecutedTxCount,proto3" json:"executedTxCount,omitempty"`
}

func (m *BaseExecutionResultMeta) Reset()      { *m = BaseExecutionResultMeta{} }
func (*BaseExecutionResultMeta) ProtoMessage() {}
func (*BaseExecutionResultMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_b785f995c647775f, []int{3}
}
func (m *BaseExecutionResultMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseExecutionResultMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BaseExecutionResultMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseExecutionResultMeta.Merge(m, src)
}
func (m *BaseExecutionResultMeta) XXX_Size() int {
	return m.Size()
}
func (m *BaseExecutionResultMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseExecutionResultMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BaseExecutionResultMeta proto.InternalMessageInfo

func (m *BaseExecutionResultMeta) GetBaseExecutionResult() *BaseExecutionResult {
	if m != nil {
		return m.BaseExecutionResult
	}
	return nil
}

func (m *BaseExecutionResultMeta) GetReceiptsHash() []byte {
	if m != nil {
		return m.ReceiptsHash
	}
	return nil
}

func (m *BaseExecutionResultMeta) GetAccumulatedFees() *math_big.Int {
	if m != nil {
		return m.AccumulatedFees
	}
	return nil
}

func (m *BaseExecutionResultMeta) GetDeveloperFees() *math_big.Int {
	if m != nil {
		return m.DeveloperFees
	}
	return nil
}

func (m *BaseExecutionResultMeta) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *BaseExecutionResultMeta) GetExecutedTxCount() uint64 {
	if m != nil {
		return m.ExecutedTxCount
	}
	return 0
}

func init() {
	proto.RegisterType((*MetaBlockV2)(nil), "proto.MetaBlockV2")
	proto.RegisterType((*ExecutionResultMetaInfo)(nil), "proto.ExecutionResultMetaInfo")
	proto.RegisterType((*ExecutionResultMeta)(nil), "proto.ExecutionResultMeta")
	proto.RegisterType((*BaseExecutionResultMeta)(nil), "proto.BaseExecutionResultMeta")
}

func init() { proto.RegisterFile("metaBlockV2.proto", fileDescriptor_b785f995c647775f) }

var fileDescriptor_b785f995c647775f = []byte{
	// 1029 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0xce, 0xec, 0x12, 0x16, 0x26, 0xb0, 0x84, 0xa1, 0xc0, 0x6c, 0xd4, 0xb5, 0xb3, 0xb4, 0x95,
	0x38, 0x14, 0x22, 0xd1, 0xe3, 0xaa, 0xad, 0x30, 0x50, 0x16, 0x09, 0xb6, 0x2b, 0x67, 0x8b, 0xd4,
	0x6a, 0x2f, 0x93, 0xf8, 0x91, 0x58, 0x8d, 0x3d, 0x91, 0x67, 0x9c, 0xd2, 0x5e, 0xda, 0x73, 0xa5,
	0x56, 0xfb, 0x27, 0x2a, 0x55, 0x55, 0x7f, 0xc8, 0x1e, 0x39, 0x72, 0x72, 0x4b, 0xe8, 0xa1, 0xf2,
	0x69, 0x2f, 0xbd, 0x57, 0x1e, 0x9b, 0x64, 0x62, 0x9c, 0xde, 0xe8, 0x89, 0xf8, 0x7b, 0xdf, 0xf7,
	0xbd, 0xe7, 0x37, 0xcf, 0xf3, 0xc0, 0xcb, 0x1e, 0x48, 0x66, 0xf5, 0x78, 0xfb, 0xeb, 0xd3, 0x9d,
	0xed, 0x7e, 0xc0, 0x25, 0x27, 0x65, 0xf5, 0xa7, 0xb6, 0xd5, 0x71, 0x65, 0x37, 0x6c, 0x6d, 0xb7,
	0xb9, 0xd7, 0xe8, 0xf0, 0x0e, 0x6f, 0x28, 0xb8, 0x15, 0x9e, 0xa9, 0x27, 0xf5, 0xa0, 0x7e, 0xa5,
	0xaa, 0x5a, 0xa5, 0x95, 0x98, 0x64, 0x0f, 0x4b, 0x23, 0xd7, 0x14, 0xd8, 0xf8, 0x79, 0x1e, 0x57,
	0x4e, 0xc6, 0x99, 0x88, 0x89, 0xcb, 0xcf, 0xb9, 0xdf, 0x06, 0x8a, 0xea, 0x68, 0x73, 0xc6, 0x9a,
	0x8f, 0x23, 0xb3, 0xec, 0x27, 0x80, 0x9d, 0xe2, 0x09, 0xe1, 0xa0, 0xcf, 0xdb, 0x5d, 0x7a, 0xaf,
	0x8e, 0x36, 0x17, 0x53, 0x02, 0x24, 0x80, 0x9d, 0xe2, 0x09, 0xc1, 0xe6, 0xa1, 0xef, 0xd0, 0xfb,
	0x63, 0x87, 0x20, 0x01, 0xec, 0x14, 0x27, 0x4f, 0x71, 0xe5, 0xa5, 0xeb, 0x41, 0x53, 0x32, 0xaf,
	0x7f, 0x22, 0xe8, 0x8c, 0xa2, 0x3d, 0x8a, 0x23, 0x73, 0x55, 0x8e, 0xe1, 0x0f, 0xb9, 0xe7, 0x4a,
	0xf0, 0xfa, 0xf2, 0x5b, 0x5b, 0x67, 0x93, 0x5d, 0x3c, 0xdf, 0xec, 0xb2, 0xc0, 0x39, 0xf2, 0xcf,
	0x38, 0x2d, 0xd7, 0xef, 0x6f, 0x56, 0x76, 0xaa, 0xe9, 0xab, 0x6c, 0x2b, 0x7c, 0x9f, 0x49, 0x66,
	0x2d, 0xbf, 0x89, 0xcc, 0x52, 0x1c, 0x99, 0xf3, 0xe2, 0x86, 0x6a, 0x8f, 0x55, 0xe4, 0x63, 0x3c,
	0xf7, 0x02, 0x20, 0x50, 0x0e, 0xb3, 0xca, 0x61, 0x29, 0x73, 0x48, 0x60, 0x65, 0x50, 0xcd, 0x0c,
	0xe6, 0xfa, 0x19, 0xd1, 0x1e, 0x49, 0xc8, 0x21, 0x5e, 0x3a, 0x06, 0xe6, 0x40, 0xd0, 0x74, 0x3b,
	0x3e, 0x93, 0x61, 0x00, 0xf4, 0x41, 0x1d, 0x6d, 0x2e, 0x58, 0x8f, 0xe3, 0xc8, 0x7c, 0xd4, 0x9b,
	0x0c, 0x69, 0xaf, 0x91, 0x57, 0x91, 0x1d, 0x3c, 0xf7, 0x22, 0x80, 0xc1, 0x33, 0x26, 0xba, 0x74,
	0x4e, 0x39, 0xac, 0xc5, 0x91, 0x49, 0xfa, 0x19, 0xa6, 0x49, 0x47, 0x3c, 0xf2, 0x09, 0x5e, 0x48,
	0x7e, 0xdb, 0xcc, 0x77, 0x9a, 0x00, 0x0e, 0x9d, 0x57, 0xba, 0x5a, 0x1c, 0x99, 0x6b, 0x7d, 0x0d,
	0xd7, 0xb4, 0x13, 0xfc, 0x24, 0xe7, 0x48, 0x8b, 0xc7, 0x39, 0x83, 0xdb, 0xba, 0x11, 0x8f, 0xbc,
	0xc2, 0xd5, 0x13, 0xd7, 0x77, 0xd5, 0x84, 0x3c, 0x53, 0xef, 0x20, 0x68, 0x45, 0xf5, 0x6d, 0x2d,
	0xeb, 0x5b, 0x2e, 0x6c, 0xd1, 0xac, 0x7d, 0x55, 0x2f, 0xa7, 0xb3, 0x6f, 0x39, 0x91, 0xcf, 0x31,
	0x56, 0x73, 0xd3, 0x94, 0x2c, 0x90, 0x74, 0xa1, 0x8e, 0x36, 0x2b, 0x3b, 0xcb, 0x99, 0xef, 0x38,
	0x60, 0xbd, 0x9b, 0x59, 0xbe, 0x03, 0x23, 0x4c, 0x2b, 0x56, 0xb3, 0x20, 0x0d, 0xfc, 0x60, 0xaf,
	0xcb, 0x5c, 0xff, 0x68, 0x9f, 0x2e, 0xaa, 0x37, 0x5c, 0x8d, 0x23, 0x73, 0xb9, 0x9d, 0x42, 0x9a,
	0xe6, 0x86, 0x95, 0x1c, 0x68, 0x93, 0x9f, 0xc9, 0x6f, 0x58, 0x00, 0xa7, 0x10, 0x08, 0x97, 0xfb,
	0xf4, 0xe1, 0xf8, 0x40, 0xc5, 0x64, 0x48, 0x3f, 0xd0, 0x9c, 0x4a, 0x35, 0x17, 0x04, 0x04, 0x03,
	0x70, 0xe8, 0x92, 0xd6, 0xdc, 0x0c, 0x9b, 0x68, 0x6e, 0x86, 0x25, 0x9a, 0x43, 0x26, 0x8e, 0x5d,
	0xcf, 0x95, 0xb4, 0xaa, 0xbe, 0x04, 0xa5, 0xe9, 0x64, 0x98, 0xae, 0xb9, 0xe1, 0x11, 0x81, 0x57,
	0x8e, 0x99, 0x90, 0x07, 0xe7, 0xd0, 0x0e, 0xa5, 0xcb, 0x7d, 0x1b, 0x44, 0xd8, 0x93, 0x74, 0x59,
	0xf5, 0xce, 0xb8, 0xe9, 0xdd, 0x64, 0x34, 0xf9, 0xc6, 0x93, 0xf1, 0xb5, 0x9e, 0xc4, 0x91, 0xf9,
	0xb8, 0x77, 0x5b, 0xae, 0x65, 0x2a, 0x72, 0x27, 0x67, 0xb8, 0x9a, 0x83, 0x04, 0x25, 0x6a, 0x0a,
	0x6a, 0xd3, 0x33, 0x5a, 0x46, 0x1c, 0x99, 0x35, 0xc8, 0xe9, 0xb4, 0x54, 0xb7, 0x3c, 0x37, 0xfe,
	0x41, 0x78, 0x7d, 0x4a, 0xed, 0xe4, 0x4b, 0xbc, 0xfa, 0x9c, 0x4b, 0x16, 0xb8, 0xdf, 0x81, 0xb3,
	0x2b, 0xd3, 0x09, 0x52, 0x9f, 0x0f, 0x52, 0xdd, 0x7e, 0x2f, 0x8e, 0x4c, 0xd3, 0x2f, 0x22, 0x68,
	0x19, 0x8b, 0x1d, 0xc8, 0xf7, 0x78, 0xdd, 0x62, 0x02, 0x0a, 0x32, 0xab, 0x8b, 0x6e, 0xdc, 0xd7,
	0x29, 0x2c, 0xeb, 0x83, 0x38, 0x32, 0x9f, 0xb4, 0x8a, 0x83, 0x5a, 0xfa, 0x69, 0x59, 0x36, 0x7e,
	0x9f, 0xc1, 0x2b, 0x05, 0xf8, 0x7f, 0x15, 0x86, 0xfe, 0x8f, 0xc2, 0xc8, 0x2b, 0xbc, 0x76, 0xca,
	0x7a, 0xae, 0xc3, 0x24, 0x0f, 0x9a, 0x92, 0x49, 0x61, 0x73, 0x2e, 0x55, 0xd7, 0xef, 0xa9, 0xae,
	0xbf, 0x1f, 0x47, 0x66, 0x7d, 0x50, 0xc8, 0xd0, 0xec, 0xa7, 0x78, 0x90, 0x5f, 0x10, 0x5e, 0xdb,
	0x6d, 0xb7, 0x43, 0x2f, 0xec, 0x31, 0x09, 0xce, 0x67, 0x00, 0xe2, 0xc8, 0x4f, 0x17, 0xcc, 0x7d,
	0x65, 0xef, 0x25, 0xf6, 0xac, 0x90, 0x31, 0xb6, 0xff, 0xed, 0x0f, 0xf3, 0xc0, 0x63, 0xb2, 0xdb,
	0x68, 0xb9, 0x9d, 0xed, 0x23, 0x5f, 0x3e, 0xd5, 0x56, 0xa4, 0x17, 0xf6, 0xa4, 0x3b, 0x80, 0x40,
	0x9c, 0x37, 0xbc, 0xf3, 0x2d, 0x75, 0x0f, 0x6c, 0xb5, 0x79, 0x00, 0x5b, 0x1d, 0xde, 0x70, 0x98,
	0x64, 0xdb, 0x96, 0xdb, 0x39, 0xf2, 0xe5, 0x1e, 0x13, 0x12, 0x02, 0x7b, 0x4a, 0x31, 0xe4, 0x27,
	0x84, 0x1f, 0xee, 0xc3, 0x40, 0xaf, 0x6f, 0x46, 0xd5, 0x07, 0x71, 0x64, 0x52, 0x67, 0x22, 0x72,
	0x17, 0x75, 0xe5, 0x92, 0x6f, 0xfc, 0x35, 0x33, 0x75, 0x2e, 0x08, 0xc7, 0x2b, 0x05, 0xa1, 0x6c,
	0x5c, 0x6a, 0xd3, 0xc7, 0x25, 0xbd, 0x1b, 0x0a, 0x46, 0x45, 0xbf, 0x1b, 0x0a, 0x74, 0xc9, 0x56,
	0xb2, 0xa1, 0x0d, 0x6e, 0x5f, 0x0a, 0x6d, 0x30, 0xd4, 0x56, 0x0a, 0x34, 0x5c, 0xdf, 0x4a, 0x3a,
	0x9f, 0xbc, 0x46, 0x78, 0x29, 0xd7, 0xf7, 0xec, 0xf4, 0xcf, 0x92, 0x2b, 0x38, 0x77, 0xfa, 0x77,
	0xd1, 0xde, 0x7c, 0x7a, 0xf2, 0x23, 0xc2, 0x8b, 0xfb, 0x30, 0x80, 0x1e, 0xef, 0x43, 0xa0, 0x0a,
	0x4a, 0x8f, 0xdb, 0x89, 0x23, 0x73, 0xdd, 0xd1, 0x03, 0x77, 0x51, 0xce, 0x64, 0xea, 0x64, 0xa5,
	0x1d, 0x32, 0xf1, 0x85, 0x00, 0x87, 0x96, 0xd5, 0x8e, 0x50, 0x2b, 0xad, 0x93, 0x42, 0xfa, 0x4a,
	0xcb, 0x58, 0xc9, 0x4a, 0x4b, 0xcf, 0x08, 0x9c, 0x97, 0xe7, 0x7b, 0x3c, 0xf4, 0x25, 0x9d, 0x55,
	0x42, 0xb5, 0xd2, 0x60, 0x32, 0xa4, 0xaf, 0xb4, 0x9c, 0xca, 0xfa, 0xf4, 0xe2, 0xca, 0x28, 0x5d,
	0x5e, 0x19, 0xa5, 0xb7, 0x57, 0x06, 0xfa, 0x61, 0x68, 0xa0, 0x5f, 0x87, 0x06, 0x7a, 0x33, 0x34,
	0xd0, 0xc5, 0xd0, 0x40, 0x97, 0x43, 0x03, 0xfd, 0x39, 0x34, 0xd0, 0xdf, 0x43, 0xa3, 0xf4, 0x76,
	0x68, 0xa0, 0xd7, 0xd7, 0x46, 0xe9, 0xe2, 0xda, 0x28, 0x5d, 0x5e, 0x1b, 0xa5, 0xaf, 0xca, 0xea,
	0xdf, 0xce, 0xd6, 0xac, 0x9a, 0xb6, 0x8f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x00, 0x7d, 0x9a,
	0x85, 0xcf, 0x0a, 0x00, 0x00,
}

func (this *MetaBlockV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaBlockV2)
	if !ok {
		that2, ok := that.(MetaBlockV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.TimeStampMs != that1.TimeStampMs {
		return false
	}
	if len(this.ShardInfo) != len(that1.ShardInfo) {
		return false
	}
	for i := range this.ShardInfo {
		if !this.ShardInfo[i].Equal(&that1.ShardInfo[i]) {
			return false
		}
	}
	if len(this.PeerInfo) != len(that1.PeerInfo) {
		return false
	}
	for i := range this.PeerInfo {
		if !this.PeerInfo[i].Equal(&that1.PeerInfo[i]) {
			return false
		}
	}
	if !bytes.Equal(this.LeaderSignature, that1.LeaderSignature) {
		return false
	}
	if !bytes.Equal(this.PrevHash, that1.PrevHash) {
		return false
	}
	if !bytes.Equal(this.PrevRandSeed, that1.PrevRandSeed) {
		return false
	}
	if !bytes.Equal(this.RandSeed, that1.RandSeed) {
		return false
	}
	if len(this.MiniBlockHeaders) != len(that1.MiniBlockHeaders) {
		return false
	}
	for i := range this.MiniBlockHeaders {
		if !this.MiniBlockHeaders[i].Equal(&that1.MiniBlockHeaders[i]) {
			return false
		}
	}
	if !this.EpochStart.Equal(&that1.EpochStart) {
		return false
	}
	if !bytes.Equal(this.ChainID, that1.ChainID) {
		return false
	}
	if !bytes.Equal(this.SoftwareVersion, that1.SoftwareVersion) {
		return false
	}
	if !bytes.Equal(this.Reserved, that1.Reserved) {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if !this.LastExecutionResult.Equal(that1.LastExecutionResult) {
		return false
	}
	if len(this.ExecutionResults) != len(that1.ExecutionResults) {
		return false
	}
	for i := range this.ExecutionResults {
		if !this.ExecutionResults[i].Equal(that1.ExecutionResults[i]) {
			return false
		}
	}
	return true
}
func (this *ExecutionResultMetaInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionResultMetaInfo)
	if !ok {
		that2, ok := that.(ExecutionResultMetaInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NotarizedAtHeaderHash, that1.NotarizedAtHeaderHash) {
		return false
	}
	if !this.BaseExecutionResultMeta.Equal(that1.BaseExecutionResultMeta) {
		return false
	}
	return true
}
func (this *ExecutionResultMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionResultMeta)
	if !ok {
		that2, ok := that.(ExecutionResultMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseExecutionResultMeta.Equal(that1.BaseExecutionResultMeta) {
		return false
	}
	if !bytes.Equal(this.ValidatorStatsRootHash, that1.ValidatorStatsRootHash) {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.AccumulatedFeesInEpoch, that1.AccumulatedFeesInEpoch) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.DevFeesInEpoch, that1.DevFeesInEpoch) {
			return false
		}
	}
	return true
}
func (this *BaseExecutionResultMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BaseExecutionResultMeta)
	if !ok {
		that2, ok := that.(BaseExecutionResultMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseExecutionResult.Equal(that1.BaseExecutionResult) {
		return false
	}
	if !bytes.Equal(this.ReceiptsHash, that1.ReceiptsHash) {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.AccumulatedFees, that1.AccumulatedFees) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.DeveloperFees, that1.DeveloperFees) {
			return false
		}
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	if this.ExecutedTxCount != that1.ExecutedTxCount {
		return false
	}
	return true
}
func (this *MetaBlockV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&block.MetaBlockV2{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "TimeStampMs: "+fmt.Sprintf("%#v", this.TimeStampMs)+",\n")
	if this.ShardInfo != nil {
		vs := make([]ShardData, len(this.ShardInfo))
		for i := range vs {
			vs[i] = this.ShardInfo[i]
		}
		s = append(s, "ShardInfo: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.PeerInfo != nil {
		vs := make([]PeerData, len(this.PeerInfo))
		for i := range vs {
			vs[i] = this.PeerInfo[i]
		}
		s = append(s, "PeerInfo: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "LeaderSignature: "+fmt.Sprintf("%#v", this.LeaderSignature)+",\n")
	s = append(s, "PrevHash: "+fmt.Sprintf("%#v", this.PrevHash)+",\n")
	s = append(s, "PrevRandSeed: "+fmt.Sprintf("%#v", this.PrevRandSeed)+",\n")
	s = append(s, "RandSeed: "+fmt.Sprintf("%#v", this.RandSeed)+",\n")
	if this.MiniBlockHeaders != nil {
		vs := make([]MiniBlockHeader, len(this.MiniBlockHeaders))
		for i := range vs {
			vs[i] = this.MiniBlockHeaders[i]
		}
		s = append(s, "MiniBlockHeaders: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "EpochStart: "+strings.Replace(this.EpochStart.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ChainID: "+fmt.Sprintf("%#v", this.ChainID)+",\n")
	s = append(s, "SoftwareVersion: "+fmt.Sprintf("%#v", this.SoftwareVersion)+",\n")
	s = append(s, "Reserved: "+fmt.Sprintf("%#v", this.Reserved)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	if this.LastExecutionResult != nil {
		s = append(s, "LastExecutionResult: "+fmt.Sprintf("%#v", this.LastExecutionResult)+",\n")
	}
	if this.ExecutionResults != nil {
		s = append(s, "ExecutionResults: "+fmt.Sprintf("%#v", this.ExecutionResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionResultMetaInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&block.ExecutionResultMetaInfo{")
	s = append(s, "NotarizedAtHeaderHash: "+fmt.Sprintf("%#v", this.NotarizedAtHeaderHash)+",\n")
	if this.BaseExecutionResultMeta != nil {
		s = append(s, "BaseExecutionResultMeta: "+fmt.Sprintf("%#v", this.BaseExecutionResultMeta)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionResultMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&block.ExecutionResultMeta{")
	if this.BaseExecutionResultMeta != nil {
		s = append(s, "BaseExecutionResultMeta: "+fmt.Sprintf("%#v", this.BaseExecutionResultMeta)+",\n")
	}
	s = append(s, "ValidatorStatsRootHash: "+fmt.Sprintf("%#v", this.ValidatorStatsRootHash)+",\n")
	s = append(s, "AccumulatedFeesInEpoch: "+fmt.Sprintf("%#v", this.AccumulatedFeesInEpoch)+",\n")
	s = append(s, "DevFeesInEpoch: "+fmt.Sprintf("%#v", this.DevFeesInEpoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BaseExecutionResultMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&block.BaseExecutionResultMeta{")
	if this.BaseExecutionResult != nil {
		s = append(s, "BaseExecutionResult: "+fmt.Sprintf("%#v", this.BaseExecutionResult)+",\n")
	}
	s = append(s, "ReceiptsHash: "+fmt.Sprintf("%#v", this.ReceiptsHash)+",\n")
	s = append(s, "AccumulatedFees: "+fmt.Sprintf("%#v", this.AccumulatedFees)+",\n")
	s = append(s, "DeveloperFees: "+fmt.Sprintf("%#v", this.DeveloperFees)+",\n")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "ExecutedTxCount: "+fmt.Sprintf("%#v", this.ExecutedTxCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMetaBlockV2(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MetaBlockV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaBlockV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaBlockV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionResults) > 0 {
		for iNdEx := len(m.ExecutionResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutionResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.LastExecutionResult != nil {
		{
			size, err := m.LastExecutionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.GasLimit != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SoftwareVersion) > 0 {
		i -= len(m.SoftwareVersion)
		copy(dAtA[i:], m.SoftwareVersion)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.SoftwareVersion)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.EpochStart.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.MiniBlockHeaders) > 0 {
		for iNdEx := len(m.MiniBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MiniBlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RandSeed) > 0 {
		i -= len(m.RandSeed)
		copy(dAtA[i:], m.RandSeed)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.RandSeed)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PrevRandSeed) > 0 {
		i -= len(m.PrevRandSeed)
		copy(dAtA[i:], m.PrevRandSeed)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.PrevRandSeed)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PrevHash) > 0 {
		i -= len(m.PrevHash)
		copy(dAtA[i:], m.PrevHash)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.PrevHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LeaderSignature) > 0 {
		i -= len(m.LeaderSignature)
		copy(dAtA[i:], m.LeaderSignature)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.LeaderSignature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PeerInfo) > 0 {
		for iNdEx := len(m.PeerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ShardInfo) > 0 {
		for iNdEx := len(m.ShardInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShardInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TimeStampMs != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.TimeStampMs))
		i--
		dAtA[i] = 0x20
	}
	if m.Round != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x18
	}
	if m.Epoch != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionResultMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResultMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionResultMetaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseExecutionResultMeta != nil {
		{
			size, err := m.BaseExecutionResultMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NotarizedAtHeaderHash) > 0 {
		i -= len(m.NotarizedAtHeaderHash)
		copy(dAtA[i:], m.NotarizedAtHeaderHash)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.NotarizedAtHeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionResultMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResultMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionResultMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.DevFeesInEpoch)
		i -= size
		if _, err := __caster.MarshalTo(m.DevFeesInEpoch, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.AccumulatedFeesInEpoch)
		i -= size
		if _, err := __caster.MarshalTo(m.AccumulatedFeesInEpoch, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorStatsRootHash) > 0 {
		i -= len(m.ValidatorStatsRootHash)
		copy(dAtA[i:], m.ValidatorStatsRootHash)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.ValidatorStatsRootHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseExecutionResultMeta != nil {
		{
			size, err := m.BaseExecutionResultMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseExecutionResultMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseExecutionResultMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseExecutionResultMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutedTxCount != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.ExecutedTxCount))
		i--
		dAtA[i] = 0x30
	}
	if m.GasUsed != 0 {
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x28
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.DeveloperFees)
		i -= size
		if _, err := __caster.MarshalTo(m.DeveloperFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.AccumulatedFees)
		i -= size
		if _, err := __caster.MarshalTo(m.AccumulatedFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ReceiptsHash) > 0 {
		i -= len(m.ReceiptsHash)
		copy(dAtA[i:], m.ReceiptsHash)
		i = encodeVarintMetaBlockV2(dAtA, i, uint64(len(m.ReceiptsHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseExecutionResult != nil {
		{
			size, err := m.BaseExecutionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaBlockV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetaBlockV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetaBlockV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetaBlockV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMetaBlockV2(uint64(m.Nonce))
	}
	if m.Epoch != 0 {
		n += 1 + sovMetaBlockV2(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMetaBlockV2(uint64(m.Round))
	}
	if m.TimeStampMs != 0 {
		n += 1 + sovMetaBlockV2(uint64(m.TimeStampMs))
	}
	if len(m.ShardInfo) > 0 {
		for _, e := range m.ShardInfo {
			l = e.Size()
			n += 1 + l + sovMetaBlockV2(uint64(l))
		}
	}
	if len(m.PeerInfo) > 0 {
		for _, e := range m.PeerInfo {
			l = e.Size()
			n += 1 + l + sovMetaBlockV2(uint64(l))
		}
	}
	l = len(m.LeaderSignature)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.PrevRandSeed)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.RandSeed)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	if len(m.MiniBlockHeaders) > 0 {
		for _, e := range m.MiniBlockHeaders {
			l = e.Size()
			n += 1 + l + sovMetaBlockV2(uint64(l))
		}
	}
	l = m.EpochStart.Size()
	n += 1 + l + sovMetaBlockV2(uint64(l))
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.SoftwareVersion)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 2 + sovMetaBlockV2(uint64(m.GasLimit))
	}
	if m.LastExecutionResult != nil {
		l = m.LastExecutionResult.Size()
		n += 2 + l + sovMetaBlockV2(uint64(l))
	}
	if len(m.ExecutionResults) > 0 {
		for _, e := range m.ExecutionResults {
			l = e.Size()
			n += 2 + l + sovMetaBlockV2(uint64(l))
		}
	}
	return n
}

func (m *ExecutionResultMetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotarizedAtHeaderHash)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	if m.BaseExecutionResultMeta != nil {
		l = m.BaseExecutionResultMeta.Size()
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	return n
}

func (m *ExecutionResultMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseExecutionResultMeta != nil {
		l = m.BaseExecutionResultMeta.Size()
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.ValidatorStatsRootHash)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.AccumulatedFeesInEpoch)
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.DevFeesInEpoch)
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	return n
}

func (m *BaseExecutionResultMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseExecutionResult != nil {
		l = m.BaseExecutionResult.Size()
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	l = len(m.ReceiptsHash)
	if l > 0 {
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.AccumulatedFees)
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.DeveloperFees)
		n += 1 + l + sovMetaBlockV2(uint64(l))
	}
	if m.GasUsed != 0 {
		n += 1 + sovMetaBlockV2(uint64(m.GasUsed))
	}
	if m.ExecutedTxCount != 0 {
		n += 1 + sovMetaBlockV2(uint64(m.ExecutedTxCount))
	}
	return n
}

func sovMetaBlockV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetaBlockV2(x uint64) (n int) {
	return sovMetaBlockV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MetaBlockV2) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShardInfo := "[]ShardData{"
	for _, f := range this.ShardInfo {
		repeatedStringForShardInfo += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForShardInfo += "}"
	repeatedStringForPeerInfo := "[]PeerData{"
	for _, f := range this.PeerInfo {
		repeatedStringForPeerInfo += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForPeerInfo += "}"
	repeatedStringForMiniBlockHeaders := "[]MiniBlockHeader{"
	for _, f := range this.MiniBlockHeaders {
		repeatedStringForMiniBlockHeaders += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForMiniBlockHeaders += "}"
	repeatedStringForExecutionResults := "[]*ExecutionResultMeta{"
	for _, f := range this.ExecutionResults {
		repeatedStringForExecutionResults += strings.Replace(f.String(), "ExecutionResultMeta", "ExecutionResultMeta", 1) + ","
	}
	repeatedStringForExecutionResults += "}"
	s := strings.Join([]string{`&MetaBlockV2{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`TimeStampMs:` + fmt.Sprintf("%v", this.TimeStampMs) + `,`,
		`ShardInfo:` + repeatedStringForShardInfo + `,`,
		`PeerInfo:` + repeatedStringForPeerInfo + `,`,
		`LeaderSignature:` + fmt.Sprintf("%v", this.LeaderSignature) + `,`,
		`PrevHash:` + fmt.Sprintf("%v", this.PrevHash) + `,`,
		`PrevRandSeed:` + fmt.Sprintf("%v", this.PrevRandSeed) + `,`,
		`RandSeed:` + fmt.Sprintf("%v", this.RandSeed) + `,`,
		`MiniBlockHeaders:` + repeatedStringForMiniBlockHeaders + `,`,
		`EpochStart:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EpochStart), "EpochStart", "EpochStart", 1), `&`, ``, 1) + `,`,
		`ChainID:` + fmt.Sprintf("%v", this.ChainID) + `,`,
		`SoftwareVersion:` + fmt.Sprintf("%v", this.SoftwareVersion) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`LastExecutionResult:` + strings.Replace(this.LastExecutionResult.String(), "ExecutionResultMetaInfo", "ExecutionResultMetaInfo", 1) + `,`,
		`ExecutionResults:` + repeatedStringForExecutionResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionResultMetaInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionResultMetaInfo{`,
		`NotarizedAtHeaderHash:` + fmt.Sprintf("%v", this.NotarizedAtHeaderHash) + `,`,
		`BaseExecutionResultMeta:` + strings.Replace(this.BaseExecutionResultMeta.String(), "BaseExecutionResultMeta", "BaseExecutionResultMeta", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionResultMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionResultMeta{`,
		`BaseExecutionResultMeta:` + strings.Replace(this.BaseExecutionResultMeta.String(), "BaseExecutionResultMeta", "BaseExecutionResultMeta", 1) + `,`,
		`ValidatorStatsRootHash:` + fmt.Sprintf("%v", this.ValidatorStatsRootHash) + `,`,
		`AccumulatedFeesInEpoch:` + fmt.Sprintf("%v", this.AccumulatedFeesInEpoch) + `,`,
		`DevFeesInEpoch:` + fmt.Sprintf("%v", this.DevFeesInEpoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaseExecutionResultMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaseExecutionResultMeta{`,
		`BaseExecutionResult:` + strings.Replace(fmt.Sprintf("%v", this.BaseExecutionResult), "BaseExecutionResult", "BaseExecutionResult", 1) + `,`,
		`ReceiptsHash:` + fmt.Sprintf("%v", this.ReceiptsHash) + `,`,
		`AccumulatedFees:` + fmt.Sprintf("%v", this.AccumulatedFees) + `,`,
		`DeveloperFees:` + fmt.Sprintf("%v", this.DeveloperFees) + `,`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`ExecutedTxCount:` + fmt.Sprintf("%v", this.ExecutedTxCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMetaBlockV2(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MetaBlockV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaBlockV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaBlockV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaBlockV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStampMs", wireType)
			}
			m.TimeStampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStampMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardInfo = append(m.ShardInfo, ShardData{})
			if err := m.ShardInfo[len(m.ShardInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerInfo = append(m.PeerInfo, PeerData{})
			if err := m.PeerInfo[len(m.PeerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderSignature = append(m.LeaderSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderSignature == nil {
				m.LeaderSignature = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRandSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevRandSeed = append(m.PrevRandSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevRandSeed == nil {
				m.PrevRandSeed = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandSeed = append(m.RandSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RandSeed == nil {
				m.RandSeed = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlockHeaders = append(m.MiniBlockHeaders, MiniBlockHeader{})
			if err := m.MiniBlockHeaders[len(m.MiniBlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersion = append(m.SoftwareVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.SoftwareVersion == nil {
				m.SoftwareVersion = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastExecutionResult == nil {
				m.LastExecutionResult = &ExecutionResultMetaInfo{}
			}
			if err := m.LastExecutionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionResults = append(m.ExecutionResults, &ExecutionResultMeta{})
			if err := m.ExecutionResults[len(m.ExecutionResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaBlockV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionResultMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaBlockV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResultMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResultMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedAtHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedAtHeaderHash = append(m.NotarizedAtHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NotarizedAtHeaderHash == nil {
				m.NotarizedAtHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseExecutionResultMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseExecutionResultMeta == nil {
				m.BaseExecutionResultMeta = &BaseExecutionResultMeta{}
			}
			if err := m.BaseExecutionResultMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaBlockV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionResultMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaBlockV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResultMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResultMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseExecutionResultMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseExecutionResultMeta == nil {
				m.BaseExecutionResultMeta = &BaseExecutionResultMeta{}
			}
			if err := m.BaseExecutionResultMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorStatsRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorStatsRootHash = append(m.ValidatorStatsRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorStatsRootHash == nil {
				m.ValidatorStatsRootHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFeesInEpoch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.AccumulatedFeesInEpoch = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevFeesInEpoch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.DevFeesInEpoch = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaBlockV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseExecutionResultMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaBlockV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseExecutionResultMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseExecutionResultMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseExecutionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseExecutionResult == nil {
				m.BaseExecutionResult = &BaseExecutionResult{}
			}
			if err := m.BaseExecutionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsHash = append(m.ReceiptsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptsHash == nil {
				m.ReceiptsHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.AccumulatedFees = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.DeveloperFees = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedTxCount", wireType)
			}
			m.ExecutedTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutedTxCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetaBlockV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaBlockV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetaBlockV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetaBlockV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaBlockV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetaBlockV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetaBlockV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetaBlockV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetaBlockV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetaBlockV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetaBlockV2 = fmt.Errorf("proto: unexpected end of group")
)
