// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: headerProof.proto

package block

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HeaderProof defines a proof for a specific header
type HeaderProof struct {
	PubKeysBitmap       []byte `protobuf:"bytes,1,opt,name=PubKeysBitmap,proto3" json:"pubKeysBitmap"`
	AggregatedSignature []byte `protobuf:"bytes,2,opt,name=AggregatedSignature,proto3" json:"aggregatedSignature"`
	HeaderHash          []byte `protobuf:"bytes,3,opt,name=HeaderHash,proto3" json:"headerHash"`
	HeaderEpoch         uint32 `protobuf:"varint,4,opt,name=HeaderEpoch,proto3" json:"headerEpoch"`
	HeaderNonce         uint64 `protobuf:"varint,5,opt,name=HeaderNonce,proto3" json:"headerNonce"`
	HeaderShardId       uint32 `protobuf:"varint,6,opt,name=HeaderShardId,proto3" json:"headerShardId"`
	HeaderRound         uint64 `protobuf:"varint,7,opt,name=HeaderRound,proto3" json:"headerRound"`
	IsStartOfEpoch      bool   `protobuf:"varint,8,opt,name=IsStartOfEpoch,proto3" json:"isStartOfEpoch"`
}

func (m *HeaderProof) Reset()      { *m = HeaderProof{} }
func (*HeaderProof) ProtoMessage() {}
func (*HeaderProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b3e62355ab42552, []int{0}
}
func (m *HeaderProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HeaderProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderProof.Merge(m, src)
}
func (m *HeaderProof) XXX_Size() int {
	return m.Size()
}
func (m *HeaderProof) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderProof.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderProof proto.InternalMessageInfo

func (m *HeaderProof) GetPubKeysBitmap() []byte {
	if m != nil {
		return m.PubKeysBitmap
	}
	return nil
}

func (m *HeaderProof) GetAggregatedSignature() []byte {
	if m != nil {
		return m.AggregatedSignature
	}
	return nil
}

func (m *HeaderProof) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *HeaderProof) GetHeaderEpoch() uint32 {
	if m != nil {
		return m.HeaderEpoch
	}
	return 0
}

func (m *HeaderProof) GetHeaderNonce() uint64 {
	if m != nil {
		return m.HeaderNonce
	}
	return 0
}

func (m *HeaderProof) GetHeaderShardId() uint32 {
	if m != nil {
		return m.HeaderShardId
	}
	return 0
}

func (m *HeaderProof) GetHeaderRound() uint64 {
	if m != nil {
		return m.HeaderRound
	}
	return 0
}

func (m *HeaderProof) GetIsStartOfEpoch() bool {
	if m != nil {
		return m.IsStartOfEpoch
	}
	return false
}

func init() {
	proto.RegisterType((*HeaderProof)(nil), "proto.HeaderProof")
}

func init() { proto.RegisterFile("headerProof.proto", fileDescriptor_7b3e62355ab42552) }

var fileDescriptor_7b3e62355ab42552 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbb, 0x4e, 0xf3, 0x40,
	0x10, 0x85, 0xbd, 0x7f, 0x2e, 0x7f, 0xb4, 0x21, 0x41, 0x71, 0x0a, 0x2c, 0x8a, 0xb1, 0x45, 0xe5,
	0x86, 0x44, 0x88, 0x02, 0x89, 0x06, 0x61, 0x09, 0x29, 0x11, 0x12, 0x44, 0x9b, 0x8e, 0x6e, 0x7d,
	0x89, 0xd7, 0x82, 0x64, 0x2d, 0xc7, 0x2e, 0xe8, 0x78, 0x04, 0x1e, 0x83, 0x47, 0xa1, 0x23, 0x65,
	0x2a, 0x8b, 0x6c, 0x1a, 0xe4, 0x2a, 0x8f, 0x80, 0x58, 0x0b, 0xec, 0x04, 0x2a, 0x7b, 0xce, 0xf9,
	0xce, 0x8c, 0x67, 0x64, 0xdc, 0x61, 0x1e, 0x75, 0xbd, 0x68, 0x14, 0x71, 0x3e, 0xe9, 0x85, 0x11,
	0x8f, 0xb9, 0x5a, 0x93, 0x8f, 0xc3, 0x63, 0x3f, 0x88, 0x59, 0x62, 0xf7, 0x1c, 0x3e, 0xed, 0xfb,
	0xdc, 0xe7, 0x7d, 0x29, 0xdb, 0xc9, 0x44, 0x56, 0xb2, 0x90, 0x6f, 0x79, 0xea, 0xe8, 0xad, 0x82,
	0x9b, 0x83, 0xa2, 0x97, 0x7a, 0x86, 0x5b, 0xa3, 0xc4, 0xbe, 0xf6, 0x1e, 0xe7, 0x56, 0x10, 0x4f,
	0x69, 0xa8, 0x21, 0x03, 0x99, 0x7b, 0x56, 0x27, 0x4b, 0xf5, 0x56, 0x58, 0x36, 0xc8, 0x36, 0xa7,
	0x0e, 0x71, 0xf7, 0xd2, 0xf7, 0x23, 0xcf, 0xa7, 0xb1, 0xe7, 0x8e, 0x03, 0x7f, 0x46, 0xe3, 0x24,
	0xf2, 0xb4, 0x7f, 0x32, 0x7e, 0x90, 0xa5, 0x7a, 0x97, 0xfe, 0xb6, 0xc9, 0x5f, 0x19, 0xb5, 0x87,
	0x71, 0xfe, 0x49, 0x03, 0x3a, 0x67, 0x5a, 0x45, 0x76, 0x68, 0x67, 0xa9, 0x8e, 0xd9, 0x8f, 0x4a,
	0x4a, 0x84, 0x7a, 0xf2, 0xbd, 0xc2, 0x55, 0xc8, 0x1d, 0xa6, 0x55, 0x0d, 0x64, 0xb6, 0xac, 0xfd,
	0x2c, 0xd5, 0x9b, 0xac, 0x90, 0x49, 0x99, 0x29, 0x22, 0x37, 0x7c, 0xe6, 0x78, 0x5a, 0xcd, 0x40,
	0x66, 0xb5, 0x1c, 0x91, 0x32, 0x29, 0x33, 0x5f, 0x97, 0xc9, 0xcb, 0x31, 0xa3, 0x91, 0x3b, 0x74,
	0xb5, 0xba, 0x9c, 0x23, 0x2f, 0xc3, 0xca, 0x06, 0xd9, 0xe6, 0x8a, 0x59, 0x84, 0x27, 0x33, 0x57,
	0xfb, 0xbf, 0x3b, 0x4b, 0xca, 0xa4, 0xcc, 0xa8, 0xe7, 0xb8, 0x3d, 0x9c, 0x8f, 0x63, 0x1a, 0xc5,
	0xb7, 0x93, 0x7c, 0xa9, 0x86, 0x81, 0xcc, 0x86, 0xa5, 0x66, 0xa9, 0xde, 0x0e, 0xb6, 0x1c, 0xb2,
	0x43, 0x5a, 0x17, 0x8b, 0x15, 0x28, 0xcb, 0x15, 0x28, 0x9b, 0x15, 0xa0, 0x27, 0x01, 0xe8, 0x45,
	0x00, 0x7a, 0x15, 0x80, 0x16, 0x02, 0xd0, 0x52, 0x00, 0x7a, 0x17, 0x80, 0x3e, 0x04, 0x28, 0x1b,
	0x01, 0xe8, 0x79, 0x0d, 0xca, 0x62, 0x0d, 0xca, 0x72, 0x0d, 0xca, 0x5d, 0xcd, 0x7e, 0xe0, 0xce,
	0xbd, 0x5d, 0x97, 0x7f, 0xc6, 0xe9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0xce, 0xc1, 0xf0,
	0x64, 0x02, 0x00, 0x00,
}

func (this *HeaderProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderProof)
	if !ok {
		that2, ok := that.(HeaderProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PubKeysBitmap, that1.PubKeysBitmap) {
		return false
	}
	if !bytes.Equal(this.AggregatedSignature, that1.AggregatedSignature) {
		return false
	}
	if !bytes.Equal(this.HeaderHash, that1.HeaderHash) {
		return false
	}
	if this.HeaderEpoch != that1.HeaderEpoch {
		return false
	}
	if this.HeaderNonce != that1.HeaderNonce {
		return false
	}
	if this.HeaderShardId != that1.HeaderShardId {
		return false
	}
	if this.HeaderRound != that1.HeaderRound {
		return false
	}
	if this.IsStartOfEpoch != that1.IsStartOfEpoch {
		return false
	}
	return true
}
func (this *HeaderProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&block.HeaderProof{")
	s = append(s, "PubKeysBitmap: "+fmt.Sprintf("%#v", this.PubKeysBitmap)+",\n")
	s = append(s, "AggregatedSignature: "+fmt.Sprintf("%#v", this.AggregatedSignature)+",\n")
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	s = append(s, "HeaderEpoch: "+fmt.Sprintf("%#v", this.HeaderEpoch)+",\n")
	s = append(s, "HeaderNonce: "+fmt.Sprintf("%#v", this.HeaderNonce)+",\n")
	s = append(s, "HeaderShardId: "+fmt.Sprintf("%#v", this.HeaderShardId)+",\n")
	s = append(s, "HeaderRound: "+fmt.Sprintf("%#v", this.HeaderRound)+",\n")
	s = append(s, "IsStartOfEpoch: "+fmt.Sprintf("%#v", this.IsStartOfEpoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHeaderProof(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HeaderProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsStartOfEpoch {
		i--
		if m.IsStartOfEpoch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.HeaderRound != 0 {
		i = encodeVarintHeaderProof(dAtA, i, uint64(m.HeaderRound))
		i--
		dAtA[i] = 0x38
	}
	if m.HeaderShardId != 0 {
		i = encodeVarintHeaderProof(dAtA, i, uint64(m.HeaderShardId))
		i--
		dAtA[i] = 0x30
	}
	if m.HeaderNonce != 0 {
		i = encodeVarintHeaderProof(dAtA, i, uint64(m.HeaderNonce))
		i--
		dAtA[i] = 0x28
	}
	if m.HeaderEpoch != 0 {
		i = encodeVarintHeaderProof(dAtA, i, uint64(m.HeaderEpoch))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintHeaderProof(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AggregatedSignature) > 0 {
		i -= len(m.AggregatedSignature)
		copy(dAtA[i:], m.AggregatedSignature)
		i = encodeVarintHeaderProof(dAtA, i, uint64(len(m.AggregatedSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKeysBitmap) > 0 {
		i -= len(m.PubKeysBitmap)
		copy(dAtA[i:], m.PubKeysBitmap)
		i = encodeVarintHeaderProof(dAtA, i, uint64(len(m.PubKeysBitmap)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHeaderProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeaderProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HeaderProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKeysBitmap)
	if l > 0 {
		n += 1 + l + sovHeaderProof(uint64(l))
	}
	l = len(m.AggregatedSignature)
	if l > 0 {
		n += 1 + l + sovHeaderProof(uint64(l))
	}
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovHeaderProof(uint64(l))
	}
	if m.HeaderEpoch != 0 {
		n += 1 + sovHeaderProof(uint64(m.HeaderEpoch))
	}
	if m.HeaderNonce != 0 {
		n += 1 + sovHeaderProof(uint64(m.HeaderNonce))
	}
	if m.HeaderShardId != 0 {
		n += 1 + sovHeaderProof(uint64(m.HeaderShardId))
	}
	if m.HeaderRound != 0 {
		n += 1 + sovHeaderProof(uint64(m.HeaderRound))
	}
	if m.IsStartOfEpoch {
		n += 2
	}
	return n
}

func sovHeaderProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeaderProof(x uint64) (n int) {
	return sovHeaderProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HeaderProof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderProof{`,
		`PubKeysBitmap:` + fmt.Sprintf("%v", this.PubKeysBitmap) + `,`,
		`AggregatedSignature:` + fmt.Sprintf("%v", this.AggregatedSignature) + `,`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`HeaderEpoch:` + fmt.Sprintf("%v", this.HeaderEpoch) + `,`,
		`HeaderNonce:` + fmt.Sprintf("%v", this.HeaderNonce) + `,`,
		`HeaderShardId:` + fmt.Sprintf("%v", this.HeaderShardId) + `,`,
		`HeaderRound:` + fmt.Sprintf("%v", this.HeaderRound) + `,`,
		`IsStartOfEpoch:` + fmt.Sprintf("%v", this.IsStartOfEpoch) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHeaderProof(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HeaderProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeaderProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeysBitmap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeaderProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaderProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeysBitmap = append(m.PubKeysBitmap[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeysBitmap == nil {
				m.PubKeysBitmap = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeaderProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaderProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatedSignature = append(m.AggregatedSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregatedSignature == nil {
				m.AggregatedSignature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeaderProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeaderProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderEpoch", wireType)
			}
			m.HeaderEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderNonce", wireType)
			}
			m.HeaderNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderShardId", wireType)
			}
			m.HeaderShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderRound", wireType)
			}
			m.HeaderRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStartOfEpoch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStartOfEpoch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeaderProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeaderProof
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeaderProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeaderProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeaderProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeaderProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeaderProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeaderProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeaderProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeaderProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeaderProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeaderProof = fmt.Errorf("proto: unexpected end of group")
)
