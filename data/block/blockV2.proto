// This file holds the data structures related with the functionality of a shard block V2
syntax = "proto3";

package proto;

option go_package = "block";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "block.proto";

// HeaderV2 extends the Header structure with extra fields for version 2
message HeaderV2 {
  Header                Header                   = 1 [(gogoproto.jsontag) = "header,omitempty"];
  bytes                 ScheduledRootHash        = 2 [(gogoproto.jsontag) = "scheduledRootHash,omitempty"];
  bytes                 ScheduledAccumulatedFees = 3 [(gogoproto.jsontag) = "scheduledAccumulatedFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes                 ScheduledDeveloperFees   = 4 [(gogoproto.jsontag) = "scheduledDeveloperFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  uint64                ScheduledGasProvided     = 5 [(gogoproto.jsontag) = "scheduledGasProvided"];
  uint64                ScheduledGasPenalized    = 6 [(gogoproto.jsontag) = "scheduledGasPenalized"];
  uint64                ScheduledGasRefunded     = 7 [(gogoproto.jsontag) = "scheduledGasRefunded"];
  HeaderProof           PreviousHeaderProof      = 8 [(gogoproto.jsontag) = "previousHeaderProof"];
}

message MiniBlockReserved {
  ProcessingType ExecutionType = 1 [(gogoproto.jsontag) = "executionType"];
  bytes TransactionsType = 2 [(gogoproto.jsontag) = "transactionsType"];
}

message MiniBlockHeaderReserved {
  ProcessingType ExecutionType = 1 [(gogoproto.jsontag) = "executionType"];
  MiniBlockState State = 2 [(gogoproto.jsontag) = "state"];
  int32 IndexOfFirstTxProcessed = 3 [(gogoproto.jsontag) = "indexOfFirstTxProcessed"];
  int32 IndexOfLastTxProcessed = 4 [(gogoproto.jsontag) = "indexOfLastTxProcessed"];
}

// HeaderProof defines a proof for a specific header
message HeaderProof {
  bytes  PubKeysBitmap       = 1 [(gogoproto.jsontag) = "pubKeysBitmap"];
  bytes  AggregatedSignature = 2 [(gogoproto.jsontag) = "aggregatedSignature"];
  bytes  HeaderHash          = 3 [(gogoproto.jsontag) = "headerHash"];
  uint32 HeaderEpoch         = 4 [(gogoproto.jsontag) = "headerEpoch"];
  uint64 HeaderNonce         = 5 [(gogoproto.jsontag) = "headerNonce"];
  uint32 HeaderShardId       = 6 [(gogoproto.jsontag) = "headerShardId"];
  uint64 HeaderRound         = 7 [(gogoproto.jsontag) = "headerRound"];
  bool IsStartOfEpoch        = 8 [(gogoproto.jsontag) = "startOfEpoch"];
}
