// This file holds the data structures related with the functionality of a shard block V3
syntax = "proto3";

package proto;

option go_package = "block";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "block.proto";

// ExecutionResultInfo defines the structure that holds the information about the execution result
message ExecutionResultInfo {
  bytes NotarizedOnHeaderHash         = 1 [(gogoproto.jsontag) = "notarizedOnHeaderHash,omitempty"];
  BaseExecutionResult ExecutionResult = 2 [(gogoproto.jsontag) = "executionResult,omitempty"];;
}

// HeaderV3 defines the structure of the header V3
message HeaderV3 {
  uint64                   Nonce               = 1 [(gogoproto.jsontag) = "nonce"];
  bytes                    PrevHash            = 2 [(gogoproto.jsontag) = "prevHash,omitempty"];
  bytes                    PrevRandSeed        = 3 [(gogoproto.jsontag) = "prevRandSeed,omitempty"];
  bytes                    RandSeed            = 4 [(gogoproto.jsontag) = "randSeed,omitempty"];
  uint32                   ShardID             = 5 [(gogoproto.jsontag) = "shardID"];
  uint64                   TimeStampMs         = 6 [(gogoproto.jsontag) = "timeStampMs,omitempty"];
  uint64                   Round               = 7 [(gogoproto.jsontag) = "round"];
  uint32                   Epoch               = 8 [(gogoproto.jsontag) = "epoch"];
  Type                     BlockBodyType       = 9 [(gogoproto.jsontag) = "blockBodyType"];
  bytes                    LeaderSignature     = 10 [(gogoproto.jsontag) = "leaderSignature,omitempty"];
  repeated MiniBlockHeader MiniBlockHeaders    = 11 [(gogoproto.jsontag) = "miniBlockHeaders", (gogoproto.nullable) = false];
  repeated PeerChange      PeerChanges         = 12 [(gogoproto.jsontag) = "peerChanges", (gogoproto.nullable) = false];
  repeated bytes           MetaBlockHashes     = 13 [(gogoproto.jsontag) = "metaBlockHashes,omitempty"];
  uint32                   TxCount             = 14 [(gogoproto.jsontag) = "txCount"];
  bytes                    EpochStartMetaHash  = 15 [(gogoproto.jsontag) = "epochStartMetaHash,omitempty"];
  bytes                    ReceiptsHash        = 16 [(gogoproto.jsontag) = "receiptsHash,omitempty"];
  bytes                    ChainID             = 17 [(gogoproto.jsontag) = "chainID,omitempty"];
  bytes                    SoftwareVersion     = 18 [(gogoproto.jsontag) = "softwareVersion,omitempty"];
  bytes                    Reserved            = 19 [(gogoproto.jsontag) = "reserved,omitempty"];
  uint32                   GasLimit            = 20 [(gogoproto.jsontag) = "gasLimit,omitempty"];
  ExecutionResultInfo      LastExecutionResult = 21 [(gogoproto.jsontag) = "lastExecutionResult,omitempty"];
  repeated ExecutionResult ExecutionResults    = 22 [(gogoproto.jsontag) = "executionResults,omitempty"];
}
