// This file holds the data structures related with the functionality of a meta block V2
syntax = "proto3";

package proto;

option go_package = "block";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "block.proto";
import "metaBlock.proto";



// MetaBlockV2 holds all the fields needed for a meta block v2. This is the part that is being hashed and run through consensus.
message MetaBlockV2 {
  uint64                       Nonce               = 1 [(gogoproto.jsontag) = "nonce"];
  uint32                       Epoch               = 2 [(gogoproto.jsontag) = "epoch"];
  uint64                       Round               = 3 [(gogoproto.jsontag) = "round"];
  uint64                       TimeStampMs         = 4 [(gogoproto.jsontag) = "timeStampMs,omitempty"];
  repeated ShardData           ShardInfo           = 5 [(gogoproto.jsontag) = "shardInfo", (gogoproto.nullable) = false];
  repeated PeerData            PeerInfo            = 6 [(gogoproto.jsontag) = "peerInfo", (gogoproto.nullable) = false];
  bytes                        LeaderSignature     = 7 [(gogoproto.jsontag) = "leaderSignature,omitempty"];
  bytes                        PrevHash            = 8 [(gogoproto.jsontag) = "prevHash,omitempty"];
  bytes                        PrevRandSeed        = 9 [(gogoproto.jsontag) = "prevRandSeed,omitempty"];
  bytes                        RandSeed            = 10 [(gogoproto.jsontag) = "randSeed,omitempty"];
  repeated MiniBlockHeader     MiniBlockHeaders    = 11 [(gogoproto.jsontag) = "miniBlockHeaders", (gogoproto.nullable) = false];
  EpochStart                   EpochStart          = 12 [(gogoproto.jsontag) = "epochStart,omitempty", (gogoproto.nullable) = false];
  bytes                        ChainID             = 13 [(gogoproto.jsontag) = "chainID,omitempty"];
  bytes                        SoftwareVersion     = 14 [(gogoproto.jsontag) = "softwareVersion,omitempty"];
  bytes                        Reserved            = 15 [(gogoproto.jsontag) = "reserved,omitempty"];
  uint64                       GasLimit            = 16 [(gogoproto.jsontag) = "gasLimit,omitempty"];
  ExecutionResultMetaInfo      LastExecutionResult = 17 [(gogoproto.jsontag) = "lastExecutionResult,omitempty"];
  repeated ExecutionResultMeta ExecutionResults    = 18 [(gogoproto.jsontag) = "executionResults,omitempty"];

}

// ExecutionResultMetaInfo contains a base execution result and the header hash when the results was notarized
message ExecutionResultMetaInfo {
  bytes                   NotarizedAtHeaderHash   = 1 [(gogoproto.jsontag) = "notarizedAtHeaderHash,omitempty"];
  BaseExecutionResultMeta BaseExecutionResultMeta = 2 [(gogoproto.jsontag) = "baseExecutionResultMeta,omitempty"];
}

// ExecutionResultMeta contains a base execution result meta and extra fields for meta
message ExecutionResultMeta {
  BaseExecutionResultMeta BaseExecutionResultMeta = 1 [(gogoproto.jsontag) = "baseExecutionResultMeta,omitempty"];
  bytes                   ValidatorStatsRootHash  = 2 [(gogoproto.jsontag) = "validatorStatsRootHash,omitempty"];
  bytes                   AccumulatedFeesInEpoch  = 3 [(gogoproto.jsontag) = "accumulatedFeesInEpoch,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes                   DevFeesInEpoch          = 4 [(gogoproto.jsontag) = "devFeesInEpoch,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
}

// BaseExecutionResultMeta contains a base execution result and extra fields for meta
message BaseExecutionResultMeta {
  BaseExecutionResult BaseExecutionResult = 1 [(gogoproto.jsontag) = "baseExecutionResult,omitempty"];
  bytes               ReceiptsHash        = 2 [(gogoproto.jsontag) = "receiptsHash,omitempty"];
  bytes               AccumulatedFees     = 3 [(gogoproto.jsontag) = "accumulatedFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes               DeveloperFees       = 4 [(gogoproto.jsontag) = "developerFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  uint64              GasUsed             = 5 [(gogoproto.jsontag) = "gasUsed,omitempty"];
  uint64              ExecutedTxCount     = 6 [(gogoproto.jsontag) = "executedTxCount,omitempty"];
}
