// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockV3.proto

package block

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExecutionResultInfo defines the structure that holds the information about the execution result
type ExecutionResultInfo struct {
	NotarizedOnHeaderHash []byte               `protobuf:"bytes,1,opt,name=NotarizedOnHeaderHash,proto3" json:"notarizedOnHeaderHash,omitempty"`
	ExecutionResult       *BaseExecutionResult `protobuf:"bytes,2,opt,name=ExecutionResult,proto3" json:"executionResult,omitempty"`
}

func (m *ExecutionResultInfo) Reset()      { *m = ExecutionResultInfo{} }
func (*ExecutionResultInfo) ProtoMessage() {}
func (*ExecutionResultInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_831a455abf740488, []int{0}
}
func (m *ExecutionResultInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionResultInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExecutionResultInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionResultInfo.Merge(m, src)
}
func (m *ExecutionResultInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionResultInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionResultInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionResultInfo proto.InternalMessageInfo

func (m *ExecutionResultInfo) GetNotarizedOnHeaderHash() []byte {
	if m != nil {
		return m.NotarizedOnHeaderHash
	}
	return nil
}

func (m *ExecutionResultInfo) GetExecutionResult() *BaseExecutionResult {
	if m != nil {
		return m.ExecutionResult
	}
	return nil
}

// HeaderV3 defines the structure of the header V3
type HeaderV3 struct {
	Nonce               uint64               `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	PrevHash            []byte               `protobuf:"bytes,2,opt,name=PrevHash,proto3" json:"prevHash,omitempty"`
	PrevRandSeed        []byte               `protobuf:"bytes,3,opt,name=PrevRandSeed,proto3" json:"prevRandSeed,omitempty"`
	RandSeed            []byte               `protobuf:"bytes,4,opt,name=RandSeed,proto3" json:"randSeed,omitempty"`
	ShardID             uint32               `protobuf:"varint,5,opt,name=ShardID,proto3" json:"shardID"`
	TimeStampMs         uint64               `protobuf:"varint,6,opt,name=TimeStampMs,proto3" json:"timeStampMs,omitempty"`
	Round               uint64               `protobuf:"varint,7,opt,name=Round,proto3" json:"round"`
	Epoch               uint32               `protobuf:"varint,8,opt,name=Epoch,proto3" json:"epoch"`
	BlockBodyType       Type                 `protobuf:"varint,9,opt,name=BlockBodyType,proto3,enum=proto.Type" json:"blockBodyType"`
	LeaderSignature     []byte               `protobuf:"bytes,10,opt,name=LeaderSignature,proto3" json:"leaderSignature,omitempty"`
	MiniBlockHeaders    []MiniBlockHeader    `protobuf:"bytes,11,rep,name=MiniBlockHeaders,proto3" json:"miniBlockHeaders"`
	PeerChanges         []PeerChange         `protobuf:"bytes,12,rep,name=PeerChanges,proto3" json:"peerChanges"`
	MetaBlockHashes     [][]byte             `protobuf:"bytes,13,rep,name=MetaBlockHashes,proto3" json:"metaBlockHashes,omitempty"`
	TxCount             uint32               `protobuf:"varint,14,opt,name=TxCount,proto3" json:"txCount"`
	EpochStartMetaHash  []byte               `protobuf:"bytes,15,opt,name=EpochStartMetaHash,proto3" json:"epochStartMetaHash,omitempty"`
	ReceiptsHash        []byte               `protobuf:"bytes,16,opt,name=ReceiptsHash,proto3" json:"receiptsHash,omitempty"`
	ChainID             []byte               `protobuf:"bytes,17,opt,name=ChainID,proto3" json:"chainID,omitempty"`
	SoftwareVersion     []byte               `protobuf:"bytes,18,opt,name=SoftwareVersion,proto3" json:"softwareVersion,omitempty"`
	Reserved            []byte               `protobuf:"bytes,19,opt,name=Reserved,proto3" json:"reserved,omitempty"`
	GasLimit            uint32               `protobuf:"varint,20,opt,name=GasLimit,proto3" json:"gasLimit,omitempty"`
	LastExecutionResult *ExecutionResultInfo `protobuf:"bytes,21,opt,name=LastExecutionResult,proto3" json:"lastExecutionResult,omitempty"`
	ExecutionResults    []*ExecutionResult   `protobuf:"bytes,22,rep,name=ExecutionResults,proto3" json:"executionResults,omitempty"`
}

func (m *HeaderV3) Reset()      { *m = HeaderV3{} }
func (*HeaderV3) ProtoMessage() {}
func (*HeaderV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_831a455abf740488, []int{1}
}
func (m *HeaderV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HeaderV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderV3.Merge(m, src)
}
func (m *HeaderV3) XXX_Size() int {
	return m.Size()
}
func (m *HeaderV3) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderV3.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderV3 proto.InternalMessageInfo

func (m *HeaderV3) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *HeaderV3) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *HeaderV3) GetPrevRandSeed() []byte {
	if m != nil {
		return m.PrevRandSeed
	}
	return nil
}

func (m *HeaderV3) GetRandSeed() []byte {
	if m != nil {
		return m.RandSeed
	}
	return nil
}

func (m *HeaderV3) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *HeaderV3) GetTimeStampMs() uint64 {
	if m != nil {
		return m.TimeStampMs
	}
	return 0
}

func (m *HeaderV3) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *HeaderV3) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *HeaderV3) GetBlockBodyType() Type {
	if m != nil {
		return m.BlockBodyType
	}
	return TxBlock
}

func (m *HeaderV3) GetLeaderSignature() []byte {
	if m != nil {
		return m.LeaderSignature
	}
	return nil
}

func (m *HeaderV3) GetMiniBlockHeaders() []MiniBlockHeader {
	if m != nil {
		return m.MiniBlockHeaders
	}
	return nil
}

func (m *HeaderV3) GetPeerChanges() []PeerChange {
	if m != nil {
		return m.PeerChanges
	}
	return nil
}

func (m *HeaderV3) GetMetaBlockHashes() [][]byte {
	if m != nil {
		return m.MetaBlockHashes
	}
	return nil
}

func (m *HeaderV3) GetTxCount() uint32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *HeaderV3) GetEpochStartMetaHash() []byte {
	if m != nil {
		return m.EpochStartMetaHash
	}
	return nil
}

func (m *HeaderV3) GetReceiptsHash() []byte {
	if m != nil {
		return m.ReceiptsHash
	}
	return nil
}

func (m *HeaderV3) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *HeaderV3) GetSoftwareVersion() []byte {
	if m != nil {
		return m.SoftwareVersion
	}
	return nil
}

func (m *HeaderV3) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

func (m *HeaderV3) GetGasLimit() uint32 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *HeaderV3) GetLastExecutionResult() *ExecutionResultInfo {
	if m != nil {
		return m.LastExecutionResult
	}
	return nil
}

func (m *HeaderV3) GetExecutionResults() []*ExecutionResult {
	if m != nil {
		return m.ExecutionResults
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutionResultInfo)(nil), "proto.ExecutionResultInfo")
	proto.RegisterType((*HeaderV3)(nil), "proto.HeaderV3")
}

func init() { proto.RegisterFile("blockV3.proto", fileDescriptor_831a455abf740488) }

var fileDescriptor_831a455abf740488 = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0x8e, 0x97, 0xcd, 0x86, 0x1d, 0x93, 0x25, 0x99, 0x34, 0xd1, 0x6c, 0xd4, 0xf5, 0xa4, 0x5b,
	0x55, 0xca, 0xa1, 0x05, 0x29, 0x1c, 0x2b, 0xb5, 0x92, 0x61, 0x05, 0x48, 0x40, 0x91, 0x83, 0x90,
	0x5a, 0xf5, 0x32, 0xb1, 0x87, 0xc4, 0x6a, 0xec, 0xb1, 0x3c, 0x13, 0x0a, 0x3d, 0xf5, 0x27, 0xf4,
	0x67, 0xf4, 0xa7, 0x70, 0xe4, 0x52, 0x89, 0x93, 0x55, 0xcc, 0xa5, 0xf5, 0x89, 0x9f, 0xb0, 0xf2,
	0xd8, 0xc1, 0x63, 0x27, 0xa7, 0xc4, 0xdf, 0xfb, 0xbe, 0xef, 0xcd, 0xbc, 0x79, 0xef, 0x81, 0xe6,
	0x64, 0xce, 0xec, 0xdf, 0x2e, 0xf7, 0x76, 0x82, 0x90, 0x09, 0x06, 0xeb, 0xf2, 0xa7, 0xff, 0xdd,
	0xd4, 0x15, 0xb3, 0xc5, 0x64, 0xc7, 0x66, 0xde, 0xee, 0x94, 0x4d, 0xd9, 0xae, 0x84, 0x27, 0x8b,
	0x2b, 0xf9, 0x25, 0x3f, 0xe4, 0xbf, 0x4c, 0xd5, 0xd7, 0xa5, 0x49, 0xf6, 0xf1, 0xf1, 0x1f, 0x0d,
	0x74, 0x3e, 0xdd, 0x50, 0x7b, 0x21, 0x5c, 0xe6, 0x5b, 0x94, 0x2f, 0xe6, 0xe2, 0xd8, 0xbf, 0x62,
	0xf0, 0x67, 0xd0, 0x3d, 0x63, 0x82, 0x84, 0xee, 0x1f, 0xd4, 0xf9, 0xc9, 0x3f, 0xa2, 0xc4, 0xa1,
	0xe1, 0x11, 0xe1, 0x33, 0xa4, 0x0d, 0xb4, 0xe1, 0x96, 0xf9, 0x75, 0x12, 0x61, 0xec, 0xaf, 0x23,
	0x7c, 0xcb, 0x3c, 0x57, 0x50, 0x2f, 0x10, 0xb7, 0xd6, 0x7a, 0x07, 0x68, 0x83, 0xed, 0x4a, 0x46,
	0xf4, 0x6a, 0xa0, 0x0d, 0xf5, 0x51, 0x3f, 0x3b, 0xd3, 0x8e, 0x49, 0x38, 0xad, 0x30, 0xcc, 0x0f,
	0x49, 0x84, 0xdf, 0xd3, 0x32, 0xa8, 0xa4, 0xaa, 0x3a, 0x7e, 0xfc, 0x1f, 0x80, 0xcd, 0x2c, 0xe7,
	0xe5, 0x1e, 0xc4, 0xa0, 0x7e, 0xc6, 0x7c, 0x9b, 0xca, 0xc3, 0xbf, 0x36, 0xdf, 0x26, 0x11, 0xae,
	0xfb, 0x29, 0x60, 0x65, 0x38, 0x1c, 0x81, 0xcd, 0xf3, 0x90, 0x5e, 0xcb, 0x0b, 0xbe, 0x92, 0x17,
	0xec, 0x25, 0x11, 0x86, 0x41, 0x8e, 0x29, 0x89, 0x5e, 0x78, 0xf0, 0x07, 0xb0, 0x95, 0xfe, 0xb7,
	0x88, 0xef, 0x8c, 0x29, 0x75, 0xd0, 0x86, 0xd4, 0xf5, 0x93, 0x08, 0xf7, 0x02, 0x05, 0x57, 0xb4,
	0x25, 0x7e, 0x9a, 0xf3, 0x45, 0xfb, 0xba, 0xc8, 0x19, 0xae, 0xea, 0x5e, 0x78, 0xf0, 0x1b, 0xd0,
	0x18, 0xcf, 0x48, 0xe8, 0x1c, 0x1f, 0xa0, 0xfa, 0x40, 0x1b, 0x36, 0x4d, 0x3d, 0x89, 0x70, 0x83,
	0x67, 0x90, 0xb5, 0x8c, 0xc1, 0xef, 0x81, 0x7e, 0xe1, 0x7a, 0x74, 0x2c, 0x88, 0x17, 0x9c, 0x72,
	0xf4, 0x46, 0xde, 0xfa, 0x7d, 0x12, 0xe1, 0xae, 0x28, 0x60, 0x25, 0x81, 0xca, 0x4e, 0x8b, 0x65,
	0xb1, 0x85, 0xef, 0xa0, 0x46, 0x51, 0xac, 0x30, 0x05, 0xac, 0x0c, 0x4f, 0x09, 0x9f, 0x02, 0x66,
	0xcf, 0xd0, 0xa6, 0x3c, 0x82, 0x24, 0xd0, 0x14, 0xb0, 0x32, 0x1c, 0x1e, 0x80, 0xa6, 0x99, 0xb6,
	0x98, 0xc9, 0x9c, 0xdb, 0x8b, 0xdb, 0x80, 0xa2, 0xb7, 0x03, 0x6d, 0xf8, 0x6e, 0xa4, 0xe7, 0xcf,
	0x9b, 0x42, 0x66, 0x3b, 0x89, 0x70, 0xd6, 0xcd, 0x4b, 0x96, 0x55, 0x16, 0xc1, 0x43, 0xb0, 0x7d,
	0x22, 0x1f, 0x70, 0xec, 0x4e, 0x7d, 0x22, 0x16, 0x21, 0x45, 0x40, 0x96, 0x49, 0xb6, 0xc2, 0xbc,
	0x1c, 0x52, 0x5b, 0xa1, 0xa2, 0x82, 0xbf, 0x82, 0xd6, 0xa9, 0xeb, 0xbb, 0xd2, 0x3d, 0x6b, 0x09,
	0x8e, 0xf4, 0xc1, 0xc6, 0x50, 0x1f, 0xf5, 0xf2, 0x13, 0x55, 0xc2, 0x26, 0xba, 0x8b, 0x70, 0x2d,
	0x89, 0x70, 0xcb, 0xab, 0xe8, 0xac, 0x15, 0x27, 0x78, 0x04, 0xf4, 0x73, 0x4a, 0xc3, 0xfd, 0x19,
	0xf1, 0xa7, 0x94, 0xa3, 0x2d, 0x69, 0xdc, 0xce, 0x8d, 0x8b, 0x88, 0xd9, 0xc9, 0x3d, 0xf5, 0xa0,
	0x60, 0x5b, 0xaa, 0x34, 0xbd, 0xf0, 0x29, 0x15, 0x24, 0x73, 0x27, 0x7c, 0x46, 0x39, 0x6a, 0x0e,
	0x36, 0x96, 0x17, 0xf6, 0xca, 0x21, 0xf5, 0xc2, 0x15, 0x55, 0xda, 0x25, 0x17, 0x37, 0xfb, 0x6c,
	0xe1, 0x0b, 0xf4, 0xae, 0xe8, 0x12, 0x91, 0x41, 0xd6, 0x32, 0x06, 0xcf, 0x01, 0x94, 0xef, 0x35,
	0x16, 0x24, 0x14, 0xa9, 0x87, 0x6c, 0xff, 0x6d, 0x59, 0xe3, 0x41, 0x12, 0xe1, 0x2f, 0xe9, 0x4a,
	0x54, 0xc9, 0xba, 0x46, 0x9b, 0x8e, 0x84, 0x45, 0x6d, 0xea, 0x06, 0x82, 0x4b, 0xaf, 0x56, 0x31,
	0x12, 0xa1, 0x82, 0xab, 0x23, 0xa1, 0xf2, 0xe1, 0x2e, 0x68, 0xec, 0xcf, 0x88, 0xeb, 0x1f, 0x1f,
	0xa0, 0xb6, 0x94, 0x76, 0x93, 0x08, 0xb7, 0xed, 0x0c, 0x52, 0x54, 0x4b, 0x56, 0x5a, 0xb2, 0x31,
	0xbb, 0x12, 0xbf, 0x93, 0x90, 0x5e, 0xd2, 0x90, 0xbb, 0xcc, 0x47, 0xb0, 0xe8, 0x11, 0x5e, 0x0e,
	0xa9, 0x25, 0xab, 0xa8, 0xe4, 0x30, 0x52, 0x4e, 0xc3, 0x6b, 0xea, 0xa0, 0x8e, 0x32, 0x8c, 0x39,
	0x56, 0x1a, 0xc6, 0x1c, 0x4b, 0x35, 0x87, 0x84, 0x9f, 0xb8, 0x9e, 0x2b, 0xd0, 0x17, 0xb2, 0xce,
	0x52, 0x33, 0xcd, 0x31, 0x55, 0xb3, 0xe4, 0x41, 0x06, 0x3a, 0x27, 0x84, 0x8b, 0xea, 0xfe, 0xeb,
	0x96, 0xf6, 0xdf, 0x9a, 0x7d, 0x6c, 0x7e, 0x95, 0x44, 0xf8, 0xc3, 0x7c, 0x55, 0xaa, 0x64, 0x59,
	0xe7, 0x0c, 0x27, 0xa0, 0x55, 0x81, 0x38, 0xea, 0x95, 0x9a, 0xbf, 0xba, 0x69, 0x8d, 0x24, 0xc2,
	0xfd, 0xca, 0xa6, 0x55, 0xdb, 0x6d, 0xc5, 0xcf, 0xfc, 0xf1, 0xfe, 0xd1, 0xa8, 0x3d, 0x3c, 0x1a,
	0xb5, 0xe7, 0x47, 0x43, 0xfb, 0x33, 0x36, 0xb4, 0xbf, 0x63, 0x43, 0xbb, 0x8b, 0x0d, 0xed, 0x3e,
	0x36, 0xb4, 0x87, 0xd8, 0xd0, 0xfe, 0x8d, 0x0d, 0xed, 0xbf, 0xd8, 0xa8, 0x3d, 0xc7, 0x86, 0xf6,
	0xd7, 0x93, 0x51, 0xbb, 0x7f, 0x32, 0x6a, 0x0f, 0x4f, 0x46, 0xed, 0x97, 0xba, 0xdc, 0x00, 0x93,
	0x37, 0xf2, 0x24, 0x7b, 0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x8e, 0x42, 0xf3, 0xdf, 0x06,
	0x00, 0x00,
}

func (this *ExecutionResultInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionResultInfo)
	if !ok {
		that2, ok := that.(ExecutionResultInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NotarizedOnHeaderHash, that1.NotarizedOnHeaderHash) {
		return false
	}
	if !this.ExecutionResult.Equal(that1.ExecutionResult) {
		return false
	}
	return true
}
func (this *HeaderV3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderV3)
	if !ok {
		that2, ok := that.(HeaderV3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !bytes.Equal(this.PrevHash, that1.PrevHash) {
		return false
	}
	if !bytes.Equal(this.PrevRandSeed, that1.PrevRandSeed) {
		return false
	}
	if !bytes.Equal(this.RandSeed, that1.RandSeed) {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.TimeStampMs != that1.TimeStampMs {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.BlockBodyType != that1.BlockBodyType {
		return false
	}
	if !bytes.Equal(this.LeaderSignature, that1.LeaderSignature) {
		return false
	}
	if len(this.MiniBlockHeaders) != len(that1.MiniBlockHeaders) {
		return false
	}
	for i := range this.MiniBlockHeaders {
		if !this.MiniBlockHeaders[i].Equal(&that1.MiniBlockHeaders[i]) {
			return false
		}
	}
	if len(this.PeerChanges) != len(that1.PeerChanges) {
		return false
	}
	for i := range this.PeerChanges {
		if !this.PeerChanges[i].Equal(&that1.PeerChanges[i]) {
			return false
		}
	}
	if len(this.MetaBlockHashes) != len(that1.MetaBlockHashes) {
		return false
	}
	for i := range this.MetaBlockHashes {
		if !bytes.Equal(this.MetaBlockHashes[i], that1.MetaBlockHashes[i]) {
			return false
		}
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	if !bytes.Equal(this.EpochStartMetaHash, that1.EpochStartMetaHash) {
		return false
	}
	if !bytes.Equal(this.ReceiptsHash, that1.ReceiptsHash) {
		return false
	}
	if !bytes.Equal(this.ChainID, that1.ChainID) {
		return false
	}
	if !bytes.Equal(this.SoftwareVersion, that1.SoftwareVersion) {
		return false
	}
	if !bytes.Equal(this.Reserved, that1.Reserved) {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if !this.LastExecutionResult.Equal(that1.LastExecutionResult) {
		return false
	}
	if len(this.ExecutionResults) != len(that1.ExecutionResults) {
		return false
	}
	for i := range this.ExecutionResults {
		if !this.ExecutionResults[i].Equal(that1.ExecutionResults[i]) {
			return false
		}
	}
	return true
}
func (this *ExecutionResultInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&block.ExecutionResultInfo{")
	s = append(s, "NotarizedOnHeaderHash: "+fmt.Sprintf("%#v", this.NotarizedOnHeaderHash)+",\n")
	if this.ExecutionResult != nil {
		s = append(s, "ExecutionResult: "+fmt.Sprintf("%#v", this.ExecutionResult)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeaderV3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&block.HeaderV3{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "PrevHash: "+fmt.Sprintf("%#v", this.PrevHash)+",\n")
	s = append(s, "PrevRandSeed: "+fmt.Sprintf("%#v", this.PrevRandSeed)+",\n")
	s = append(s, "RandSeed: "+fmt.Sprintf("%#v", this.RandSeed)+",\n")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "TimeStampMs: "+fmt.Sprintf("%#v", this.TimeStampMs)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "BlockBodyType: "+fmt.Sprintf("%#v", this.BlockBodyType)+",\n")
	s = append(s, "LeaderSignature: "+fmt.Sprintf("%#v", this.LeaderSignature)+",\n")
	if this.MiniBlockHeaders != nil {
		vs := make([]MiniBlockHeader, len(this.MiniBlockHeaders))
		for i := range vs {
			vs[i] = this.MiniBlockHeaders[i]
		}
		s = append(s, "MiniBlockHeaders: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.PeerChanges != nil {
		vs := make([]PeerChange, len(this.PeerChanges))
		for i := range vs {
			vs[i] = this.PeerChanges[i]
		}
		s = append(s, "PeerChanges: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "MetaBlockHashes: "+fmt.Sprintf("%#v", this.MetaBlockHashes)+",\n")
	s = append(s, "TxCount: "+fmt.Sprintf("%#v", this.TxCount)+",\n")
	s = append(s, "EpochStartMetaHash: "+fmt.Sprintf("%#v", this.EpochStartMetaHash)+",\n")
	s = append(s, "ReceiptsHash: "+fmt.Sprintf("%#v", this.ReceiptsHash)+",\n")
	s = append(s, "ChainID: "+fmt.Sprintf("%#v", this.ChainID)+",\n")
	s = append(s, "SoftwareVersion: "+fmt.Sprintf("%#v", this.SoftwareVersion)+",\n")
	s = append(s, "Reserved: "+fmt.Sprintf("%#v", this.Reserved)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	if this.LastExecutionResult != nil {
		s = append(s, "LastExecutionResult: "+fmt.Sprintf("%#v", this.LastExecutionResult)+",\n")
	}
	if this.ExecutionResults != nil {
		s = append(s, "ExecutionResults: "+fmt.Sprintf("%#v", this.ExecutionResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlockV3(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExecutionResultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResultInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionResultInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionResult != nil {
		{
			size, err := m.ExecutionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NotarizedOnHeaderHash) > 0 {
		i -= len(m.NotarizedOnHeaderHash)
		copy(dAtA[i:], m.NotarizedOnHeaderHash)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.NotarizedOnHeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeaderV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionResults) > 0 {
		for iNdEx := len(m.ExecutionResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutionResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlockV3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.LastExecutionResult != nil {
		{
			size, err := m.LastExecutionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlockV3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.GasLimit != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SoftwareVersion) > 0 {
		i -= len(m.SoftwareVersion)
		copy(dAtA[i:], m.SoftwareVersion)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.SoftwareVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ReceiptsHash) > 0 {
		i -= len(m.ReceiptsHash)
		copy(dAtA[i:], m.ReceiptsHash)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.ReceiptsHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.EpochStartMetaHash) > 0 {
		i -= len(m.EpochStartMetaHash)
		copy(dAtA[i:], m.EpochStartMetaHash)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.EpochStartMetaHash)))
		i--
		dAtA[i] = 0x7a
	}
	if m.TxCount != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x70
	}
	if len(m.MetaBlockHashes) > 0 {
		for iNdEx := len(m.MetaBlockHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MetaBlockHashes[iNdEx])
			copy(dAtA[i:], m.MetaBlockHashes[iNdEx])
			i = encodeVarintBlockV3(dAtA, i, uint64(len(m.MetaBlockHashes[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.PeerChanges) > 0 {
		for iNdEx := len(m.PeerChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeerChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlockV3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.MiniBlockHeaders) > 0 {
		for iNdEx := len(m.MiniBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MiniBlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlockV3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.LeaderSignature) > 0 {
		i -= len(m.LeaderSignature)
		copy(dAtA[i:], m.LeaderSignature)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.LeaderSignature)))
		i--
		dAtA[i] = 0x52
	}
	if m.BlockBodyType != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.BlockBodyType))
		i--
		dAtA[i] = 0x48
	}
	if m.Epoch != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x40
	}
	if m.Round != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x38
	}
	if m.TimeStampMs != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.TimeStampMs))
		i--
		dAtA[i] = 0x30
	}
	if m.ShardID != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RandSeed) > 0 {
		i -= len(m.RandSeed)
		copy(dAtA[i:], m.RandSeed)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.RandSeed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrevRandSeed) > 0 {
		i -= len(m.PrevRandSeed)
		copy(dAtA[i:], m.PrevRandSeed)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.PrevRandSeed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrevHash) > 0 {
		i -= len(m.PrevHash)
		copy(dAtA[i:], m.PrevHash)
		i = encodeVarintBlockV3(dAtA, i, uint64(len(m.PrevHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintBlockV3(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockV3(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockV3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutionResultInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotarizedOnHeaderHash)
	if l > 0 {
		n += 1 + l + sovBlockV3(uint64(l))
	}
	if m.ExecutionResult != nil {
		l = m.ExecutionResult.Size()
		n += 1 + l + sovBlockV3(uint64(l))
	}
	return n
}

func (m *HeaderV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovBlockV3(uint64(m.Nonce))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovBlockV3(uint64(l))
	}
	l = len(m.PrevRandSeed)
	if l > 0 {
		n += 1 + l + sovBlockV3(uint64(l))
	}
	l = len(m.RandSeed)
	if l > 0 {
		n += 1 + l + sovBlockV3(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovBlockV3(uint64(m.ShardID))
	}
	if m.TimeStampMs != 0 {
		n += 1 + sovBlockV3(uint64(m.TimeStampMs))
	}
	if m.Round != 0 {
		n += 1 + sovBlockV3(uint64(m.Round))
	}
	if m.Epoch != 0 {
		n += 1 + sovBlockV3(uint64(m.Epoch))
	}
	if m.BlockBodyType != 0 {
		n += 1 + sovBlockV3(uint64(m.BlockBodyType))
	}
	l = len(m.LeaderSignature)
	if l > 0 {
		n += 1 + l + sovBlockV3(uint64(l))
	}
	if len(m.MiniBlockHeaders) > 0 {
		for _, e := range m.MiniBlockHeaders {
			l = e.Size()
			n += 1 + l + sovBlockV3(uint64(l))
		}
	}
	if len(m.PeerChanges) > 0 {
		for _, e := range m.PeerChanges {
			l = e.Size()
			n += 1 + l + sovBlockV3(uint64(l))
		}
	}
	if len(m.MetaBlockHashes) > 0 {
		for _, b := range m.MetaBlockHashes {
			l = len(b)
			n += 1 + l + sovBlockV3(uint64(l))
		}
	}
	if m.TxCount != 0 {
		n += 1 + sovBlockV3(uint64(m.TxCount))
	}
	l = len(m.EpochStartMetaHash)
	if l > 0 {
		n += 1 + l + sovBlockV3(uint64(l))
	}
	l = len(m.ReceiptsHash)
	if l > 0 {
		n += 2 + l + sovBlockV3(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 2 + l + sovBlockV3(uint64(l))
	}
	l = len(m.SoftwareVersion)
	if l > 0 {
		n += 2 + l + sovBlockV3(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 2 + l + sovBlockV3(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 2 + sovBlockV3(uint64(m.GasLimit))
	}
	if m.LastExecutionResult != nil {
		l = m.LastExecutionResult.Size()
		n += 2 + l + sovBlockV3(uint64(l))
	}
	if len(m.ExecutionResults) > 0 {
		for _, e := range m.ExecutionResults {
			l = e.Size()
			n += 2 + l + sovBlockV3(uint64(l))
		}
	}
	return n
}

func sovBlockV3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockV3(x uint64) (n int) {
	return sovBlockV3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExecutionResultInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionResultInfo{`,
		`NotarizedOnHeaderHash:` + fmt.Sprintf("%v", this.NotarizedOnHeaderHash) + `,`,
		`ExecutionResult:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionResult), "BaseExecutionResult", "BaseExecutionResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderV3) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMiniBlockHeaders := "[]MiniBlockHeader{"
	for _, f := range this.MiniBlockHeaders {
		repeatedStringForMiniBlockHeaders += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForMiniBlockHeaders += "}"
	repeatedStringForPeerChanges := "[]PeerChange{"
	for _, f := range this.PeerChanges {
		repeatedStringForPeerChanges += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForPeerChanges += "}"
	repeatedStringForExecutionResults := "[]*ExecutionResult{"
	for _, f := range this.ExecutionResults {
		repeatedStringForExecutionResults += strings.Replace(fmt.Sprintf("%v", f), "ExecutionResult", "ExecutionResult", 1) + ","
	}
	repeatedStringForExecutionResults += "}"
	s := strings.Join([]string{`&HeaderV3{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`PrevHash:` + fmt.Sprintf("%v", this.PrevHash) + `,`,
		`PrevRandSeed:` + fmt.Sprintf("%v", this.PrevRandSeed) + `,`,
		`RandSeed:` + fmt.Sprintf("%v", this.RandSeed) + `,`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`TimeStampMs:` + fmt.Sprintf("%v", this.TimeStampMs) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`BlockBodyType:` + fmt.Sprintf("%v", this.BlockBodyType) + `,`,
		`LeaderSignature:` + fmt.Sprintf("%v", this.LeaderSignature) + `,`,
		`MiniBlockHeaders:` + repeatedStringForMiniBlockHeaders + `,`,
		`PeerChanges:` + repeatedStringForPeerChanges + `,`,
		`MetaBlockHashes:` + fmt.Sprintf("%v", this.MetaBlockHashes) + `,`,
		`TxCount:` + fmt.Sprintf("%v", this.TxCount) + `,`,
		`EpochStartMetaHash:` + fmt.Sprintf("%v", this.EpochStartMetaHash) + `,`,
		`ReceiptsHash:` + fmt.Sprintf("%v", this.ReceiptsHash) + `,`,
		`ChainID:` + fmt.Sprintf("%v", this.ChainID) + `,`,
		`SoftwareVersion:` + fmt.Sprintf("%v", this.SoftwareVersion) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`LastExecutionResult:` + strings.Replace(this.LastExecutionResult.String(), "ExecutionResultInfo", "ExecutionResultInfo", 1) + `,`,
		`ExecutionResults:` + repeatedStringForExecutionResults + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlockV3(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExecutionResultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedOnHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedOnHeaderHash = append(m.NotarizedOnHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NotarizedOnHeaderHash == nil {
				m.NotarizedOnHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionResult == nil {
				m.ExecutionResult = &BaseExecutionResult{}
			}
			if err := m.ExecutionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockV3
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRandSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevRandSeed = append(m.PrevRandSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevRandSeed == nil {
				m.PrevRandSeed = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandSeed = append(m.RandSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RandSeed == nil {
				m.RandSeed = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStampMs", wireType)
			}
			m.TimeStampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStampMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBodyType", wireType)
			}
			m.BlockBodyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockBodyType |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderSignature = append(m.LeaderSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderSignature == nil {
				m.LeaderSignature = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlockHeaders = append(m.MiniBlockHeaders, MiniBlockHeader{})
			if err := m.MiniBlockHeaders[len(m.MiniBlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerChanges = append(m.PeerChanges, PeerChange{})
			if err := m.PeerChanges[len(m.PeerChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaBlockHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaBlockHashes = append(m.MetaBlockHashes, make([]byte, postIndex-iNdEx))
			copy(m.MetaBlockHashes[len(m.MetaBlockHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartMetaHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochStartMetaHash = append(m.EpochStartMetaHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EpochStartMetaHash == nil {
				m.EpochStartMetaHash = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsHash = append(m.ReceiptsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptsHash == nil {
				m.ReceiptsHash = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersion = append(m.SoftwareVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.SoftwareVersion == nil {
				m.SoftwareVersion = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastExecutionResult == nil {
				m.LastExecutionResult = &ExecutionResultInfo{}
			}
			if err := m.LastExecutionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockV3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockV3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionResults = append(m.ExecutionResults, &ExecutionResult{})
			if err := m.ExecutionResults[len(m.ExecutionResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockV3
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockV3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockV3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockV3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockV3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockV3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockV3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockV3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockV3 = fmt.Errorf("proto: unexpected end of group")
)
