// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guardians.proto

package guardians

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Guardian struct {
	Address         []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	ActivationEpoch uint32 `protobuf:"varint,2,opt,name=ActivationEpoch,proto3" json:"ActivationEpoch,omitempty"`
}

func (m *Guardian) Reset()      { *m = Guardian{} }
func (*Guardian) ProtoMessage() {}
func (*Guardian) Descriptor() ([]byte, []int) {
	return fileDescriptor_038b1a485f6c9757, []int{0}
}
func (m *Guardian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guardian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Guardian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guardian.Merge(m, src)
}
func (m *Guardian) XXX_Size() int {
	return m.Size()
}
func (m *Guardian) XXX_DiscardUnknown() {
	xxx_messageInfo_Guardian.DiscardUnknown(m)
}

var xxx_messageInfo_Guardian proto.InternalMessageInfo

func (m *Guardian) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Guardian) GetActivationEpoch() uint32 {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

type Guardians struct {
	Data []*Guardian `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Guardians) Reset()      { *m = Guardians{} }
func (*Guardians) ProtoMessage() {}
func (*Guardians) Descriptor() ([]byte, []int) {
	return fileDescriptor_038b1a485f6c9757, []int{1}
}
func (m *Guardians) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guardians) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Guardians) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guardians.Merge(m, src)
}
func (m *Guardians) XXX_Size() int {
	return m.Size()
}
func (m *Guardians) XXX_DiscardUnknown() {
	xxx_messageInfo_Guardians.DiscardUnknown(m)
}

var xxx_messageInfo_Guardians proto.InternalMessageInfo

func (m *Guardians) GetData() []*Guardian {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Guardian)(nil), "protoBuiltInFunctions.Guardian")
	proto.RegisterType((*Guardians)(nil), "protoBuiltInFunctions.Guardians")
}

func init() { proto.RegisterFile("guardians.proto", fileDescriptor_038b1a485f6c9757) }

var fileDescriptor_038b1a485f6c9757 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2f, 0x4d, 0x2c,
	0x4a, 0xc9, 0x4c, 0xcc, 0x2b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x05, 0x53, 0x4e,
	0xa5, 0x99, 0x39, 0x25, 0x9e, 0x79, 0x6e, 0xa5, 0x79, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x52,
	0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9,
	0xfa, 0x60, 0x65, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0x4c, 0x51, 0xf2, 0xe3,
	0xe2, 0x70, 0x87, 0x1a, 0x2c, 0x24, 0xc1, 0xc5, 0xee, 0x98, 0x92, 0x52, 0x94, 0x5a, 0x5c, 0x2c,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0x0a, 0x69, 0x70, 0xf1, 0x3b, 0x26, 0x97, 0x64,
	0x96, 0x25, 0x82, 0xec, 0x70, 0x2d, 0xc8, 0x4f, 0xce, 0x90, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0d,
	0x42, 0x17, 0x56, 0x72, 0xe0, 0xe2, 0x84, 0x99, 0x57, 0x2c, 0x64, 0xcc, 0xc5, 0xe2, 0x92, 0x58,
	0x92, 0x28, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0x24, 0xaf, 0x87, 0xd5, 0xc5, 0x7a, 0x30, 0xf5,
	0x41, 0x60, 0xc5, 0x4e, 0xce, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1,
	0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc6, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8,
	0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63,
	0x88, 0xe2, 0x84, 0x07, 0x51, 0x12, 0x1b, 0xd8, 0x2a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x44, 0x46, 0xb6, 0x23, 0x36, 0x01, 0x00, 0x00,
}

func (this *Guardian) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Guardian)
	if !ok {
		that2, ok := that.(Guardian)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.ActivationEpoch != that1.ActivationEpoch {
		return false
	}
	return true
}
func (this *Guardians) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Guardians)
	if !ok {
		that2, ok := that.(Guardians)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *Guardian) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&guardians.Guardian{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "ActivationEpoch: "+fmt.Sprintf("%#v", this.ActivationEpoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Guardians) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&guardians.Guardians{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGuardians(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Guardian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guardian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guardian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivationEpoch != 0 {
		i = encodeVarintGuardians(dAtA, i, uint64(m.ActivationEpoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGuardians(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Guardians) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guardians) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guardians) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuardians(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuardians(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuardians(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Guardian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGuardians(uint64(l))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovGuardians(uint64(m.ActivationEpoch))
	}
	return n
}

func (m *Guardians) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGuardians(uint64(l))
		}
	}
	return n
}

func sovGuardians(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuardians(x uint64) (n int) {
	return sovGuardians(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Guardian) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Guardian{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`ActivationEpoch:` + fmt.Sprintf("%v", this.ActivationEpoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Guardians) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*Guardian{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "Guardian", "Guardian", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&Guardians{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGuardians(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Guardian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardians
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guardian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guardian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardians
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuardians
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuardians
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardians
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuardians(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardians
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardians
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Guardians) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardians
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guardians: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guardians: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardians
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardians
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuardians
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Guardian{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardians(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardians
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuardians
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuardians(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuardians
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardians
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardians
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuardians
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuardians
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuardians
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuardians        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuardians          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuardians = fmt.Errorf("proto: unexpected end of group")
)
