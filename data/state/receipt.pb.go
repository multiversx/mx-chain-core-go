// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: receipt.proto

package state

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	transaction "github.com/multiversx/mx-chain-core-go/data/transaction"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Receipt holds information about a receipt
type Receipt struct {
	TxHash       []byte               `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"txHash"`
	Address      []byte               `protobuf:"bytes,2,opt,name=Address,proto3" json:"address"`
	Events       []*transaction.Event `protobuf:"bytes,3,rep,name=Events,proto3" json:"events"`
	StateChanges []*StateChange       `protobuf:"bytes,4,rep,name=StateChanges,proto3" json:"stateChanges"`
}

func (m *Receipt) Reset()      { *m = Receipt{} }
func (*Receipt) ProtoMessage() {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace1d6eb38fad2c8, []int{0}
}
func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return m.Size()
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Receipt) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Receipt) GetEvents() []*transaction.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Receipt) GetStateChanges() []*StateChange {
	if m != nil {
		return m.StateChanges
	}
	return nil
}

func init() {
	proto.RegisterType((*Receipt)(nil), "proto.Receipt")
}

func init() { proto.RegisterFile("receipt.proto", fileDescriptor_ace1d6eb38fad2c8) }

var fileDescriptor_ace1d6eb38fad2c8 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x3d, 0x6e, 0xc2, 0x30,
	0x14, 0x8e, 0x4b, 0x1b, 0x24, 0x93, 0x4a, 0x55, 0xa6, 0x88, 0xe1, 0x81, 0x90, 0x2a, 0xb1, 0x04,
	0xf7, 0xe7, 0x04, 0x80, 0x2a, 0x31, 0xa7, 0x9d, 0xba, 0x99, 0xe0, 0x3a, 0x51, 0x21, 0x46, 0xb6,
	0x41, 0x8c, 0x3d, 0x42, 0x8f, 0xd1, 0xa3, 0x74, 0xcc, 0xc8, 0x84, 0x8a, 0x59, 0x2a, 0x26, 0x8e,
	0x50, 0xc9, 0x4e, 0x55, 0x3a, 0xb2, 0xd8, 0x7e, 0xdf, 0x9f, 0xfd, 0xfc, 0xf0, 0xa5, 0x64, 0x29,
	0xcb, 0xe7, 0xba, 0x37, 0x97, 0x42, 0x8b, 0xf0, 0xc2, 0x6e, 0xcd, 0x98, 0xe7, 0x3a, 0x5b, 0x8c,
	0x7b, 0xa9, 0x98, 0x11, 0x2e, 0xb8, 0x20, 0x16, 0x1e, 0x2f, 0x5e, 0x6c, 0x65, 0x0b, 0x7b, 0x72,
	0xae, 0xe6, 0xf0, 0x48, 0x3e, 0x5b, 0x4c, 0x75, 0xbe, 0x64, 0x52, 0xad, 0xc8, 0x6c, 0x15, 0xa7,
	0x19, 0xcd, 0x8b, 0x38, 0x15, 0x92, 0xc5, 0x5c, 0x90, 0x09, 0xd5, 0x94, 0x28, 0x4d, 0x35, 0x73,
	0xeb, 0x30, 0xa3, 0x05, 0x67, 0x55, 0x48, 0xff, 0x94, 0x10, 0x2d, 0x69, 0xa1, 0x68, 0xaa, 0x73,
	0x51, 0x90, 0xa9, 0xe0, 0x2e, 0xa2, 0x53, 0x22, 0x5c, 0x4f, 0x5c, 0x3f, 0x61, 0x07, 0xfb, 0x4f,
	0xab, 0x11, 0x55, 0x59, 0x84, 0xda, 0xa8, 0x1b, 0x0c, 0xf0, 0x7e, 0xd3, 0xf2, 0xb5, 0x45, 0x92,
	0x8a, 0x09, 0xaf, 0x71, 0xbd, 0x3f, 0x99, 0x48, 0xa6, 0x54, 0x74, 0x66, 0x45, 0x8d, 0xfd, 0xa6,
	0x55, 0xa7, 0x0e, 0x4a, 0x7e, 0xb9, 0xf0, 0x06, 0xfb, 0x0f, 0x4b, 0x56, 0x68, 0x15, 0xd5, 0xda,
	0xb5, 0x6e, 0xe3, 0x2e, 0x70, 0xd7, 0xf5, 0x2c, 0xe8, 0x82, 0x99, 0xe5, 0x93, 0x4a, 0x17, 0x8e,
	0x70, 0xf0, 0xf8, 0xd7, 0xa0, 0x8a, 0xce, 0xad, 0x2f, 0xac, 0x7c, 0x47, 0xd4, 0xe0, 0x6a, 0xbf,
	0x69, 0x05, 0x47, 0x9f, 0xa1, 0x92, 0x7f, 0xce, 0xc1, 0x6b, 0xb9, 0x05, 0x6f, 0xbd, 0x05, 0xef,
	0xb0, 0x05, 0xf4, 0x66, 0x00, 0x7d, 0x18, 0x40, 0x9f, 0x06, 0x50, 0x69, 0x00, 0xad, 0x0d, 0xa0,
	0x2f, 0x03, 0xe8, 0xdb, 0x80, 0x77, 0x30, 0x80, 0xde, 0x77, 0xe0, 0x95, 0x3b, 0xf0, 0xd6, 0x3b,
	0xf0, 0x9e, 0x6f, 0x4f, 0x1e, 0xca, 0xd8, 0xb7, 0xef, 0xbb, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xe0, 0x02, 0x6a, 0x6b, 0x15, 0x02, 0x00, 0x00,
}

func (this *Receipt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Receipt)
	if !ok {
		that2, ok := that.(Receipt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TxHash, that1.TxHash) {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	if len(this.StateChanges) != len(that1.StateChanges) {
		return false
	}
	for i := range this.StateChanges {
		if !this.StateChanges[i].Equal(that1.StateChanges[i]) {
			return false
		}
	}
	return true
}
func (this *Receipt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&state.Receipt{")
	s = append(s, "TxHash: "+fmt.Sprintf("%#v", this.TxHash)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	if this.StateChanges != nil {
		s = append(s, "StateChanges: "+fmt.Sprintf("%#v", this.StateChanges)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReceipt(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateChanges) > 0 {
		for iNdEx := len(m.StateChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StateChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReceipt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReceipt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReceipt(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintReceipt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReceipt(dAtA []byte, offset int, v uint64) int {
	offset -= sovReceipt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Receipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovReceipt(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReceipt(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovReceipt(uint64(l))
		}
	}
	if len(m.StateChanges) > 0 {
		for _, e := range m.StateChanges {
			l = e.Size()
			n += 1 + l + sovReceipt(uint64(l))
		}
	}
	return n
}

func sovReceipt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReceipt(x uint64) (n int) {
	return sovReceipt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Receipt) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*Event{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(fmt.Sprintf("%v", f), "Event", "transaction.Event", 1) + ","
	}
	repeatedStringForEvents += "}"
	repeatedStringForStateChanges := "[]*StateChange{"
	for _, f := range this.StateChanges {
		repeatedStringForStateChanges += strings.Replace(fmt.Sprintf("%v", f), "StateChange", "StateChange", 1) + ","
	}
	repeatedStringForStateChanges += "}"
	s := strings.Join([]string{`&Receipt{`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`StateChanges:` + repeatedStringForStateChanges + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReceipt(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &transaction.Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateChanges = append(m.StateChanges, &StateChange{})
			if err := m.StateChanges[len(m.StateChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReceipt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReceipt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReceipt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReceipt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReceipt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReceipt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReceipt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReceipt = fmt.Errorf("proto: unexpected end of group")
)
