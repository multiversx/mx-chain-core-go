// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: receipt.proto

package state

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	transaction "github.com/multiversx/mx-chain-core-go/data/transaction"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SerializedNodeMap represents a map with key node hash and data node bytes
type SerializedNodeMap struct {
	SerializedNodes map[string][]byte `protobuf:"bytes,1,rep,name=SerializedNodes,proto3" json:"serializedNodes" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SerializedNodeMap) Reset()      { *m = SerializedNodeMap{} }
func (*SerializedNodeMap) ProtoMessage() {}
func (*SerializedNodeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace1d6eb38fad2c8, []int{0}
}
func (m *SerializedNodeMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializedNodeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializedNodeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedNodeMap.Merge(m, src)
}
func (m *SerializedNodeMap) XXX_Size() int {
	return m.Size()
}
func (m *SerializedNodeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedNodeMap.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedNodeMap proto.InternalMessageInfo

func (m *SerializedNodeMap) GetSerializedNodes() map[string][]byte {
	if m != nil {
		return m.SerializedNodes
	}
	return nil
}

// Receipt holds information about a receipt
type Receipt struct {
	TxHash      []byte               `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"txHash"`
	Address     []byte               `protobuf:"bytes,2,opt,name=Address,proto3" json:"address"`
	GasUsedInfo *GasUsedInfo         `protobuf:"bytes,3,opt,name=GasUsedInfo,proto3" json:"gasUsedInfo"`
	Events      []*transaction.Event `protobuf:"bytes,4,rep,name=Events,proto3" json:"events"`
}

func (m *Receipt) Reset()      { *m = Receipt{} }
func (*Receipt) ProtoMessage() {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace1d6eb38fad2c8, []int{1}
}
func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return m.Size()
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Receipt) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Receipt) GetGasUsedInfo() *GasUsedInfo {
	if m != nil {
		return m.GasUsedInfo
	}
	return nil
}

func (m *Receipt) GetEvents() []*transaction.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// GasUsedInfo holds information about transaction gas used
type GasUsedInfo struct {
	DataGasCost     uint64 `protobuf:"varint,1,opt,name=DataGasCost,proto3" json:"dataGasCost"`
	MoveBalanceCost uint64 `protobuf:"varint,2,opt,name=MoveBalanceCost,proto3" json:"moveBalanceCost"`
	ExecutionCost   uint64 `protobuf:"varint,3,opt,name=ExecutionCost,proto3" json:"executionCost"`
}

func (m *GasUsedInfo) Reset()      { *m = GasUsedInfo{} }
func (*GasUsedInfo) ProtoMessage() {}
func (*GasUsedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace1d6eb38fad2c8, []int{2}
}
func (m *GasUsedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasUsedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GasUsedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasUsedInfo.Merge(m, src)
}
func (m *GasUsedInfo) XXX_Size() int {
	return m.Size()
}
func (m *GasUsedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GasUsedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GasUsedInfo proto.InternalMessageInfo

func (m *GasUsedInfo) GetDataGasCost() uint64 {
	if m != nil {
		return m.DataGasCost
	}
	return 0
}

func (m *GasUsedInfo) GetMoveBalanceCost() uint64 {
	if m != nil {
		return m.MoveBalanceCost
	}
	return 0
}

func (m *GasUsedInfo) GetExecutionCost() uint64 {
	if m != nil {
		return m.ExecutionCost
	}
	return 0
}

func init() {
	proto.RegisterType((*SerializedNodeMap)(nil), "proto.SerializedNodeMap")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.SerializedNodeMap.SerializedNodesEntry")
	proto.RegisterType((*Receipt)(nil), "proto.Receipt")
	proto.RegisterType((*GasUsedInfo)(nil), "proto.GasUsedInfo")
}

func init() { proto.RegisterFile("receipt.proto", fileDescriptor_ace1d6eb38fad2c8) }

var fileDescriptor_ace1d6eb38fad2c8 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6e, 0xd3, 0x40,
	0x18, 0xc7, 0x7d, 0x49, 0x9b, 0x88, 0x73, 0xa2, 0xd0, 0xa3, 0x43, 0x94, 0xe1, 0x1c, 0x45, 0x42,
	0xca, 0xe2, 0x98, 0x96, 0x01, 0x84, 0xc4, 0x50, 0x43, 0x54, 0x18, 0xca, 0x70, 0xc0, 0xc2, 0x76,
	0xb1, 0xaf, 0x8e, 0x55, 0xc7, 0x17, 0xf9, 0xce, 0x51, 0xca, 0xc4, 0x23, 0xf0, 0x18, 0x3c, 0x02,
	0x2f, 0x80, 0xc4, 0x82, 0x94, 0x31, 0x93, 0x45, 0x9c, 0x05, 0x79, 0xea, 0x23, 0xa0, 0xde, 0x05,
	0xd5, 0x0e, 0x2c, 0x4c, 0xbe, 0xef, 0xff, 0xff, 0xff, 0xbe, 0xb3, 0x3f, 0x7f, 0xb0, 0x9d, 0x30,
	0x8f, 0x85, 0x73, 0x39, 0x9a, 0x27, 0x5c, 0x72, 0x74, 0xa8, 0x1e, 0x3d, 0x3b, 0x08, 0xe5, 0x34,
	0x9d, 0x8c, 0x3c, 0x3e, 0x73, 0x02, 0x1e, 0x70, 0x47, 0xc9, 0x93, 0xf4, 0x52, 0x55, 0xaa, 0x50,
	0x27, 0x4d, 0xf5, 0xce, 0x4a, 0xf1, 0x59, 0x1a, 0xc9, 0x70, 0xc1, 0x12, 0xb1, 0x74, 0x66, 0x4b,
	0xdb, 0x9b, 0xd2, 0x30, 0xb6, 0x3d, 0x9e, 0x30, 0x3b, 0xe0, 0x8e, 0x4f, 0x25, 0x75, 0x64, 0x42,
	0x63, 0x41, 0x3d, 0x19, 0xf2, 0xd8, 0x89, 0x78, 0xa0, 0x5b, 0x0c, 0xbe, 0x01, 0x78, 0xf4, 0x96,
	0x25, 0x21, 0x8d, 0xc2, 0x8f, 0xcc, 0x7f, 0xc3, 0x7d, 0x76, 0x41, 0xe7, 0x28, 0x82, 0x9d, 0xaa,
	0x28, 0xba, 0xa0, 0x5f, 0x1f, 0x9a, 0xa7, 0xb6, 0xc6, 0x46, 0x7f, 0x21, 0x7b, 0x8a, 0x18, 0xc7,
	0x32, 0xb9, 0x76, 0x1f, 0x14, 0x99, 0xd5, 0x11, 0x55, 0x87, 0xec, 0xb7, 0xee, 0xb9, 0xf0, 0xf8,
	0x5f, 0x34, 0xba, 0x0f, 0xeb, 0x57, 0xec, 0xba, 0x0b, 0xfa, 0x60, 0x78, 0x8f, 0xdc, 0x1e, 0xd1,
	0x31, 0x3c, 0x5c, 0xd0, 0x28, 0x65, 0xdd, 0x5a, 0x1f, 0x0c, 0x5b, 0x44, 0x17, 0xcf, 0x6a, 0x4f,
	0xc1, 0xe0, 0x07, 0x80, 0x4d, 0xa2, 0x47, 0x8a, 0x06, 0xb0, 0xf1, 0x6e, 0xf9, 0x8a, 0x8a, 0xa9,
	0x42, 0x5b, 0x2e, 0x2c, 0x32, 0xab, 0x21, 0x95, 0x42, 0x76, 0x0e, 0x7a, 0x08, 0x9b, 0x67, 0xbe,
	0x9f, 0x30, 0x21, 0x74, 0x2f, 0xd7, 0x2c, 0x32, 0xab, 0x49, 0xb5, 0x44, 0xfe, 0x78, 0x68, 0x0c,
	0xcd, 0x73, 0x2a, 0xde, 0x0b, 0xe6, 0xbf, 0x8e, 0x2f, 0x79, 0xb7, 0xde, 0x07, 0x43, 0xf3, 0x14,
	0xed, 0x86, 0x50, 0x72, 0xdc, 0x4e, 0x91, 0x59, 0x66, 0x70, 0x27, 0x90, 0x32, 0x87, 0x1e, 0xc1,
	0xc6, 0x78, 0xc1, 0x62, 0x29, 0xba, 0x07, 0x6a, 0x8c, 0xad, 0x5d, 0x07, 0x25, 0xea, 0xf7, 0x63,
	0xca, 0x27, 0xbb, 0xdc, 0xe0, 0x2b, 0xa8, 0xdc, 0x8c, 0x4e, 0xa0, 0xf9, 0x92, 0x4a, 0x7a, 0x4e,
	0xc5, 0x0b, 0x2e, 0xa4, 0xfa, 0xb0, 0x03, 0x7d, 0xa9, 0x7f, 0x27, 0x93, 0x72, 0x06, 0x3d, 0x87,
	0x9d, 0x0b, 0xbe, 0x60, 0x2e, 0x8d, 0x68, 0xec, 0x31, 0x85, 0xd5, 0x14, 0xa6, 0xfe, 0xca, 0xac,
	0x6a, 0x91, 0xfd, 0x2c, 0x7a, 0x02, 0xdb, 0xe3, 0x25, 0xf3, 0xd2, 0xdb, 0x85, 0x51, 0x70, 0x5d,
	0xc1, 0x47, 0x45, 0x66, 0xb5, 0x59, 0xd9, 0x20, 0xd5, 0x9c, 0x7b, 0xb5, 0xda, 0x60, 0x63, 0xbd,
	0xc1, 0xc6, 0xcd, 0x06, 0x83, 0x4f, 0x39, 0x06, 0x5f, 0x72, 0x0c, 0xbe, 0xe7, 0x18, 0xac, 0x72,
	0x0c, 0xd6, 0x39, 0x06, 0x3f, 0x73, 0x0c, 0x7e, 0xe5, 0xd8, 0xb8, 0xc9, 0x31, 0xf8, 0xbc, 0xc5,
	0xc6, 0x6a, 0x8b, 0x8d, 0xf5, 0x16, 0x1b, 0x1f, 0x4e, 0xfe, 0x67, 0x9f, 0x85, 0xa4, 0x92, 0x4d,
	0x1a, 0x6a, 0x90, 0x8f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xb8, 0x1d, 0x43, 0x50, 0x03,
	0x00, 0x00,
}

func (this *SerializedNodeMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializedNodeMap)
	if !ok {
		that2, ok := that.(SerializedNodeMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SerializedNodes) != len(that1.SerializedNodes) {
		return false
	}
	for i := range this.SerializedNodes {
		if !bytes.Equal(this.SerializedNodes[i], that1.SerializedNodes[i]) {
			return false
		}
	}
	return true
}
func (this *Receipt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Receipt)
	if !ok {
		that2, ok := that.(Receipt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TxHash, that1.TxHash) {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !this.GasUsedInfo.Equal(that1.GasUsedInfo) {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *GasUsedInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GasUsedInfo)
	if !ok {
		that2, ok := that.(GasUsedInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataGasCost != that1.DataGasCost {
		return false
	}
	if this.MoveBalanceCost != that1.MoveBalanceCost {
		return false
	}
	if this.ExecutionCost != that1.ExecutionCost {
		return false
	}
	return true
}
func (this *SerializedNodeMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&state.SerializedNodeMap{")
	keysForSerializedNodes := make([]string, 0, len(this.SerializedNodes))
	for k, _ := range this.SerializedNodes {
		keysForSerializedNodes = append(keysForSerializedNodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSerializedNodes)
	mapStringForSerializedNodes := "map[string][]byte{"
	for _, k := range keysForSerializedNodes {
		mapStringForSerializedNodes += fmt.Sprintf("%#v: %#v,", k, this.SerializedNodes[k])
	}
	mapStringForSerializedNodes += "}"
	if this.SerializedNodes != nil {
		s = append(s, "SerializedNodes: "+mapStringForSerializedNodes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Receipt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&state.Receipt{")
	s = append(s, "TxHash: "+fmt.Sprintf("%#v", this.TxHash)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.GasUsedInfo != nil {
		s = append(s, "GasUsedInfo: "+fmt.Sprintf("%#v", this.GasUsedInfo)+",\n")
	}
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GasUsedInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&state.GasUsedInfo{")
	s = append(s, "DataGasCost: "+fmt.Sprintf("%#v", this.DataGasCost)+",\n")
	s = append(s, "MoveBalanceCost: "+fmt.Sprintf("%#v", this.MoveBalanceCost)+",\n")
	s = append(s, "ExecutionCost: "+fmt.Sprintf("%#v", this.ExecutionCost)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReceipt(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SerializedNodeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializedNodeMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializedNodeMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SerializedNodes) > 0 {
		keysForSerializedNodes := make([]string, 0, len(m.SerializedNodes))
		for k := range m.SerializedNodes {
			keysForSerializedNodes = append(keysForSerializedNodes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSerializedNodes)
		for iNdEx := len(keysForSerializedNodes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SerializedNodes[string(keysForSerializedNodes[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintReceipt(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSerializedNodes[iNdEx])
			copy(dAtA[i:], keysForSerializedNodes[iNdEx])
			i = encodeVarintReceipt(dAtA, i, uint64(len(keysForSerializedNodes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReceipt(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReceipt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GasUsedInfo != nil {
		{
			size, err := m.GasUsedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReceipt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReceipt(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintReceipt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasUsedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasUsedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasUsedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionCost != 0 {
		i = encodeVarintReceipt(dAtA, i, uint64(m.ExecutionCost))
		i--
		dAtA[i] = 0x18
	}
	if m.MoveBalanceCost != 0 {
		i = encodeVarintReceipt(dAtA, i, uint64(m.MoveBalanceCost))
		i--
		dAtA[i] = 0x10
	}
	if m.DataGasCost != 0 {
		i = encodeVarintReceipt(dAtA, i, uint64(m.DataGasCost))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReceipt(dAtA []byte, offset int, v uint64) int {
	offset -= sovReceipt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SerializedNodeMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SerializedNodes) > 0 {
		for k, v := range m.SerializedNodes {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovReceipt(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovReceipt(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReceipt(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Receipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovReceipt(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReceipt(uint64(l))
	}
	if m.GasUsedInfo != nil {
		l = m.GasUsedInfo.Size()
		n += 1 + l + sovReceipt(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovReceipt(uint64(l))
		}
	}
	return n
}

func (m *GasUsedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataGasCost != 0 {
		n += 1 + sovReceipt(uint64(m.DataGasCost))
	}
	if m.MoveBalanceCost != 0 {
		n += 1 + sovReceipt(uint64(m.MoveBalanceCost))
	}
	if m.ExecutionCost != 0 {
		n += 1 + sovReceipt(uint64(m.ExecutionCost))
	}
	return n
}

func sovReceipt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReceipt(x uint64) (n int) {
	return sovReceipt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SerializedNodeMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForSerializedNodes := make([]string, 0, len(this.SerializedNodes))
	for k, _ := range this.SerializedNodes {
		keysForSerializedNodes = append(keysForSerializedNodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSerializedNodes)
	mapStringForSerializedNodes := "map[string][]byte{"
	for _, k := range keysForSerializedNodes {
		mapStringForSerializedNodes += fmt.Sprintf("%v: %v,", k, this.SerializedNodes[k])
	}
	mapStringForSerializedNodes += "}"
	s := strings.Join([]string{`&SerializedNodeMap{`,
		`SerializedNodes:` + mapStringForSerializedNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *Receipt) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*Event{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(fmt.Sprintf("%v", f), "Event", "transaction.Event", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&Receipt{`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`GasUsedInfo:` + strings.Replace(this.GasUsedInfo.String(), "GasUsedInfo", "GasUsedInfo", 1) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *GasUsedInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GasUsedInfo{`,
		`DataGasCost:` + fmt.Sprintf("%v", this.DataGasCost) + `,`,
		`MoveBalanceCost:` + fmt.Sprintf("%v", this.MoveBalanceCost) + `,`,
		`ExecutionCost:` + fmt.Sprintf("%v", this.ExecutionCost) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReceipt(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SerializedNodeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedNodeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedNodeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SerializedNodes == nil {
				m.SerializedNodes = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReceipt
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReceipt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReceipt
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReceipt
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReceipt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthReceipt
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthReceipt
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReceipt(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReceipt
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SerializedNodes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasUsedInfo == nil {
				m.GasUsedInfo = &GasUsedInfo{}
			}
			if err := m.GasUsedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReceipt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &transaction.Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasUsedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasUsedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasUsedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGasCost", wireType)
			}
			m.DataGasCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataGasCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveBalanceCost", wireType)
			}
			m.MoveBalanceCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveBalanceCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionCost", wireType)
			}
			m.ExecutionCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReceipt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReceipt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReceipt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReceipt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReceipt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReceipt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReceipt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReceipt = fmt.Errorf("proto: unexpected end of group")
)
