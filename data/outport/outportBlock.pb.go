// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outportBlock.proto

package outport

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	alteredAccount "github.com/multiversx/mx-chain-core-go/data/alteredAccount"
	block "github.com/multiversx/mx-chain-core-go/data/block"
	receipt "github.com/multiversx/mx-chain-core-go/data/receipt"
	rewardTx "github.com/multiversx/mx-chain-core-go/data/rewardTx"
	smartContractResult "github.com/multiversx/mx-chain-core-go/data/smartContractResult"
	transaction "github.com/multiversx/mx-chain-core-go/data/transaction"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutportBlock struct {
	BlockData              *BlockData                                `protobuf:"bytes,1,opt,name=BlockData,proto3" json:"blockData,omitempty"`
	TransactionPool        *TransactionPool                          `protobuf:"bytes,2,opt,name=TransactionPool,proto3" json:"transactionPool,omitempty"`
	HeaderGasConsumption   *HeaderGasConsumption                     `protobuf:"bytes,3,opt,name=HeaderGasConsumption,proto3" json:"headerGasConsumption,omitempty"`
	AlteredAccounts        map[string]*alteredAccount.AlteredAccount `protobuf:"bytes,4,rep,name=AlteredAccounts,proto3" json:"alteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NotarizedHeadersHashes []string                                  `protobuf:"bytes,5,rep,name=NotarizedHeadersHashes,proto3" json:"notarizedHeadersHashes,omitempty"`
	NumberOfShards         uint32                                    `protobuf:"varint,6,opt,name=NumberOfShards,proto3" json:"numberOfShards"`
	IsImportDB             bool                                      `protobuf:"varint,7,opt,name=IsImportDB,proto3" json:"isImportDB"`
	SignersIndexes         []uint64                                  `protobuf:"varint,8,rep,packed,name=SignersIndexes,proto3" json:"signersIndexes,omitempty"`
	HighestFinalBlockNonce uint64                                    `protobuf:"varint,9,opt,name=HighestFinalBlockNonce,proto3" json:"highestFinalBlockNonce"`
	HighestFinalBlockHash  []byte                                    `protobuf:"bytes,10,opt,name=HighestFinalBlockHash,proto3" json:"highestFinalBlockHash,omitempty"`
}

func (m *OutportBlock) Reset()      { *m = OutportBlock{} }
func (*OutportBlock) ProtoMessage() {}
func (*OutportBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{0}
}
func (m *OutportBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutportBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OutportBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutportBlock.Merge(m, src)
}
func (m *OutportBlock) XXX_Size() int {
	return m.Size()
}
func (m *OutportBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_OutportBlock.DiscardUnknown(m)
}

var xxx_messageInfo_OutportBlock proto.InternalMessageInfo

func (m *OutportBlock) GetBlockData() *BlockData {
	if m != nil {
		return m.BlockData
	}
	return nil
}

func (m *OutportBlock) GetTransactionPool() *TransactionPool {
	if m != nil {
		return m.TransactionPool
	}
	return nil
}

func (m *OutportBlock) GetHeaderGasConsumption() *HeaderGasConsumption {
	if m != nil {
		return m.HeaderGasConsumption
	}
	return nil
}

func (m *OutportBlock) GetAlteredAccounts() map[string]*alteredAccount.AlteredAccount {
	if m != nil {
		return m.AlteredAccounts
	}
	return nil
}

func (m *OutportBlock) GetNotarizedHeadersHashes() []string {
	if m != nil {
		return m.NotarizedHeadersHashes
	}
	return nil
}

func (m *OutportBlock) GetNumberOfShards() uint32 {
	if m != nil {
		return m.NumberOfShards
	}
	return 0
}

func (m *OutportBlock) GetIsImportDB() bool {
	if m != nil {
		return m.IsImportDB
	}
	return false
}

func (m *OutportBlock) GetSignersIndexes() []uint64 {
	if m != nil {
		return m.SignersIndexes
	}
	return nil
}

func (m *OutportBlock) GetHighestFinalBlockNonce() uint64 {
	if m != nil {
		return m.HighestFinalBlockNonce
	}
	return 0
}

func (m *OutportBlock) GetHighestFinalBlockHash() []byte {
	if m != nil {
		return m.HighestFinalBlockHash
	}
	return nil
}

type BlockData struct {
	HeaderBytes []byte      `protobuf:"bytes,1,opt,name=HeaderBytes,proto3" json:"headerBytes,omitempty"`
	HeaderType  string      `protobuf:"bytes,2,opt,name=HeaderType,proto3" json:"headerType,omitempty"`
	HeaderHash  []byte      `protobuf:"bytes,3,opt,name=HeaderHash,proto3" json:"headerHash,omitempty"`
	Body        *block.Body `protobuf:"bytes,4,opt,name=Body,proto3" json:"body,omitempty"`
}

func (m *BlockData) Reset()      { *m = BlockData{} }
func (*BlockData) ProtoMessage() {}
func (*BlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{1}
}
func (m *BlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockData.Merge(m, src)
}
func (m *BlockData) XXX_Size() int {
	return m.Size()
}
func (m *BlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockData.DiscardUnknown(m)
}

var xxx_messageInfo_BlockData proto.InternalMessageInfo

func (m *BlockData) GetHeaderBytes() []byte {
	if m != nil {
		return m.HeaderBytes
	}
	return nil
}

func (m *BlockData) GetHeaderType() string {
	if m != nil {
		return m.HeaderType
	}
	return ""
}

func (m *BlockData) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *BlockData) GetBody() *block.Body {
	if m != nil {
		return m.Body
	}
	return nil
}

type TransactionPool struct {
	Transactions                               map[string]*TxInfo          `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SmartContractResults                       map[string]*SCRInfo         `protobuf:"bytes,2,rep,name=SmartContractResults,proto3" json:"smartContractResults,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rewards                                    map[string]*RewardInfo      `protobuf:"bytes,3,rep,name=Rewards,proto3" json:"rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Receipts                                   map[string]*receipt.Receipt `protobuf:"bytes,4,rep,name=Receipts,proto3" json:"receipts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InvalidTxs                                 map[string]*TxInfo          `protobuf:"bytes,5,rep,name=InvalidTxs,proto3" json:"invalidTxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs                                       []*LogData                  `protobuf:"bytes,6,rep,name=Logs,proto3" json:"logs,omitempty"`
	ScheduledExecutedSCRSHashesPrevBlock       []string                    `protobuf:"bytes,7,rep,name=ScheduledExecutedSCRSHashesPrevBlock,proto3" json:"scheduledExecutedSCRSHashesPrevBlock,omitempty"`
	ScheduledExecutedInvalidTxsHashesPrevBlock []string                    `protobuf:"bytes,8,rep,name=ScheduledExecutedInvalidTxsHashesPrevBlock,proto3" json:"scheduledExecutedInvalidTxsHashesPrevBlock,omitempty"`
}

func (m *TransactionPool) Reset()      { *m = TransactionPool{} }
func (*TransactionPool) ProtoMessage() {}
func (*TransactionPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{2}
}
func (m *TransactionPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TransactionPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPool.Merge(m, src)
}
func (m *TransactionPool) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPool) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPool.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPool proto.InternalMessageInfo

func (m *TransactionPool) GetTransactions() map[string]*TxInfo {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *TransactionPool) GetSmartContractResults() map[string]*SCRInfo {
	if m != nil {
		return m.SmartContractResults
	}
	return nil
}

func (m *TransactionPool) GetRewards() map[string]*RewardInfo {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *TransactionPool) GetReceipts() map[string]*receipt.Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *TransactionPool) GetInvalidTxs() map[string]*TxInfo {
	if m != nil {
		return m.InvalidTxs
	}
	return nil
}

func (m *TransactionPool) GetLogs() []*LogData {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *TransactionPool) GetScheduledExecutedSCRSHashesPrevBlock() []string {
	if m != nil {
		return m.ScheduledExecutedSCRSHashesPrevBlock
	}
	return nil
}

func (m *TransactionPool) GetScheduledExecutedInvalidTxsHashesPrevBlock() []string {
	if m != nil {
		return m.ScheduledExecutedInvalidTxsHashesPrevBlock
	}
	return nil
}

type FeeInfo struct {
	GasUsed        uint64        `protobuf:"varint,1,opt,name=GasUsed,proto3" json:"gasUsed"`
	Fee            *math_big.Int `protobuf:"bytes,2,opt,name=Fee,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"fee,omitempty"`
	InitialPaidFee *math_big.Int `protobuf:"bytes,3,opt,name=InitialPaidFee,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"initialPaidFee,omitempty"`
}

func (m *FeeInfo) Reset()      { *m = FeeInfo{} }
func (*FeeInfo) ProtoMessage() {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{3}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

func (m *FeeInfo) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *FeeInfo) GetFee() *math_big.Int {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *FeeInfo) GetInitialPaidFee() *math_big.Int {
	if m != nil {
		return m.InitialPaidFee
	}
	return nil
}

type TxInfo struct {
	Transaction    *transaction.Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"transaction,omitempty"`
	FeeInfo        *FeeInfo                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"feeInfo,omitempty"`
	ExecutionOrder uint32                   `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"executionOrder"`
}

func (m *TxInfo) Reset()      { *m = TxInfo{} }
func (*TxInfo) ProtoMessage() {}
func (*TxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{4}
}
func (m *TxInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInfo.Merge(m, src)
}
func (m *TxInfo) XXX_Size() int {
	return m.Size()
}
func (m *TxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TxInfo proto.InternalMessageInfo

func (m *TxInfo) GetTransaction() *transaction.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TxInfo) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

func (m *TxInfo) GetExecutionOrder() uint32 {
	if m != nil {
		return m.ExecutionOrder
	}
	return 0
}

type SCRInfo struct {
	SmartContractResult *smartContractResult.SmartContractResult `protobuf:"bytes,1,opt,name=SmartContractResult,proto3" json:"smartContractResult,omitempty"`
	FeeInfo             *FeeInfo                                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"feeInfo,omitempty"`
	ExecutionOrder      uint32                                   `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"executionOrder"`
}

func (m *SCRInfo) Reset()      { *m = SCRInfo{} }
func (*SCRInfo) ProtoMessage() {}
func (*SCRInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{5}
}
func (m *SCRInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCRInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SCRInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCRInfo.Merge(m, src)
}
func (m *SCRInfo) XXX_Size() int {
	return m.Size()
}
func (m *SCRInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SCRInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SCRInfo proto.InternalMessageInfo

func (m *SCRInfo) GetSmartContractResult() *smartContractResult.SmartContractResult {
	if m != nil {
		return m.SmartContractResult
	}
	return nil
}

func (m *SCRInfo) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

func (m *SCRInfo) GetExecutionOrder() uint32 {
	if m != nil {
		return m.ExecutionOrder
	}
	return 0
}

type LogData struct {
	TxHash string           `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"txHash"`
	Log    *transaction.Log `protobuf:"bytes,2,opt,name=Log,proto3" json:"log"`
}

func (m *LogData) Reset()      { *m = LogData{} }
func (*LogData) ProtoMessage() {}
func (*LogData) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{6}
}
func (m *LogData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogData.Merge(m, src)
}
func (m *LogData) XXX_Size() int {
	return m.Size()
}
func (m *LogData) XXX_DiscardUnknown() {
	xxx_messageInfo_LogData.DiscardUnknown(m)
}

var xxx_messageInfo_LogData proto.InternalMessageInfo

func (m *LogData) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *LogData) GetLog() *transaction.Log {
	if m != nil {
		return m.Log
	}
	return nil
}

type RewardInfo struct {
	Reward         *rewardTx.RewardTx `protobuf:"bytes,1,opt,name=Reward,proto3" json:"reward,omitempty"`
	ExecutionOrder uint32             `protobuf:"varint,2,opt,name=ExecutionOrder,proto3" json:"executionOrder"`
}

func (m *RewardInfo) Reset()      { *m = RewardInfo{} }
func (*RewardInfo) ProtoMessage() {}
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{7}
}
func (m *RewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardInfo.Merge(m, src)
}
func (m *RewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardInfo proto.InternalMessageInfo

func (m *RewardInfo) GetReward() *rewardTx.RewardTx {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RewardInfo) GetExecutionOrder() uint32 {
	if m != nil {
		return m.ExecutionOrder
	}
	return 0
}

type HeaderGasConsumption struct {
	GasProvided    uint64 `protobuf:"varint,1,opt,name=GasProvided,proto3" json:"gasProvided"`
	GasRefunded    uint64 `protobuf:"varint,2,opt,name=GasRefunded,proto3" json:"gasRefunded"`
	GasPenalized   uint64 `protobuf:"varint,3,opt,name=GasPenalized,proto3" json:"gasPenalized"`
	MaxGasPerBlock uint64 `protobuf:"varint,4,opt,name=MaxGasPerBlock,proto3" json:"maxGasPerBlock"`
}

func (m *HeaderGasConsumption) Reset()      { *m = HeaderGasConsumption{} }
func (*HeaderGasConsumption) ProtoMessage() {}
func (*HeaderGasConsumption) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{8}
}
func (m *HeaderGasConsumption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderGasConsumption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HeaderGasConsumption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderGasConsumption.Merge(m, src)
}
func (m *HeaderGasConsumption) XXX_Size() int {
	return m.Size()
}
func (m *HeaderGasConsumption) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderGasConsumption.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderGasConsumption proto.InternalMessageInfo

func (m *HeaderGasConsumption) GetGasProvided() uint64 {
	if m != nil {
		return m.GasProvided
	}
	return 0
}

func (m *HeaderGasConsumption) GetGasRefunded() uint64 {
	if m != nil {
		return m.GasRefunded
	}
	return 0
}

func (m *HeaderGasConsumption) GetGasPenalized() uint64 {
	if m != nil {
		return m.GasPenalized
	}
	return 0
}

func (m *HeaderGasConsumption) GetMaxGasPerBlock() uint64 {
	if m != nil {
		return m.MaxGasPerBlock
	}
	return 0
}

type ValidatorRatingInfo struct {
	PublicKey string  `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"publicKey"`
	Rating    float32 `protobuf:"fixed32,2,opt,name=Rating,proto3" json:"rating"`
}

func (m *ValidatorRatingInfo) Reset()      { *m = ValidatorRatingInfo{} }
func (*ValidatorRatingInfo) ProtoMessage() {}
func (*ValidatorRatingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{9}
}
func (m *ValidatorRatingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorRatingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorRatingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorRatingInfo.Merge(m, src)
}
func (m *ValidatorRatingInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorRatingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorRatingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorRatingInfo proto.InternalMessageInfo

func (m *ValidatorRatingInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ValidatorRatingInfo) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type ValidatorsRating struct {
	ShardID              uint32                 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"shardID"`
	Epoch                uint32                 `protobuf:"varint,2,opt,name=Epoch,proto3" json:"epoch"`
	ValidatorsRatingInfo []*ValidatorRatingInfo `protobuf:"bytes,3,rep,name=ValidatorsRatingInfo,proto3" json:"validatorsRatingInfo,omitempty"`
}

func (m *ValidatorsRating) Reset()      { *m = ValidatorsRating{} }
func (*ValidatorsRating) ProtoMessage() {}
func (*ValidatorsRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{10}
}
func (m *ValidatorsRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorsRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorsRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsRating.Merge(m, src)
}
func (m *ValidatorsRating) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorsRating) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsRating.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsRating proto.InternalMessageInfo

func (m *ValidatorsRating) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ValidatorsRating) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ValidatorsRating) GetValidatorsRatingInfo() []*ValidatorRatingInfo {
	if m != nil {
		return m.ValidatorsRatingInfo
	}
	return nil
}

type RoundInfo struct {
	Round            uint64   `protobuf:"varint,1,opt,name=Round,proto3" json:"round"`
	SignersIndexes   []uint64 `protobuf:"varint,2,rep,packed,name=SignersIndexes,proto3" json:"signersIndexes"`
	BlockWasProposed bool     `protobuf:"varint,3,opt,name=BlockWasProposed,proto3" json:"blockWasProposed"`
	ShardId          uint32   `protobuf:"varint,4,opt,name=ShardId,proto3" json:"shardId"`
	Epoch            uint32   `protobuf:"varint,5,opt,name=Epoch,proto3" json:"epoch"`
	Timestamp        uint64   `protobuf:"varint,6,opt,name=Timestamp,proto3" json:"timestamp"`
}

func (m *RoundInfo) Reset()      { *m = RoundInfo{} }
func (*RoundInfo) ProtoMessage() {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{11}
}
func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *RoundInfo) GetSignersIndexes() []uint64 {
	if m != nil {
		return m.SignersIndexes
	}
	return nil
}

func (m *RoundInfo) GetBlockWasProposed() bool {
	if m != nil {
		return m.BlockWasProposed
	}
	return false
}

func (m *RoundInfo) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *RoundInfo) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *RoundInfo) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RoundsInfo struct {
	RoundsInfo []*RoundInfo `protobuf:"bytes,1,rep,name=RoundsInfo,proto3" json:"roundsInfo,omitempty"`
}

func (m *RoundsInfo) Reset()      { *m = RoundsInfo{} }
func (*RoundsInfo) ProtoMessage() {}
func (*RoundsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{12}
}
func (m *RoundsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RoundsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundsInfo.Merge(m, src)
}
func (m *RoundsInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoundsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundsInfo proto.InternalMessageInfo

func (m *RoundsInfo) GetRoundsInfo() []*RoundInfo {
	if m != nil {
		return m.RoundsInfo
	}
	return nil
}

type PubKeys struct {
	Keys [][]byte `protobuf:"bytes,1,rep,name=Keys,proto3" json:"keys,omitempty"`
}

func (m *PubKeys) Reset()      { *m = PubKeys{} }
func (*PubKeys) ProtoMessage() {}
func (*PubKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{13}
}
func (m *PubKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PubKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeys.Merge(m, src)
}
func (m *PubKeys) XXX_Size() int {
	return m.Size()
}
func (m *PubKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeys.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeys proto.InternalMessageInfo

func (m *PubKeys) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ValidatorsPubKeys struct {
	ShardValidatorsPubKeys map[uint32]*PubKeys `protobuf:"bytes,1,rep,name=ShardValidatorsPubKeys,proto3" json:"validatorsPubKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Epoch                  uint32              `protobuf:"varint,2,opt,name=Epoch,proto3" json:"epoch"`
}

func (m *ValidatorsPubKeys) Reset()      { *m = ValidatorsPubKeys{} }
func (*ValidatorsPubKeys) ProtoMessage() {}
func (*ValidatorsPubKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{14}
}
func (m *ValidatorsPubKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorsPubKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorsPubKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsPubKeys.Merge(m, src)
}
func (m *ValidatorsPubKeys) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorsPubKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsPubKeys.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsPubKeys proto.InternalMessageInfo

func (m *ValidatorsPubKeys) GetShardValidatorsPubKeys() map[uint32]*PubKeys {
	if m != nil {
		return m.ShardValidatorsPubKeys
	}
	return nil
}

func (m *ValidatorsPubKeys) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type Accounts struct {
	ShardID         uint32                                    `protobuf:"varint,1,opt,name=ShardID,proto3" json:"shardID"`
	BlockTimestamp  uint64                                    `protobuf:"varint,2,opt,name=BlockTimestamp,proto3" json:"blockTimestamp"`
	AlteredAccounts map[string]*alteredAccount.AlteredAccount `protobuf:"bytes,3,rep,name=AlteredAccounts,proto3" json:"alteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Accounts) Reset()      { *m = Accounts{} }
func (*Accounts) ProtoMessage() {}
func (*Accounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{15}
}
func (m *Accounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Accounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Accounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Accounts.Merge(m, src)
}
func (m *Accounts) XXX_Size() int {
	return m.Size()
}
func (m *Accounts) XXX_DiscardUnknown() {
	xxx_messageInfo_Accounts.DiscardUnknown(m)
}

var xxx_messageInfo_Accounts proto.InternalMessageInfo

func (m *Accounts) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Accounts) GetBlockTimestamp() uint64 {
	if m != nil {
		return m.BlockTimestamp
	}
	return 0
}

func (m *Accounts) GetAlteredAccounts() map[string]*alteredAccount.AlteredAccount {
	if m != nil {
		return m.AlteredAccounts
	}
	return nil
}

type FinalizedBlock struct {
	HeaderHash []byte `protobuf:"bytes,1,opt,name=HeaderHash,proto3" json:"headerHash"`
}

func (m *FinalizedBlock) Reset()      { *m = FinalizedBlock{} }
func (*FinalizedBlock) ProtoMessage() {}
func (*FinalizedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{16}
}
func (m *FinalizedBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FinalizedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedBlock.Merge(m, src)
}
func (m *FinalizedBlock) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedBlock proto.InternalMessageInfo

func (m *FinalizedBlock) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func init() {
	proto.RegisterType((*OutportBlock)(nil), "proto.OutportBlock")
	proto.RegisterMapType((map[string]*alteredAccount.AlteredAccount)(nil), "proto.OutportBlock.AlteredAccountsEntry")
	proto.RegisterType((*BlockData)(nil), "proto.BlockData")
	proto.RegisterType((*TransactionPool)(nil), "proto.TransactionPool")
	proto.RegisterMapType((map[string]*TxInfo)(nil), "proto.TransactionPool.InvalidTxsEntry")
	proto.RegisterMapType((map[string]*receipt.Receipt)(nil), "proto.TransactionPool.ReceiptsEntry")
	proto.RegisterMapType((map[string]*RewardInfo)(nil), "proto.TransactionPool.RewardsEntry")
	proto.RegisterMapType((map[string]*SCRInfo)(nil), "proto.TransactionPool.SmartContractResultsEntry")
	proto.RegisterMapType((map[string]*TxInfo)(nil), "proto.TransactionPool.TransactionsEntry")
	proto.RegisterType((*FeeInfo)(nil), "proto.FeeInfo")
	proto.RegisterType((*TxInfo)(nil), "proto.TxInfo")
	proto.RegisterType((*SCRInfo)(nil), "proto.SCRInfo")
	proto.RegisterType((*LogData)(nil), "proto.LogData")
	proto.RegisterType((*RewardInfo)(nil), "proto.RewardInfo")
	proto.RegisterType((*HeaderGasConsumption)(nil), "proto.HeaderGasConsumption")
	proto.RegisterType((*ValidatorRatingInfo)(nil), "proto.ValidatorRatingInfo")
	proto.RegisterType((*ValidatorsRating)(nil), "proto.ValidatorsRating")
	proto.RegisterType((*RoundInfo)(nil), "proto.RoundInfo")
	proto.RegisterType((*RoundsInfo)(nil), "proto.RoundsInfo")
	proto.RegisterType((*PubKeys)(nil), "proto.PubKeys")
	proto.RegisterType((*ValidatorsPubKeys)(nil), "proto.ValidatorsPubKeys")
	proto.RegisterMapType((map[uint32]*PubKeys)(nil), "proto.ValidatorsPubKeys.ShardValidatorsPubKeysEntry")
	proto.RegisterType((*Accounts)(nil), "proto.Accounts")
	proto.RegisterMapType((map[string]*alteredAccount.AlteredAccount)(nil), "proto.Accounts.AlteredAccountsEntry")
	proto.RegisterType((*FinalizedBlock)(nil), "proto.FinalizedBlock")
}

func init() { proto.RegisterFile("outportBlock.proto", fileDescriptor_661b95cef868af95) }

var fileDescriptor_661b95cef868af95 = []byte{
	// 1889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0x48, 0xb2, 0x65, 0x3d, 0xc9, 0xb2, 0xd3, 0x71, 0x8c, 0xe2, 0xb0, 0x1a, 0xa1, 0x64,
	0x17, 0x15, 0x21, 0x32, 0x9b, 0x4d, 0x51, 0xa9, 0xa4, 0xb6, 0xd8, 0x8c, 0xf3, 0x25, 0x92, 0x8d,
	0x5d, 0x63, 0xc3, 0xae, 0xb7, 0xa8, 0x82, 0x91, 0xa6, 0x3d, 0x9a, 0x8a, 0x34, 0x2d, 0x66, 0x5a,
	0x46, 0xe2, 0xc4, 0x89, 0xe5, 0xb2, 0x55, 0x1c, 0xb9, 0x71, 0xa5, 0x38, 0x70, 0xa5, 0x8a, 0xbf,
	0x80, 0x13, 0x95, 0x13, 0x95, 0xd3, 0x40, 0x9c, 0x0b, 0x35, 0x07, 0x6a, 0x39, 0x71, 0xa5, 0xa6,
	0xbb, 0x47, 0xd3, 0x33, 0x1a, 0x2d, 0xf6, 0x42, 0x6a, 0x2f, 0xd2, 0xf4, 0xfb, 0xf8, 0xbd, 0x7e,
	0xaf, 0xdf, 0x7b, 0xfd, 0x01, 0x88, 0x8c, 0xe9, 0x88, 0xb8, 0x54, 0x1b, 0x90, 0xde, 0xf3, 0xf6,
	0xc8, 0x25, 0x94, 0xa0, 0x65, 0xf6, 0xb7, 0x7d, 0xc3, 0xb2, 0x69, 0x7f, 0xdc, 0x6d, 0xf7, 0xc8,
	0x70, 0xc7, 0x22, 0x16, 0xd9, 0x61, 0xe4, 0xee, 0xf8, 0x98, 0x8d, 0xd8, 0x80, 0x7d, 0x71, 0xad,
	0xed, 0xf7, 0x25, 0xf1, 0xe1, 0x78, 0x40, 0xed, 0x13, 0xec, 0x7a, 0x93, 0x9d, 0xe1, 0xe4, 0x46,
	0xaf, 0x6f, 0xd8, 0xce, 0x8d, 0x1e, 0x71, 0xf1, 0x0d, 0x8b, 0xec, 0x98, 0x06, 0x35, 0x76, 0xba,
	0xa1, 0x39, 0xfe, 0x2b, 0xd4, 0xef, 0x9d, 0x47, 0x9d, 0xba, 0x86, 0xe3, 0x19, 0x3d, 0x6a, 0x13,
	0x67, 0x67, 0x40, 0x2c, 0x01, 0xd1, 0xf9, 0xb2, 0x10, 0xd2, 0xb7, 0x80, 0x3a, 0x3a, 0x0f, 0x94,
	0x37, 0x34, 0x5c, 0xba, 0x4b, 0x1c, 0xea, 0x1a, 0x3d, 0xaa, 0x63, 0x6f, 0x3c, 0xa0, 0x59, 0xb4,
	0x2f, 0xe3, 0xa8, 0x8b, 0x7b, 0xd8, 0x1e, 0xd1, 0xe8, 0x5f, 0x40, 0xec, 0x9e, 0x0f, 0xe2, 0x67,
	0x86, 0x6b, 0x1e, 0x4e, 0x66, 0x1f, 0x02, 0x64, 0xef, 0x3c, 0x20, 0xc6, 0x80, 0x62, 0x17, 0x9b,
	0xf7, 0x7a, 0x3d, 0x32, 0x76, 0x68, 0x6a, 0xc8, 0x01, 0x9b, 0x7f, 0x2a, 0x42, 0x65, 0x4f, 0xca,
	0x26, 0xf4, 0x08, 0x4a, 0xec, 0xe3, 0xbe, 0x41, 0x8d, 0x9a, 0xd2, 0x50, 0x5a, 0xe5, 0x9b, 0x1b,
	0x5c, 0xb6, 0x3d, 0xa3, 0x6b, 0x5f, 0x0b, 0x7c, 0xf5, 0x62, 0x37, 0x1a, 0x7e, 0x9b, 0x0c, 0x6d,
	0x8a, 0x87, 0x23, 0x3a, 0xd5, 0x63, 0x5d, 0xf4, 0x63, 0x58, 0x3f, 0x8c, 0x97, 0x68, 0x9f, 0x90,
	0x41, 0x2d, 0xc7, 0xe0, 0xb6, 0x04, 0x5c, 0x8a, 0xab, 0xbd, 0x15, 0xf8, 0xea, 0x65, 0x9a, 0x24,
	0x4a, 0xd0, 0x69, 0x34, 0xe4, 0xc1, 0xe6, 0x63, 0x6c, 0x98, 0xd8, 0x7d, 0x64, 0x78, 0xbb, 0xc4,
	0xf1, 0xc6, 0xc3, 0x51, 0xc8, 0xab, 0xe5, 0x99, 0x95, 0x2b, 0xc2, 0x4a, 0x96, 0x88, 0xd6, 0x0c,
	0x7c, 0xb5, 0xde, 0xcf, 0xe0, 0x48, 0xf6, 0x32, 0xc1, 0xd1, 0x4f, 0x61, 0xfd, 0x5e, 0x22, 0x8e,
	0x5e, 0xad, 0xd0, 0xc8, 0xb7, 0xca, 0x37, 0x5b, 0xc2, 0x9e, 0x1c, 0xcc, 0x76, 0x4a, 0xf4, 0x81,
	0x43, 0xdd, 0x29, 0xf7, 0x33, 0xb9, 0x18, 0x9e, 0xec, 0x67, 0x4a, 0x09, 0xfd, 0x08, 0xb6, 0x9e,
	0x11, 0x6a, 0xb8, 0xf6, 0xcf, 0xb1, 0xc9, 0xe7, 0xe4, 0x3d, 0x36, 0xbc, 0x3e, 0xf6, 0x6a, 0xcb,
	0x8d, 0x7c, 0xab, 0xa4, 0x5d, 0x0b, 0x7c, 0xb5, 0xe1, 0x64, 0x4a, 0x48, 0xb0, 0x0b, 0x30, 0xd0,
	0x1d, 0xa8, 0x3e, 0x1b, 0x0f, 0xbb, 0xd8, 0xdd, 0x3b, 0x3e, 0xe8, 0x1b, 0xae, 0xe9, 0xd5, 0x56,
	0x1a, 0x4a, 0x6b, 0x4d, 0x43, 0x81, 0xaf, 0x56, 0x9d, 0x04, 0x47, 0x4f, 0x49, 0xa2, 0x36, 0x40,
	0xc7, 0xeb, 0x0c, 0x43, 0x7f, 0xef, 0x6b, 0xb5, 0x62, 0x43, 0x69, 0xad, 0x6a, 0xd5, 0xc0, 0x57,
	0xc1, 0x9e, 0x51, 0x75, 0x49, 0x02, 0xdd, 0x87, 0xea, 0x81, 0x6d, 0x39, 0xd8, 0xf5, 0x3a, 0x8e,
	0x89, 0x27, 0xd8, 0xab, 0xad, 0x36, 0xf2, 0xad, 0x82, 0xf6, 0xf5, 0xc0, 0x57, 0x6b, 0x5e, 0x82,
	0x23, 0xcd, 0x3c, 0xa5, 0x83, 0x74, 0xd8, 0x7a, 0x6c, 0x5b, 0x7d, 0xec, 0xd1, 0x87, 0xb6, 0x63,
	0x0c, 0x58, 0xa4, 0x9f, 0x11, 0xa7, 0x87, 0x6b, 0xa5, 0x86, 0xd2, 0x2a, 0x68, 0xdb, 0x81, 0xaf,
	0x6e, 0xf5, 0x33, 0x25, 0xf4, 0x05, 0x9a, 0xe8, 0x08, 0x2e, 0xcd, 0x71, 0xc2, 0x00, 0xd5, 0xa0,
	0xa1, 0xb4, 0x2a, 0xda, 0xd5, 0xc0, 0x57, 0xd5, 0x7e, 0x96, 0x80, 0x34, 0xcf, 0x6c, 0x84, 0xed,
	0x23, 0xd8, 0xcc, 0x4a, 0x03, 0xb4, 0x01, 0xf9, 0xe7, 0x78, 0xca, 0x4a, 0xac, 0xa4, 0x87, 0x9f,
	0xe8, 0x3a, 0x2c, 0x9f, 0x18, 0x83, 0x31, 0x16, 0x75, 0x72, 0x49, 0x64, 0x54, 0x52, 0x5b, 0xe7,
	0x32, 0x77, 0x72, 0xb7, 0x95, 0xe6, 0xbf, 0x14, 0xa9, 0x58, 0xd1, 0x5d, 0x28, 0xf3, 0xa5, 0xd5,
	0xa6, 0x14, 0x7b, 0x0c, 0xb8, 0xa2, 0x5d, 0x0e, 0x7c, 0xf5, 0x52, 0x3f, 0x26, 0x4b, 0xf3, 0x95,
	0xa5, 0xd1, 0x6d, 0x00, 0x3e, 0x3c, 0x9c, 0x8e, 0xf8, 0x04, 0x4a, 0x5a, 0x2d, 0xf0, 0xd5, 0xcd,
	0xfe, 0x8c, 0x2a, 0xa9, 0x4a, 0xb2, 0xb1, 0x26, 0x8b, 0x57, 0x9e, 0x59, 0x95, 0x34, 0x53, 0x41,
	0x92, 0x64, 0xd1, 0x7b, 0x50, 0xd0, 0x88, 0x39, 0xad, 0x15, 0x98, 0xbb, 0xe5, 0xa8, 0xcb, 0x10,
	0x73, 0xca, 0xb3, 0xaf, 0x4b, 0xcc, 0xa9, 0xa4, 0xca, 0x84, 0x9b, 0x9f, 0xc2, 0x5c, 0x5f, 0x41,
	0x7d, 0xa8, 0x48, 0xa4, 0xd0, 0x75, 0xb9, 0x22, 0x53, 0xd2, 0xf2, 0x58, 0x54, 0x24, 0xcb, 0x18,
	0xa9, 0xf3, 0xc8, 0x51, 0x4a, 0x20, 0xa3, 0x5f, 0x29, 0xb0, 0x79, 0x30, 0xbf, 0x4b, 0x78, 0xb5,
	0x1c, 0x33, 0xf9, 0x9d, 0x05, 0x26, 0xb3, 0x54, 0xb8, 0x69, 0xd6, 0x89, 0x32, 0xf6, 0x1d, 0x79,
	0x0a, 0x99, 0x16, 0xd1, 0x21, 0x14, 0x75, 0xb6, 0x39, 0x78, 0xb5, 0x3c, 0x33, 0x7e, 0x75, 0x81,
	0x71, 0x21, 0xc5, 0xed, 0x5d, 0x0a, 0x7c, 0xf5, 0x02, 0xdf, 0x54, 0x64, 0x13, 0x11, 0x14, 0xfa,
	0x18, 0x56, 0x75, 0xbe, 0x6d, 0x45, 0x8d, 0xed, 0xda, 0x42, 0x58, 0x2e, 0xc6, 0x71, 0xb7, 0x02,
	0x5f, 0x45, 0x62, 0xc3, 0x93, 0x81, 0x67, 0x68, 0xe8, 0x27, 0x00, 0x1d, 0xe7, 0xc4, 0x18, 0xd8,
	0xe6, 0xe1, 0x84, 0xb7, 0xae, 0xf2, 0xcd, 0x77, 0x16, 0x60, 0xc7, 0x82, 0x1c, 0x9d, 0xe5, 0x93,
	0x3d, 0x23, 0xca, 0xf9, 0x14, 0x8b, 0xa2, 0xef, 0x42, 0xe1, 0x29, 0xb1, 0xc2, 0x06, 0x16, 0x62,
	0x57, 0x05, 0xf6, 0x53, 0x62, 0xb1, 0x3d, 0x8b, 0xa5, 0xd4, 0x80, 0x58, 0xb2, 0x36, 0x93, 0x47,
	0xbf, 0x54, 0xe0, 0xda, 0x41, 0xaf, 0x8f, 0xcd, 0xf1, 0x00, 0x9b, 0x0f, 0x26, 0xb8, 0x37, 0xa6,
	0xd8, 0x3c, 0xd8, 0xd5, 0x0f, 0x78, 0x8b, 0xdc, 0x77, 0xf1, 0x09, 0xab, 0xb2, 0x5a, 0x91, 0xf5,
	0xdb, 0x9b, 0x81, 0xaf, 0xb6, 0xbd, 0x33, 0xc8, 0x4b, 0x86, 0xce, 0x84, 0x8f, 0x7e, 0xa3, 0xc0,
	0xb7, 0xe6, 0x04, 0x63, 0x07, 0xd3, 0xd3, 0x59, 0x65, 0xd3, 0xb9, 0x1d, 0xf8, 0xea, 0x2d, 0xef,
	0xcc, 0x5a, 0xd2, 0xa4, 0xce, 0x61, 0x6b, 0xfb, 0x19, 0x5c, 0x98, 0xab, 0x9b, 0x8c, 0x16, 0x76,
	0x35, 0xd9, 0xc2, 0xd6, 0xa2, 0xf5, 0x9d, 0x74, 0x9c, 0x63, 0x22, 0xb5, 0xae, 0xed, 0x8f, 0xe0,
	0xf2, 0xc2, 0xa2, 0xc8, 0xc0, 0xbd, 0x96, 0xc4, 0x8d, 0xd6, 0xf6, 0x60, 0x57, 0x4f, 0x03, 0x7f,
	0x08, 0x15, 0x39, 0xe1, 0x33, 0xb0, 0xbe, 0x99, 0xc4, 0xba, 0x20, 0xb0, 0xb8, 0x56, 0x1a, 0xee,
	0x09, 0xac, 0x25, 0x12, 0xfd, 0xec, 0x73, 0x13, 0x6a, 0x32, 0xd8, 0x53, 0x58, 0x4f, 0x65, 0xf6,
	0xff, 0x10, 0xc2, 0xe6, 0x1f, 0x72, 0x50, 0x7c, 0x88, 0x71, 0x48, 0x46, 0x6f, 0x43, 0xf1, 0x91,
	0xe1, 0xfd, 0xc0, 0xc3, 0x26, 0x83, 0x2a, 0x68, 0xe5, 0xc0, 0x57, 0x8b, 0x16, 0x27, 0xe9, 0x11,
	0x0f, 0x0d, 0x20, 0xff, 0x10, 0x73, 0xe4, 0x8a, 0xf6, 0x49, 0xe0, 0xab, 0x6b, 0xc7, 0x58, 0xea,
	0xeb, 0xbf, 0xff, 0x9b, 0xfa, 0x60, 0x68, 0xd0, 0xfe, 0x4e, 0xd7, 0xb6, 0xda, 0x1d, 0x87, 0xde,
	0x3d, 0xc7, 0x69, 0xb3, 0xad, 0xd9, 0x56, 0xc7, 0xa1, 0xbb, 0x86, 0x47, 0xb1, 0xab, 0x87, 0x66,
	0xd0, 0x67, 0x0a, 0x54, 0x3b, 0x8e, 0x4d, 0x6d, 0x63, 0xb0, 0x6f, 0xd8, 0x66, 0x68, 0x99, 0x6f,
	0x0f, 0x38, 0xdc, 0xef, 0xed, 0x04, 0xe7, 0x4d, 0x4c, 0x22, 0x65, 0xbc, 0xf9, 0x57, 0x05, 0x56,
	0x78, 0x18, 0xd1, 0x1e, 0x94, 0xa5, 0x74, 0x16, 0xe7, 0x5c, 0x34, 0xdf, 0x8d, 0xf8, 0xfe, 0x29,
	0x6d, 0x0d, 0xf2, 0xfe, 0x29, 0xc9, 0xa1, 0xef, 0xcd, 0xd6, 0x22, 0x95, 0x06, 0x82, 0xca, 0x1b,
	0xef, 0x31, 0x1f, 0xc8, 0x8d, 0x37, 0x5a, 0xc1, 0x3b, 0x50, 0xe5, 0x55, 0x68, 0x13, 0x67, 0xcf,
	0x35, 0xb1, 0xcb, 0x62, 0x25, 0xce, 0x61, 0x38, 0xc1, 0xd1, 0x53, 0x92, 0xcd, 0x7f, 0x2b, 0x50,
	0x14, 0xa5, 0x80, 0x08, 0x5c, 0xcc, 0x28, 0x2c, 0xe1, 0xe1, 0x76, 0x54, 0x37, 0xf3, 0x12, 0xda,
	0x37, 0x02, 0x5f, 0x7d, 0x2b, 0x63, 0x27, 0x92, 0x26, 0x9b, 0x85, 0xfc, 0xd5, 0x7a, 0x7e, 0x08,
	0x45, 0xd1, 0xdf, 0x51, 0x33, 0x5c, 0x5c, 0x76, 0x06, 0x61, 0xc5, 0xa4, 0x41, 0xe0, 0xab, 0x2b,
	0x94, 0x51, 0x74, 0xc1, 0x41, 0x6f, 0x43, 0xfe, 0x29, 0xb1, 0xc4, 0x3c, 0x21, 0xde, 0x20, 0xb4,
	0x62, 0xe0, 0xab, 0xf9, 0x01, 0xb1, 0xf4, 0x90, 0xdf, 0xfc, 0x54, 0x01, 0x88, 0xdb, 0x01, 0x7a,
	0x1f, 0x56, 0xf8, 0x48, 0x44, 0x71, 0x3d, 0xd1, 0x31, 0x0e, 0x27, 0xda, 0x66, 0xe0, 0xab, 0x1b,
	0x7c, 0x53, 0x95, 0x1c, 0x14, 0x4a, 0x19, 0xfe, 0xe5, 0xce, 0xec, 0xdf, 0x3f, 0x95, 0xec, 0x4b,
	0x0e, 0x7a, 0x17, 0xca, 0x8f, 0x0c, 0x6f, 0xdf, 0x25, 0x27, 0xb6, 0x39, 0x2b, 0xfa, 0xf5, 0xc0,
	0x57, 0xcb, 0x56, 0x4c, 0xd6, 0x65, 0x19, 0xa1, 0xa2, 0xe3, 0xe3, 0xb1, 0x13, 0xaa, 0xe4, 0x12,
	0x2a, 0x11, 0x59, 0x97, 0x65, 0xd0, 0x2d, 0xa8, 0x84, 0x08, 0xd8, 0x31, 0x06, 0xe1, 0xcd, 0x81,
	0x2d, 0x4c, 0x41, 0xdb, 0x08, 0x7c, 0xb5, 0x62, 0x49, 0x74, 0x3d, 0x21, 0x15, 0x3a, 0xfc, 0xa1,
	0x31, 0x61, 0x24, 0x97, 0xef, 0x54, 0x05, 0xa6, 0xc7, 0x1c, 0x1e, 0x26, 0x38, 0x7a, 0x4a, 0xb2,
	0x79, 0x0c, 0x17, 0x7f, 0x18, 0x36, 0x48, 0x83, 0x12, 0x57, 0x37, 0xa8, 0xed, 0x58, 0x6c, 0x09,
	0xae, 0x43, 0x69, 0x7f, 0xdc, 0x1d, 0xd8, 0xbd, 0x27, 0x51, 0xb3, 0xd4, 0xd6, 0x02, 0x5f, 0x2d,
	0x8d, 0x22, 0xa2, 0x1e, 0xf3, 0xc3, 0x4c, 0xe0, 0xaa, 0xcc, 0xc7, 0x1c, 0xcf, 0x04, 0x97, 0x51,
	0x74, 0xc1, 0x69, 0xfe, 0x45, 0x81, 0x8d, 0x99, 0x21, 0x8f, 0x13, 0xc3, 0x2e, 0xca, 0x6e, 0x36,
	0x9d, 0xfb, 0xcc, 0xc6, 0x1a, 0xef, 0xa2, 0x1e, 0x27, 0xe9, 0x11, 0x0f, 0xa9, 0xb0, 0xfc, 0x60,
	0x44, 0x7a, 0x7d, 0xb1, 0x8e, 0xa5, 0xc0, 0x57, 0x97, 0x71, 0x48, 0xd0, 0x39, 0x1d, 0xb9, 0xb0,
	0x99, 0xc6, 0x66, 0xf5, 0xc1, 0xcf, 0x69, 0x51, 0x11, 0x66, 0xf8, 0xc9, 0x8f, 0x83, 0x27, 0x19,
	0xba, 0xf2, 0x71, 0x30, 0x0b, 0xbb, 0xf9, 0xdb, 0x1c, 0x94, 0x74, 0x32, 0x76, 0x78, 0xca, 0xaa,
	0xb0, 0xcc, 0x06, 0x22, 0x31, 0xd8, 0x14, 0xdd, 0x90, 0xa0, 0x73, 0x7a, 0xb8, 0x46, 0xa9, 0xab,
	0x58, 0x8e, 0x5d, 0xc5, 0xd8, 0x1a, 0x25, 0xaf, 0x62, 0x73, 0x17, 0xb0, 0x0f, 0x60, 0x83, 0x2d,
	0xd6, 0x47, 0x2c, 0xb9, 0x46, 0xc4, 0x13, 0x99, 0xb1, 0xca, 0x0b, 0xa1, 0x9b, 0xe2, 0xe9, 0x73,
	0xd2, 0x71, 0xa0, 0x4d, 0x96, 0x1a, 0x89, 0x40, 0x9b, 0x51, 0xa0, 0xcd, 0x38, 0xd0, 0xcb, 0x0b,
	0x02, 0x7d, 0x1d, 0x4a, 0x87, 0xf6, 0x10, 0x7b, 0xd4, 0x18, 0x8e, 0xd8, 0xbd, 0xb5, 0xc0, 0xd3,
	0x82, 0x46, 0x44, 0x3d, 0xe6, 0x37, 0x3f, 0x06, 0x60, 0xbe, 0x7b, 0x2c, 0x42, 0xdf, 0x97, 0x47,
	0xe2, 0xc6, 0x10, 0x3d, 0x74, 0xcc, 0xe2, 0xc8, 0x0f, 0x9e, 0xee, 0x4c, 0x4e, 0x3e, 0x78, 0xc6,
	0xda, 0xcd, 0x77, 0xa1, 0xb8, 0x3f, 0xee, 0x3e, 0xc1, 0x53, 0x0f, 0xbd, 0x03, 0x85, 0xf0, 0x9f,
	0x01, 0x56, 0x78, 0x34, 0x9f, 0xe3, 0x69, 0xe2, 0xcc, 0x19, 0xf2, 0xc3, 0xe5, 0xba, 0x10, 0xaf,
	0x63, 0xa4, 0xfd, 0x99, 0x02, 0x5b, 0xcc, 0xf9, 0x39, 0x96, 0x98, 0xe1, 0xad, 0x74, 0xee, 0x44,
	0xfc, 0x76, 0xb6, 0x1a, 0x3f, 0x3e, 0xab, 0x81, 0xaf, 0x5e, 0x39, 0x49, 0xf3, 0xe4, 0xc7, 0x81,
	0x6c, 0xed, 0xff, 0x9a, 0xe9, 0xdb, 0x47, 0x70, 0xe5, 0x0b, 0x0c, 0xcb, 0xa7, 0x9b, 0xb5, 0x2f,
	0x3c, 0x2c, 0x09, 0x2d, 0xf9, 0x78, 0xf3, 0xc7, 0x1c, 0xac, 0xce, 0xde, 0x40, 0xce, 0x58, 0x99,
	0x77, 0xa0, 0xca, 0x72, 0x2d, 0x4e, 0x8a, 0x5c, 0xdc, 0x79, 0xba, 0x09, 0x8e, 0x9e, 0x92, 0x44,
	0xc3, 0xf9, 0x97, 0x9d, 0x7c, 0xe2, 0x02, 0x14, 0x91, 0xff, 0x2f, 0xaf, 0x3a, 0x6f, 0xf2, 0x59,
	0xe0, 0x03, 0xa8, 0xb2, 0x37, 0x88, 0xb0, 0x19, 0xf3, 0x8b, 0x45, 0x3b, 0x71, 0x47, 0xe7, 0x2f,
	0x03, 0xec, 0xa1, 0x26, 0xbe, 0xa3, 0xcb, 0x37, 0x73, 0x6d, 0xfc, 0xe2, 0x55, 0x7d, 0xe9, 0xe5,
	0xab, 0xfa, 0xd2, 0xe7, 0xaf, 0xea, 0xca, 0x2f, 0x4e, 0xeb, 0xca, 0xef, 0x4e, 0xeb, 0xca, 0x9f,
	0x4f, 0xeb, 0xca, 0x8b, 0xd3, 0xba, 0xf2, 0xf2, 0xb4, 0xae, 0xfc, 0xfd, 0xb4, 0xae, 0xfc, 0xe3,
	0xb4, 0xbe, 0xf4, 0xf9, 0x69, 0x5d, 0xf9, 0xf5, 0xeb, 0xfa, 0xd2, 0x8b, 0xd7, 0xf5, 0xa5, 0x97,
	0xaf, 0xeb, 0x4b, 0x9f, 0x9c, 0xe7, 0xb4, 0xb6, 0x23, 0x9e, 0xb1, 0xef, 0x8a, 0xff, 0xee, 0x0a,
	0xf3, 0xec, 0xbd, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x87, 0x21, 0x1d, 0xdf, 0xe0, 0x16, 0x00,
	0x00,
}

func (this *OutportBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutportBlock)
	if !ok {
		that2, ok := that.(OutportBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockData.Equal(that1.BlockData) {
		return false
	}
	if !this.TransactionPool.Equal(that1.TransactionPool) {
		return false
	}
	if !this.HeaderGasConsumption.Equal(that1.HeaderGasConsumption) {
		return false
	}
	if len(this.AlteredAccounts) != len(that1.AlteredAccounts) {
		return false
	}
	for i := range this.AlteredAccounts {
		if !this.AlteredAccounts[i].Equal(that1.AlteredAccounts[i]) {
			return false
		}
	}
	if len(this.NotarizedHeadersHashes) != len(that1.NotarizedHeadersHashes) {
		return false
	}
	for i := range this.NotarizedHeadersHashes {
		if this.NotarizedHeadersHashes[i] != that1.NotarizedHeadersHashes[i] {
			return false
		}
	}
	if this.NumberOfShards != that1.NumberOfShards {
		return false
	}
	if this.IsImportDB != that1.IsImportDB {
		return false
	}
	if len(this.SignersIndexes) != len(that1.SignersIndexes) {
		return false
	}
	for i := range this.SignersIndexes {
		if this.SignersIndexes[i] != that1.SignersIndexes[i] {
			return false
		}
	}
	if this.HighestFinalBlockNonce != that1.HighestFinalBlockNonce {
		return false
	}
	if !bytes.Equal(this.HighestFinalBlockHash, that1.HighestFinalBlockHash) {
		return false
	}
	return true
}
func (this *BlockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockData)
	if !ok {
		that2, ok := that.(BlockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HeaderBytes, that1.HeaderBytes) {
		return false
	}
	if this.HeaderType != that1.HeaderType {
		return false
	}
	if !bytes.Equal(this.HeaderHash, that1.HeaderHash) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *TransactionPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransactionPool)
	if !ok {
		that2, ok := that.(TransactionPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if len(this.SmartContractResults) != len(that1.SmartContractResults) {
		return false
	}
	for i := range this.SmartContractResults {
		if !this.SmartContractResults[i].Equal(that1.SmartContractResults[i]) {
			return false
		}
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	if len(this.Receipts) != len(that1.Receipts) {
		return false
	}
	for i := range this.Receipts {
		if !this.Receipts[i].Equal(that1.Receipts[i]) {
			return false
		}
	}
	if len(this.InvalidTxs) != len(that1.InvalidTxs) {
		return false
	}
	for i := range this.InvalidTxs {
		if !this.InvalidTxs[i].Equal(that1.InvalidTxs[i]) {
			return false
		}
	}
	if len(this.Logs) != len(that1.Logs) {
		return false
	}
	for i := range this.Logs {
		if !this.Logs[i].Equal(that1.Logs[i]) {
			return false
		}
	}
	if len(this.ScheduledExecutedSCRSHashesPrevBlock) != len(that1.ScheduledExecutedSCRSHashesPrevBlock) {
		return false
	}
	for i := range this.ScheduledExecutedSCRSHashesPrevBlock {
		if this.ScheduledExecutedSCRSHashesPrevBlock[i] != that1.ScheduledExecutedSCRSHashesPrevBlock[i] {
			return false
		}
	}
	if len(this.ScheduledExecutedInvalidTxsHashesPrevBlock) != len(that1.ScheduledExecutedInvalidTxsHashesPrevBlock) {
		return false
	}
	for i := range this.ScheduledExecutedInvalidTxsHashesPrevBlock {
		if this.ScheduledExecutedInvalidTxsHashesPrevBlock[i] != that1.ScheduledExecutedInvalidTxsHashesPrevBlock[i] {
			return false
		}
	}
	return true
}
func (this *FeeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeInfo)
	if !ok {
		that2, ok := that.(FeeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Fee, that1.Fee) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.InitialPaidFee, that1.InitialPaidFee) {
			return false
		}
	}
	return true
}
func (this *TxInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxInfo)
	if !ok {
		that2, ok := that.(TxInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	if this.ExecutionOrder != that1.ExecutionOrder {
		return false
	}
	return true
}
func (this *SCRInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SCRInfo)
	if !ok {
		that2, ok := that.(SCRInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmartContractResult.Equal(that1.SmartContractResult) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	if this.ExecutionOrder != that1.ExecutionOrder {
		return false
	}
	return true
}
func (this *LogData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogData)
	if !ok {
		that2, ok := that.(LogData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if !this.Log.Equal(that1.Log) {
		return false
	}
	return true
}
func (this *RewardInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardInfo)
	if !ok {
		that2, ok := that.(RewardInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reward.Equal(that1.Reward) {
		return false
	}
	if this.ExecutionOrder != that1.ExecutionOrder {
		return false
	}
	return true
}
func (this *HeaderGasConsumption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderGasConsumption)
	if !ok {
		that2, ok := that.(HeaderGasConsumption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GasProvided != that1.GasProvided {
		return false
	}
	if this.GasRefunded != that1.GasRefunded {
		return false
	}
	if this.GasPenalized != that1.GasPenalized {
		return false
	}
	if this.MaxGasPerBlock != that1.MaxGasPerBlock {
		return false
	}
	return true
}
func (this *ValidatorRatingInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorRatingInfo)
	if !ok {
		that2, ok := that.(ValidatorRatingInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.Rating != that1.Rating {
		return false
	}
	return true
}
func (this *ValidatorsRating) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorsRating)
	if !ok {
		that2, ok := that.(ValidatorsRating)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if len(this.ValidatorsRatingInfo) != len(that1.ValidatorsRatingInfo) {
		return false
	}
	for i := range this.ValidatorsRatingInfo {
		if !this.ValidatorsRatingInfo[i].Equal(that1.ValidatorsRatingInfo[i]) {
			return false
		}
	}
	return true
}
func (this *RoundInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoundInfo)
	if !ok {
		that2, ok := that.(RoundInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if len(this.SignersIndexes) != len(that1.SignersIndexes) {
		return false
	}
	for i := range this.SignersIndexes {
		if this.SignersIndexes[i] != that1.SignersIndexes[i] {
			return false
		}
	}
	if this.BlockWasProposed != that1.BlockWasProposed {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *RoundsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoundsInfo)
	if !ok {
		that2, ok := that.(RoundsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoundsInfo) != len(that1.RoundsInfo) {
		return false
	}
	for i := range this.RoundsInfo {
		if !this.RoundsInfo[i].Equal(that1.RoundsInfo[i]) {
			return false
		}
	}
	return true
}
func (this *PubKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubKeys)
	if !ok {
		that2, ok := that.(PubKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !bytes.Equal(this.Keys[i], that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *ValidatorsPubKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorsPubKeys)
	if !ok {
		that2, ok := that.(ValidatorsPubKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ShardValidatorsPubKeys) != len(that1.ShardValidatorsPubKeys) {
		return false
	}
	for i := range this.ShardValidatorsPubKeys {
		if !this.ShardValidatorsPubKeys[i].Equal(that1.ShardValidatorsPubKeys[i]) {
			return false
		}
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	return true
}
func (this *Accounts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Accounts)
	if !ok {
		that2, ok := that.(Accounts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.BlockTimestamp != that1.BlockTimestamp {
		return false
	}
	if len(this.AlteredAccounts) != len(that1.AlteredAccounts) {
		return false
	}
	for i := range this.AlteredAccounts {
		if !this.AlteredAccounts[i].Equal(that1.AlteredAccounts[i]) {
			return false
		}
	}
	return true
}
func (this *FinalizedBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinalizedBlock)
	if !ok {
		that2, ok := that.(FinalizedBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HeaderHash, that1.HeaderHash) {
		return false
	}
	return true
}
func (this *OutportBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&outport.OutportBlock{")
	if this.BlockData != nil {
		s = append(s, "BlockData: "+fmt.Sprintf("%#v", this.BlockData)+",\n")
	}
	if this.TransactionPool != nil {
		s = append(s, "TransactionPool: "+fmt.Sprintf("%#v", this.TransactionPool)+",\n")
	}
	if this.HeaderGasConsumption != nil {
		s = append(s, "HeaderGasConsumption: "+fmt.Sprintf("%#v", this.HeaderGasConsumption)+",\n")
	}
	keysForAlteredAccounts := make([]string, 0, len(this.AlteredAccounts))
	for k, _ := range this.AlteredAccounts {
		keysForAlteredAccounts = append(keysForAlteredAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
	mapStringForAlteredAccounts := "map[string]*alteredAccount.AlteredAccount{"
	for _, k := range keysForAlteredAccounts {
		mapStringForAlteredAccounts += fmt.Sprintf("%#v: %#v,", k, this.AlteredAccounts[k])
	}
	mapStringForAlteredAccounts += "}"
	if this.AlteredAccounts != nil {
		s = append(s, "AlteredAccounts: "+mapStringForAlteredAccounts+",\n")
	}
	s = append(s, "NotarizedHeadersHashes: "+fmt.Sprintf("%#v", this.NotarizedHeadersHashes)+",\n")
	s = append(s, "NumberOfShards: "+fmt.Sprintf("%#v", this.NumberOfShards)+",\n")
	s = append(s, "IsImportDB: "+fmt.Sprintf("%#v", this.IsImportDB)+",\n")
	s = append(s, "SignersIndexes: "+fmt.Sprintf("%#v", this.SignersIndexes)+",\n")
	s = append(s, "HighestFinalBlockNonce: "+fmt.Sprintf("%#v", this.HighestFinalBlockNonce)+",\n")
	s = append(s, "HighestFinalBlockHash: "+fmt.Sprintf("%#v", this.HighestFinalBlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&outport.BlockData{")
	s = append(s, "HeaderBytes: "+fmt.Sprintf("%#v", this.HeaderBytes)+",\n")
	s = append(s, "HeaderType: "+fmt.Sprintf("%#v", this.HeaderType)+",\n")
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransactionPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&outport.TransactionPool{")
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxInfo{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%#v: %#v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	if this.Transactions != nil {
		s = append(s, "Transactions: "+mapStringForTransactions+",\n")
	}
	keysForSmartContractResults := make([]string, 0, len(this.SmartContractResults))
	for k, _ := range this.SmartContractResults {
		keysForSmartContractResults = append(keysForSmartContractResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResults)
	mapStringForSmartContractResults := "map[string]*SCRInfo{"
	for _, k := range keysForSmartContractResults {
		mapStringForSmartContractResults += fmt.Sprintf("%#v: %#v,", k, this.SmartContractResults[k])
	}
	mapStringForSmartContractResults += "}"
	if this.SmartContractResults != nil {
		s = append(s, "SmartContractResults: "+mapStringForSmartContractResults+",\n")
	}
	keysForRewards := make([]string, 0, len(this.Rewards))
	for k, _ := range this.Rewards {
		keysForRewards = append(keysForRewards, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
	mapStringForRewards := "map[string]*RewardInfo{"
	for _, k := range keysForRewards {
		mapStringForRewards += fmt.Sprintf("%#v: %#v,", k, this.Rewards[k])
	}
	mapStringForRewards += "}"
	if this.Rewards != nil {
		s = append(s, "Rewards: "+mapStringForRewards+",\n")
	}
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%#v: %#v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	if this.Receipts != nil {
		s = append(s, "Receipts: "+mapStringForReceipts+",\n")
	}
	keysForInvalidTxs := make([]string, 0, len(this.InvalidTxs))
	for k, _ := range this.InvalidTxs {
		keysForInvalidTxs = append(keysForInvalidTxs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
	mapStringForInvalidTxs := "map[string]*TxInfo{"
	for _, k := range keysForInvalidTxs {
		mapStringForInvalidTxs += fmt.Sprintf("%#v: %#v,", k, this.InvalidTxs[k])
	}
	mapStringForInvalidTxs += "}"
	if this.InvalidTxs != nil {
		s = append(s, "InvalidTxs: "+mapStringForInvalidTxs+",\n")
	}
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "ScheduledExecutedSCRSHashesPrevBlock: "+fmt.Sprintf("%#v", this.ScheduledExecutedSCRSHashesPrevBlock)+",\n")
	s = append(s, "ScheduledExecutedInvalidTxsHashesPrevBlock: "+fmt.Sprintf("%#v", this.ScheduledExecutedInvalidTxsHashesPrevBlock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.FeeInfo{")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "InitialPaidFee: "+fmt.Sprintf("%#v", this.InitialPaidFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TxInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.TxInfo{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "ExecutionOrder: "+fmt.Sprintf("%#v", this.ExecutionOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCRInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.SCRInfo{")
	if this.SmartContractResult != nil {
		s = append(s, "SmartContractResult: "+fmt.Sprintf("%#v", this.SmartContractResult)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "ExecutionOrder: "+fmt.Sprintf("%#v", this.ExecutionOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&outport.LogData{")
	s = append(s, "TxHash: "+fmt.Sprintf("%#v", this.TxHash)+",\n")
	if this.Log != nil {
		s = append(s, "Log: "+fmt.Sprintf("%#v", this.Log)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RewardInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&outport.RewardInfo{")
	if this.Reward != nil {
		s = append(s, "Reward: "+fmt.Sprintf("%#v", this.Reward)+",\n")
	}
	s = append(s, "ExecutionOrder: "+fmt.Sprintf("%#v", this.ExecutionOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeaderGasConsumption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&outport.HeaderGasConsumption{")
	s = append(s, "GasProvided: "+fmt.Sprintf("%#v", this.GasProvided)+",\n")
	s = append(s, "GasRefunded: "+fmt.Sprintf("%#v", this.GasRefunded)+",\n")
	s = append(s, "GasPenalized: "+fmt.Sprintf("%#v", this.GasPenalized)+",\n")
	s = append(s, "MaxGasPerBlock: "+fmt.Sprintf("%#v", this.MaxGasPerBlock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorRatingInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&outport.ValidatorRatingInfo{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Rating: "+fmt.Sprintf("%#v", this.Rating)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorsRating) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.ValidatorsRating{")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	if this.ValidatorsRatingInfo != nil {
		s = append(s, "ValidatorsRatingInfo: "+fmt.Sprintf("%#v", this.ValidatorsRatingInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoundInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&outport.RoundInfo{")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "SignersIndexes: "+fmt.Sprintf("%#v", this.SignersIndexes)+",\n")
	s = append(s, "BlockWasProposed: "+fmt.Sprintf("%#v", this.BlockWasProposed)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoundsInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&outport.RoundsInfo{")
	if this.RoundsInfo != nil {
		s = append(s, "RoundsInfo: "+fmt.Sprintf("%#v", this.RoundsInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&outport.PubKeys{")
	s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorsPubKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&outport.ValidatorsPubKeys{")
	keysForShardValidatorsPubKeys := make([]uint32, 0, len(this.ShardValidatorsPubKeys))
	for k, _ := range this.ShardValidatorsPubKeys {
		keysForShardValidatorsPubKeys = append(keysForShardValidatorsPubKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForShardValidatorsPubKeys)
	mapStringForShardValidatorsPubKeys := "map[uint32]*PubKeys{"
	for _, k := range keysForShardValidatorsPubKeys {
		mapStringForShardValidatorsPubKeys += fmt.Sprintf("%#v: %#v,", k, this.ShardValidatorsPubKeys[k])
	}
	mapStringForShardValidatorsPubKeys += "}"
	if this.ShardValidatorsPubKeys != nil {
		s = append(s, "ShardValidatorsPubKeys: "+mapStringForShardValidatorsPubKeys+",\n")
	}
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Accounts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.Accounts{")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "BlockTimestamp: "+fmt.Sprintf("%#v", this.BlockTimestamp)+",\n")
	keysForAlteredAccounts := make([]string, 0, len(this.AlteredAccounts))
	for k, _ := range this.AlteredAccounts {
		keysForAlteredAccounts = append(keysForAlteredAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
	mapStringForAlteredAccounts := "map[string]*alteredAccount.AlteredAccount{"
	for _, k := range keysForAlteredAccounts {
		mapStringForAlteredAccounts += fmt.Sprintf("%#v: %#v,", k, this.AlteredAccounts[k])
	}
	mapStringForAlteredAccounts += "}"
	if this.AlteredAccounts != nil {
		s = append(s, "AlteredAccounts: "+mapStringForAlteredAccounts+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FinalizedBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&outport.FinalizedBlock{")
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOutportBlock(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OutportBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutportBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutportBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HighestFinalBlockHash) > 0 {
		i -= len(m.HighestFinalBlockHash)
		copy(dAtA[i:], m.HighestFinalBlockHash)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HighestFinalBlockHash)))
		i--
		dAtA[i] = 0x52
	}
	if m.HighestFinalBlockNonce != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.HighestFinalBlockNonce))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SignersIndexes) > 0 {
		dAtA2 := make([]byte, len(m.SignersIndexes)*10)
		var j1 int
		for _, num := range m.SignersIndexes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintOutportBlock(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if m.IsImportDB {
		i--
		if m.IsImportDB {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.NumberOfShards != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.NumberOfShards))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NotarizedHeadersHashes) > 0 {
		for iNdEx := len(m.NotarizedHeadersHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotarizedHeadersHashes[iNdEx])
			copy(dAtA[i:], m.NotarizedHeadersHashes[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.NotarizedHeadersHashes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AlteredAccounts) > 0 {
		keysForAlteredAccounts := make([]string, 0, len(m.AlteredAccounts))
		for k := range m.AlteredAccounts {
			keysForAlteredAccounts = append(keysForAlteredAccounts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
		for iNdEx := len(keysForAlteredAccounts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AlteredAccounts[string(keysForAlteredAccounts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForAlteredAccounts[iNdEx])
			copy(dAtA[i:], keysForAlteredAccounts[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForAlteredAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.HeaderGasConsumption != nil {
		{
			size, err := m.HeaderGasConsumption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TransactionPool != nil {
		{
			size, err := m.TransactionPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockData != nil {
		{
			size, err := m.BlockData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HeaderType) > 0 {
		i -= len(m.HeaderType)
		copy(dAtA[i:], m.HeaderType)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HeaderBytes) > 0 {
		i -= len(m.HeaderBytes)
		copy(dAtA[i:], m.HeaderBytes)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScheduledExecutedInvalidTxsHashesPrevBlock) > 0 {
		for iNdEx := len(m.ScheduledExecutedInvalidTxsHashesPrevBlock) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScheduledExecutedInvalidTxsHashesPrevBlock[iNdEx])
			copy(dAtA[i:], m.ScheduledExecutedInvalidTxsHashesPrevBlock[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.ScheduledExecutedInvalidTxsHashesPrevBlock[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ScheduledExecutedSCRSHashesPrevBlock) > 0 {
		for iNdEx := len(m.ScheduledExecutedSCRSHashesPrevBlock) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScheduledExecutedSCRSHashesPrevBlock[iNdEx])
			copy(dAtA[i:], m.ScheduledExecutedSCRSHashesPrevBlock[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.ScheduledExecutedSCRSHashesPrevBlock[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutportBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InvalidTxs) > 0 {
		keysForInvalidTxs := make([]string, 0, len(m.InvalidTxs))
		for k := range m.InvalidTxs {
			keysForInvalidTxs = append(keysForInvalidTxs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
		for iNdEx := len(keysForInvalidTxs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.InvalidTxs[string(keysForInvalidTxs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForInvalidTxs[iNdEx])
			copy(dAtA[i:], keysForInvalidTxs[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForInvalidTxs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Receipts) > 0 {
		keysForReceipts := make([]string, 0, len(m.Receipts))
		for k := range m.Receipts {
			keysForReceipts = append(keysForReceipts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
		for iNdEx := len(keysForReceipts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Receipts[string(keysForReceipts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForReceipts[iNdEx])
			copy(dAtA[i:], keysForReceipts[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForReceipts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Rewards) > 0 {
		keysForRewards := make([]string, 0, len(m.Rewards))
		for k := range m.Rewards {
			keysForRewards = append(keysForRewards, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
		for iNdEx := len(keysForRewards) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Rewards[string(keysForRewards[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForRewards[iNdEx])
			copy(dAtA[i:], keysForRewards[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForRewards[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SmartContractResults) > 0 {
		keysForSmartContractResults := make([]string, 0, len(m.SmartContractResults))
		for k := range m.SmartContractResults {
			keysForSmartContractResults = append(keysForSmartContractResults, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResults)
		for iNdEx := len(keysForSmartContractResults) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SmartContractResults[string(keysForSmartContractResults[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSmartContractResults[iNdEx])
			copy(dAtA[i:], keysForSmartContractResults[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForSmartContractResults[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Transactions) > 0 {
		keysForTransactions := make([]string, 0, len(m.Transactions))
		for k := range m.Transactions {
			keysForTransactions = append(keysForTransactions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
		for iNdEx := len(keysForTransactions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Transactions[string(keysForTransactions[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTransactions[iNdEx])
			copy(dAtA[i:], keysForTransactions[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForTransactions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.InitialPaidFee)
		i -= size
		if _, err := __caster.MarshalTo(m.InitialPaidFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOutportBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Fee)
		i -= size
		if _, err := __caster.MarshalTo(m.Fee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOutportBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GasUsed != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionOrder != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ExecutionOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SCRInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCRInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCRInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionOrder != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ExecutionOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SmartContractResult != nil {
		{
			size, err := m.SmartContractResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionOrder != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ExecutionOrder))
		i--
		dAtA[i] = 0x10
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeaderGasConsumption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderGasConsumption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderGasConsumption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxGasPerBlock != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.MaxGasPerBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.GasPenalized != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.GasPenalized))
		i--
		dAtA[i] = 0x18
	}
	if m.GasRefunded != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.GasRefunded))
		i--
		dAtA[i] = 0x10
	}
	if m.GasProvided != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.GasProvided))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorRatingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorRatingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorRatingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorsRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorsRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorsRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorsRatingInfo) > 0 {
		for iNdEx := len(m.ValidatorsRatingInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorsRatingInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutportBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoundInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoundInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.Epoch != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x28
	}
	if m.ShardId != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockWasProposed {
		i--
		if m.BlockWasProposed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignersIndexes) > 0 {
		dAtA20 := make([]byte, len(m.SignersIndexes)*10)
		var j19 int
		for _, num := range m.SignersIndexes {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintOutportBlock(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x12
	}
	if m.Round != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoundsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoundsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoundsInfo) > 0 {
		for iNdEx := len(m.RoundsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoundsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutportBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorsPubKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorsPubKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorsPubKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ShardValidatorsPubKeys) > 0 {
		keysForShardValidatorsPubKeys := make([]uint32, 0, len(m.ShardValidatorsPubKeys))
		for k := range m.ShardValidatorsPubKeys {
			keysForShardValidatorsPubKeys = append(keysForShardValidatorsPubKeys, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForShardValidatorsPubKeys)
		for iNdEx := len(keysForShardValidatorsPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ShardValidatorsPubKeys[uint32(keysForShardValidatorsPubKeys[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintOutportBlock(dAtA, i, uint64(keysForShardValidatorsPubKeys[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Accounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Accounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Accounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlteredAccounts) > 0 {
		keysForAlteredAccounts := make([]string, 0, len(m.AlteredAccounts))
		for k := range m.AlteredAccounts {
			keysForAlteredAccounts = append(keysForAlteredAccounts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
		for iNdEx := len(keysForAlteredAccounts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AlteredAccounts[string(keysForAlteredAccounts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForAlteredAccounts[iNdEx])
			copy(dAtA[i:], keysForAlteredAccounts[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForAlteredAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BlockTimestamp != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.BlockTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FinalizedBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutportBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutportBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutportBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockData != nil {
		l = m.BlockData.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.TransactionPool != nil {
		l = m.TransactionPool.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.HeaderGasConsumption != nil {
		l = m.HeaderGasConsumption.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if len(m.AlteredAccounts) > 0 {
		for k, v := range m.AlteredAccounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.NotarizedHeadersHashes) > 0 {
		for _, s := range m.NotarizedHeadersHashes {
			l = len(s)
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	if m.NumberOfShards != 0 {
		n += 1 + sovOutportBlock(uint64(m.NumberOfShards))
	}
	if m.IsImportDB {
		n += 2
	}
	if len(m.SignersIndexes) > 0 {
		l = 0
		for _, e := range m.SignersIndexes {
			l += sovOutportBlock(uint64(e))
		}
		n += 1 + sovOutportBlock(uint64(l)) + l
	}
	if m.HighestFinalBlockNonce != 0 {
		n += 1 + sovOutportBlock(uint64(m.HighestFinalBlockNonce))
	}
	l = len(m.HighestFinalBlockHash)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func (m *BlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderBytes)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	l = len(m.HeaderType)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func (m *TransactionPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for k, v := range m.Transactions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.SmartContractResults) > 0 {
		for k, v := range m.SmartContractResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Receipts) > 0 {
		for k, v := range m.Receipts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.InvalidTxs) > 0 {
		for k, v := range m.InvalidTxs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	if len(m.ScheduledExecutedSCRSHashesPrevBlock) > 0 {
		for _, s := range m.ScheduledExecutedSCRSHashesPrevBlock {
			l = len(s)
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	if len(m.ScheduledExecutedInvalidTxsHashesPrevBlock) > 0 {
		for _, s := range m.ScheduledExecutedInvalidTxsHashesPrevBlock {
			l = len(s)
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	return n
}

func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasUsed != 0 {
		n += 1 + sovOutportBlock(uint64(m.GasUsed))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Fee)
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.InitialPaidFee)
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func (m *TxInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.ExecutionOrder != 0 {
		n += 1 + sovOutportBlock(uint64(m.ExecutionOrder))
	}
	return n
}

func (m *SCRInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmartContractResult != nil {
		l = m.SmartContractResult.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.ExecutionOrder != 0 {
		n += 1 + sovOutportBlock(uint64(m.ExecutionOrder))
	}
	return n
}

func (m *LogData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func (m *RewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.ExecutionOrder != 0 {
		n += 1 + sovOutportBlock(uint64(m.ExecutionOrder))
	}
	return n
}

func (m *HeaderGasConsumption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasProvided != 0 {
		n += 1 + sovOutportBlock(uint64(m.GasProvided))
	}
	if m.GasRefunded != 0 {
		n += 1 + sovOutportBlock(uint64(m.GasRefunded))
	}
	if m.GasPenalized != 0 {
		n += 1 + sovOutportBlock(uint64(m.GasPenalized))
	}
	if m.MaxGasPerBlock != 0 {
		n += 1 + sovOutportBlock(uint64(m.MaxGasPerBlock))
	}
	return n
}

func (m *ValidatorRatingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.Rating != 0 {
		n += 5
	}
	return n
}

func (m *ValidatorsRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovOutportBlock(uint64(m.ShardID))
	}
	if m.Epoch != 0 {
		n += 1 + sovOutportBlock(uint64(m.Epoch))
	}
	if len(m.ValidatorsRatingInfo) > 0 {
		for _, e := range m.ValidatorsRatingInfo {
			l = e.Size()
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	return n
}

func (m *RoundInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovOutportBlock(uint64(m.Round))
	}
	if len(m.SignersIndexes) > 0 {
		l = 0
		for _, e := range m.SignersIndexes {
			l += sovOutportBlock(uint64(e))
		}
		n += 1 + sovOutportBlock(uint64(l)) + l
	}
	if m.BlockWasProposed {
		n += 2
	}
	if m.ShardId != 0 {
		n += 1 + sovOutportBlock(uint64(m.ShardId))
	}
	if m.Epoch != 0 {
		n += 1 + sovOutportBlock(uint64(m.Epoch))
	}
	if m.Timestamp != 0 {
		n += 1 + sovOutportBlock(uint64(m.Timestamp))
	}
	return n
}

func (m *RoundsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoundsInfo) > 0 {
		for _, e := range m.RoundsInfo {
			l = e.Size()
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	return n
}

func (m *PubKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	return n
}

func (m *ValidatorsPubKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShardValidatorsPubKeys) > 0 {
		for k, v := range m.ShardValidatorsPubKeys {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + sovOutportBlock(uint64(k)) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if m.Epoch != 0 {
		n += 1 + sovOutportBlock(uint64(m.Epoch))
	}
	return n
}

func (m *Accounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovOutportBlock(uint64(m.ShardID))
	}
	if m.BlockTimestamp != 0 {
		n += 1 + sovOutportBlock(uint64(m.BlockTimestamp))
	}
	if len(m.AlteredAccounts) > 0 {
		for k, v := range m.AlteredAccounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FinalizedBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func sovOutportBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutportBlock(x uint64) (n int) {
	return sovOutportBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OutportBlock) String() string {
	if this == nil {
		return "nil"
	}
	keysForAlteredAccounts := make([]string, 0, len(this.AlteredAccounts))
	for k, _ := range this.AlteredAccounts {
		keysForAlteredAccounts = append(keysForAlteredAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
	mapStringForAlteredAccounts := "map[string]*alteredAccount.AlteredAccount{"
	for _, k := range keysForAlteredAccounts {
		mapStringForAlteredAccounts += fmt.Sprintf("%v: %v,", k, this.AlteredAccounts[k])
	}
	mapStringForAlteredAccounts += "}"
	s := strings.Join([]string{`&OutportBlock{`,
		`BlockData:` + strings.Replace(this.BlockData.String(), "BlockData", "BlockData", 1) + `,`,
		`TransactionPool:` + strings.Replace(this.TransactionPool.String(), "TransactionPool", "TransactionPool", 1) + `,`,
		`HeaderGasConsumption:` + strings.Replace(this.HeaderGasConsumption.String(), "HeaderGasConsumption", "HeaderGasConsumption", 1) + `,`,
		`AlteredAccounts:` + mapStringForAlteredAccounts + `,`,
		`NotarizedHeadersHashes:` + fmt.Sprintf("%v", this.NotarizedHeadersHashes) + `,`,
		`NumberOfShards:` + fmt.Sprintf("%v", this.NumberOfShards) + `,`,
		`IsImportDB:` + fmt.Sprintf("%v", this.IsImportDB) + `,`,
		`SignersIndexes:` + fmt.Sprintf("%v", this.SignersIndexes) + `,`,
		`HighestFinalBlockNonce:` + fmt.Sprintf("%v", this.HighestFinalBlockNonce) + `,`,
		`HighestFinalBlockHash:` + fmt.Sprintf("%v", this.HighestFinalBlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockData{`,
		`HeaderBytes:` + fmt.Sprintf("%v", this.HeaderBytes) + `,`,
		`HeaderType:` + fmt.Sprintf("%v", this.HeaderType) + `,`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "Body", "block.Body", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransactionPool) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogs := "[]*LogData{"
	for _, f := range this.Logs {
		repeatedStringForLogs += strings.Replace(f.String(), "LogData", "LogData", 1) + ","
	}
	repeatedStringForLogs += "}"
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxInfo{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%v: %v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	keysForSmartContractResults := make([]string, 0, len(this.SmartContractResults))
	for k, _ := range this.SmartContractResults {
		keysForSmartContractResults = append(keysForSmartContractResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResults)
	mapStringForSmartContractResults := "map[string]*SCRInfo{"
	for _, k := range keysForSmartContractResults {
		mapStringForSmartContractResults += fmt.Sprintf("%v: %v,", k, this.SmartContractResults[k])
	}
	mapStringForSmartContractResults += "}"
	keysForRewards := make([]string, 0, len(this.Rewards))
	for k, _ := range this.Rewards {
		keysForRewards = append(keysForRewards, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
	mapStringForRewards := "map[string]*RewardInfo{"
	for _, k := range keysForRewards {
		mapStringForRewards += fmt.Sprintf("%v: %v,", k, this.Rewards[k])
	}
	mapStringForRewards += "}"
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%v: %v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	keysForInvalidTxs := make([]string, 0, len(this.InvalidTxs))
	for k, _ := range this.InvalidTxs {
		keysForInvalidTxs = append(keysForInvalidTxs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
	mapStringForInvalidTxs := "map[string]*TxInfo{"
	for _, k := range keysForInvalidTxs {
		mapStringForInvalidTxs += fmt.Sprintf("%v: %v,", k, this.InvalidTxs[k])
	}
	mapStringForInvalidTxs += "}"
	s := strings.Join([]string{`&TransactionPool{`,
		`Transactions:` + mapStringForTransactions + `,`,
		`SmartContractResults:` + mapStringForSmartContractResults + `,`,
		`Rewards:` + mapStringForRewards + `,`,
		`Receipts:` + mapStringForReceipts + `,`,
		`InvalidTxs:` + mapStringForInvalidTxs + `,`,
		`Logs:` + repeatedStringForLogs + `,`,
		`ScheduledExecutedSCRSHashesPrevBlock:` + fmt.Sprintf("%v", this.ScheduledExecutedSCRSHashesPrevBlock) + `,`,
		`ScheduledExecutedInvalidTxsHashesPrevBlock:` + fmt.Sprintf("%v", this.ScheduledExecutedInvalidTxsHashesPrevBlock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeeInfo{`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`InitialPaidFee:` + fmt.Sprintf("%v", this.InitialPaidFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxInfo{`,
		`Transaction:` + strings.Replace(fmt.Sprintf("%v", this.Transaction), "Transaction", "transaction.Transaction", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`ExecutionOrder:` + fmt.Sprintf("%v", this.ExecutionOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCRInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCRInfo{`,
		`SmartContractResult:` + strings.Replace(fmt.Sprintf("%v", this.SmartContractResult), "SmartContractResult", "smartContractResult.SmartContractResult", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`ExecutionOrder:` + fmt.Sprintf("%v", this.ExecutionOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogData{`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`Log:` + strings.Replace(fmt.Sprintf("%v", this.Log), "Log", "transaction.Log", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RewardInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RewardInfo{`,
		`Reward:` + strings.Replace(fmt.Sprintf("%v", this.Reward), "RewardTx", "rewardTx.RewardTx", 1) + `,`,
		`ExecutionOrder:` + fmt.Sprintf("%v", this.ExecutionOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderGasConsumption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderGasConsumption{`,
		`GasProvided:` + fmt.Sprintf("%v", this.GasProvided) + `,`,
		`GasRefunded:` + fmt.Sprintf("%v", this.GasRefunded) + `,`,
		`GasPenalized:` + fmt.Sprintf("%v", this.GasPenalized) + `,`,
		`MaxGasPerBlock:` + fmt.Sprintf("%v", this.MaxGasPerBlock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorRatingInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorRatingInfo{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Rating:` + fmt.Sprintf("%v", this.Rating) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorsRating) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValidatorsRatingInfo := "[]*ValidatorRatingInfo{"
	for _, f := range this.ValidatorsRatingInfo {
		repeatedStringForValidatorsRatingInfo += strings.Replace(f.String(), "ValidatorRatingInfo", "ValidatorRatingInfo", 1) + ","
	}
	repeatedStringForValidatorsRatingInfo += "}"
	s := strings.Join([]string{`&ValidatorsRating{`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`ValidatorsRatingInfo:` + repeatedStringForValidatorsRatingInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoundInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoundInfo{`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`SignersIndexes:` + fmt.Sprintf("%v", this.SignersIndexes) + `,`,
		`BlockWasProposed:` + fmt.Sprintf("%v", this.BlockWasProposed) + `,`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoundsInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoundsInfo := "[]*RoundInfo{"
	for _, f := range this.RoundsInfo {
		repeatedStringForRoundsInfo += strings.Replace(f.String(), "RoundInfo", "RoundInfo", 1) + ","
	}
	repeatedStringForRoundsInfo += "}"
	s := strings.Join([]string{`&RoundsInfo{`,
		`RoundsInfo:` + repeatedStringForRoundsInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubKeys{`,
		`Keys:` + fmt.Sprintf("%v", this.Keys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorsPubKeys) String() string {
	if this == nil {
		return "nil"
	}
	keysForShardValidatorsPubKeys := make([]uint32, 0, len(this.ShardValidatorsPubKeys))
	for k, _ := range this.ShardValidatorsPubKeys {
		keysForShardValidatorsPubKeys = append(keysForShardValidatorsPubKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForShardValidatorsPubKeys)
	mapStringForShardValidatorsPubKeys := "map[uint32]*PubKeys{"
	for _, k := range keysForShardValidatorsPubKeys {
		mapStringForShardValidatorsPubKeys += fmt.Sprintf("%v: %v,", k, this.ShardValidatorsPubKeys[k])
	}
	mapStringForShardValidatorsPubKeys += "}"
	s := strings.Join([]string{`&ValidatorsPubKeys{`,
		`ShardValidatorsPubKeys:` + mapStringForShardValidatorsPubKeys + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Accounts) String() string {
	if this == nil {
		return "nil"
	}
	keysForAlteredAccounts := make([]string, 0, len(this.AlteredAccounts))
	for k, _ := range this.AlteredAccounts {
		keysForAlteredAccounts = append(keysForAlteredAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
	mapStringForAlteredAccounts := "map[string]*alteredAccount.AlteredAccount{"
	for _, k := range keysForAlteredAccounts {
		mapStringForAlteredAccounts += fmt.Sprintf("%v: %v,", k, this.AlteredAccounts[k])
	}
	mapStringForAlteredAccounts += "}"
	s := strings.Join([]string{`&Accounts{`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`BlockTimestamp:` + fmt.Sprintf("%v", this.BlockTimestamp) + `,`,
		`AlteredAccounts:` + mapStringForAlteredAccounts + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinalizedBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinalizedBlock{`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOutportBlock(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OutportBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutportBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutportBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockData == nil {
				m.BlockData = &BlockData{}
			}
			if err := m.BlockData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPool == nil {
				m.TransactionPool = &TransactionPool{}
			}
			if err := m.TransactionPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderGasConsumption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderGasConsumption == nil {
				m.HeaderGasConsumption = &HeaderGasConsumption{}
			}
			if err := m.HeaderGasConsumption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlteredAccounts == nil {
				m.AlteredAccounts = make(map[string]*alteredAccount.AlteredAccount)
			}
			var mapkey string
			var mapvalue *alteredAccount.AlteredAccount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &alteredAccount.AlteredAccount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AlteredAccounts[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedHeadersHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedHeadersHashes = append(m.NotarizedHeadersHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfShards", wireType)
			}
			m.NumberOfShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfShards |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsImportDB", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsImportDB = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SignersIndexes = append(m.SignersIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOutportBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOutportBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SignersIndexes) == 0 {
					m.SignersIndexes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SignersIndexes = append(m.SignersIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersIndexes", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestFinalBlockNonce", wireType)
			}
			m.HighestFinalBlockNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestFinalBlockNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestFinalBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighestFinalBlockHash = append(m.HighestFinalBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HighestFinalBlockHash == nil {
				m.HighestFinalBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderBytes = append(m.HeaderBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderBytes == nil {
				m.HeaderBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &block.Body{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transactions == nil {
				m.Transactions = make(map[string]*TxInfo)
			}
			var mapkey string
			var mapvalue *TxInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Transactions[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResults == nil {
				m.SmartContractResults = make(map[string]*SCRInfo)
			}
			var mapkey string
			var mapvalue *SCRInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SCRInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SmartContractResults[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[string]*RewardInfo)
			}
			var mapkey string
			var mapvalue *RewardInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RewardInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipts == nil {
				m.Receipts = make(map[string]*receipt.Receipt)
			}
			var mapkey string
			var mapvalue *receipt.Receipt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &receipt.Receipt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Receipts[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvalidTxs == nil {
				m.InvalidTxs = make(map[string]*TxInfo)
			}
			var mapkey string
			var mapvalue *TxInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InvalidTxs[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &LogData{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledExecutedSCRSHashesPrevBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledExecutedSCRSHashesPrevBlock = append(m.ScheduledExecutedSCRSHashesPrevBlock, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledExecutedInvalidTxsHashesPrevBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledExecutedInvalidTxsHashesPrevBlock = append(m.ScheduledExecutedInvalidTxsHashesPrevBlock, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Fee = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPaidFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.InitialPaidFee = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &transaction.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOrder", wireType)
			}
			m.ExecutionOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCRInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCRInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCRInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResult == nil {
				m.SmartContractResult = &smartContractResult.SmartContractResult{}
			}
			if err := m.SmartContractResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOrder", wireType)
			}
			m.ExecutionOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &transaction.Log{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &rewardTx.RewardTx{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOrder", wireType)
			}
			m.ExecutionOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderGasConsumption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderGasConsumption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderGasConsumption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProvided", wireType)
			}
			m.GasProvided = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasProvided |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRefunded", wireType)
			}
			m.GasRefunded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasRefunded |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPenalized", wireType)
			}
			m.GasPenalized = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPenalized |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasPerBlock", wireType)
			}
			m.MaxGasPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorRatingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorRatingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorRatingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorsRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorsRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorsRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsRatingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorsRatingInfo = append(m.ValidatorsRatingInfo, &ValidatorRatingInfo{})
			if err := m.ValidatorsRatingInfo[len(m.ValidatorsRatingInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SignersIndexes = append(m.SignersIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOutportBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOutportBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SignersIndexes) == 0 {
					m.SignersIndexes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SignersIndexes = append(m.SignersIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersIndexes", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockWasProposed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockWasProposed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundsInfo = append(m.RoundsInfo, &RoundInfo{})
			if err := m.RoundsInfo[len(m.RoundsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorsPubKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorsPubKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorsPubKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardValidatorsPubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardValidatorsPubKeys == nil {
				m.ShardValidatorsPubKeys = make(map[uint32]*PubKeys)
			}
			var mapkey uint32
			var mapvalue *PubKeys
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PubKeys{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ShardValidatorsPubKeys[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Accounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Accounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Accounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimestamp", wireType)
			}
			m.BlockTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlteredAccounts == nil {
				m.AlteredAccounts = make(map[string]*alteredAccount.AlteredAccount)
			}
			var mapkey string
			var mapvalue *alteredAccount.AlteredAccount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &alteredAccount.AlteredAccount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AlteredAccounts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalizedBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutportBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutportBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutportBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutportBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutportBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutportBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutportBlock = fmt.Errorf("proto: unexpected end of group")
)
