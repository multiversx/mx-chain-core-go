// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sovereignTx.proto

package sovereignTx

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SovereignTx struct {
	Nonce    uint64        `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	Value    *math_big.Int `protobuf:"bytes,2,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"value"`
	RcvAddr  []byte        `protobuf:"bytes,3,opt,name=RcvAddr,proto3" json:"receiver"`
	SndAddr  []byte        `protobuf:"bytes,4,opt,name=SndAddr,proto3" json:"sender"`
	GasLimit uint64        `protobuf:"varint,5,opt,name=GasLimit,proto3" json:"gasLimit"`
	GasPrice uint64        `protobuf:"varint,6,opt,name=GasPrice,proto3" json:"gasPrice"`
	Data     []byte        `protobuf:"bytes,7,opt,name=Data,proto3" json:"data,omitempty"`
}

func (m *SovereignTx) Reset()      { *m = SovereignTx{} }
func (*SovereignTx) ProtoMessage() {}
func (*SovereignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_3309200ee9b6aa5f, []int{0}
}
func (m *SovereignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SovereignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SovereignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SovereignTx.Merge(m, src)
}
func (m *SovereignTx) XXX_Size() int {
	return m.Size()
}
func (m *SovereignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SovereignTx.DiscardUnknown(m)
}

var xxx_messageInfo_SovereignTx proto.InternalMessageInfo

func (m *SovereignTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SovereignTx) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SovereignTx) GetRcvAddr() []byte {
	if m != nil {
		return m.RcvAddr
	}
	return nil
}

func (m *SovereignTx) GetSndAddr() []byte {
	if m != nil {
		return m.SndAddr
	}
	return nil
}

func (m *SovereignTx) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *SovereignTx) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *SovereignTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SovereignTx)(nil), "proto.SovereignTx")
}

func init() { proto.RegisterFile("sovereignTx.proto", fileDescriptor_3309200ee9b6aa5f) }

var fileDescriptor_3309200ee9b6aa5f = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x86, 0xe3, 0x4b, 0xd3, 0x5e, 0x7c, 0xaf, 0x90, 0xf0, 0x14, 0x31, 0x38, 0x57, 0x08, 0x5d,
	0x75, 0x20, 0xc9, 0xc0, 0xc8, 0x44, 0xe0, 0x0a, 0x55, 0x42, 0x08, 0xb9, 0x88, 0x81, 0xcd, 0x49,
	0x8c, 0x63, 0xa9, 0xb1, 0x2b, 0xc7, 0x89, 0xca, 0xc6, 0x23, 0xf0, 0x18, 0x88, 0x27, 0x61, 0xec,
	0xd8, 0x29, 0x50, 0x77, 0x41, 0x99, 0xfa, 0x08, 0x28, 0x6e, 0x29, 0x65, 0xb2, 0xcf, 0xff, 0x7f,
	0x3e, 0xbf, 0x8f, 0x0e, 0x7c, 0x58, 0xab, 0x96, 0x69, 0x26, 0xb8, 0x7c, 0xbf, 0x8a, 0x97, 0x5a,
	0x19, 0x85, 0x7c, 0x77, 0x3c, 0x8a, 0xb8, 0x30, 0x65, 0x93, 0xc5, 0xb9, 0xaa, 0x12, 0xae, 0xb8,
	0x4a, 0x9c, 0x9c, 0x35, 0x9f, 0x5c, 0xe5, 0x0a, 0x77, 0x3b, 0xbc, 0x7a, 0x6c, 0x2f, 0xe0, 0xd5,
	0xfc, 0x5f, 0x2f, 0x14, 0x42, 0xff, 0xad, 0x92, 0x39, 0x0b, 0xc0, 0x0d, 0x98, 0x8e, 0xd2, 0xfb,
	0x7d, 0x17, 0xfa, 0x72, 0x10, 0xc8, 0x41, 0x47, 0x25, 0xf4, 0x3f, 0xd0, 0x45, 0xc3, 0x82, 0x8b,
	0x1b, 0x30, 0xbd, 0x4e, 0xc9, 0x00, 0xb4, 0x83, 0xf0, 0xfd, 0x67, 0x78, 0x57, 0x51, 0x53, 0x26,
	0x99, 0xe0, 0xf1, 0x4c, 0x9a, 0xe7, 0x67, 0x1f, 0xa9, 0x9a, 0x85, 0x11, 0x2d, 0xd3, 0xf5, 0x2a,
	0xa9, 0x56, 0x51, 0x5e, 0x52, 0x21, 0xa3, 0x5c, 0x69, 0x16, 0x71, 0x95, 0x14, 0xd4, 0xd0, 0x38,
	0x15, 0x7c, 0x26, 0xcd, 0x4b, 0x5a, 0x1b, 0xa6, 0xc9, 0x21, 0x00, 0xdd, 0xc2, 0x09, 0xc9, 0xdb,
	0x17, 0x45, 0xa1, 0x83, 0x7b, 0x2e, 0xeb, 0xba, 0xef, 0xc2, 0x4b, 0xcd, 0x72, 0x36, 0xb4, 0x22,
	0x7f, 0x4d, 0xf4, 0x04, 0x4e, 0xe6, 0xb2, 0x70, 0xdc, 0xc8, 0x71, 0xb0, 0xef, 0xc2, 0x71, 0xcd,
	0x64, 0x31, 0x50, 0x47, 0x0b, 0x4d, 0xe1, 0xe5, 0x6b, 0x5a, 0xbf, 0x11, 0x95, 0x30, 0x81, 0xef,
	0x66, 0x73, 0xed, 0xf8, 0x51, 0x23, 0x27, 0xf7, 0x48, 0xbe, 0xd3, 0x22, 0x67, 0xc1, 0xf8, 0x3f,
	0xd2, 0x69, 0xe4, 0xe4, 0xa2, 0x5b, 0x38, 0x7a, 0x45, 0x0d, 0x0d, 0x26, 0x2e, 0x16, 0xf5, 0x5d,
	0xf8, 0x60, 0x98, 0xe6, 0xa9, 0xaa, 0x84, 0x61, 0xd5, 0xd2, 0x7c, 0x26, 0xce, 0x4f, 0xef, 0xd6,
	0x5b, 0xec, 0x6d, 0xb6, 0xd8, 0xdb, 0x6f, 0x31, 0xf8, 0x62, 0x31, 0xf8, 0x66, 0x31, 0xf8, 0x61,
	0x31, 0x58, 0x5b, 0x0c, 0x36, 0x16, 0x83, 0x5f, 0x16, 0x83, 0xdf, 0x16, 0x7b, 0x7b, 0x8b, 0xc1,
	0xd7, 0x1d, 0xf6, 0xd6, 0x3b, 0xec, 0x6d, 0x76, 0xd8, 0xfb, 0x78, 0x75, 0xb6, 0xe7, 0x6c, 0xec,
	0x56, 0xf6, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0xb5, 0xbe, 0x2f, 0xfd, 0x01, 0x00,
	0x00,
}

func (this *SovereignTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SovereignTx)
	if !ok {
		that2, ok := that.(SovereignTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if !bytes.Equal(this.RcvAddr, that1.RcvAddr) {
		return false
	}
	if !bytes.Equal(this.SndAddr, that1.SndAddr) {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasPrice != that1.GasPrice {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *SovereignTx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&sovereignTx.SovereignTx{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "RcvAddr: "+fmt.Sprintf("%#v", this.RcvAddr)+",\n")
	s = append(s, "SndAddr: "+fmt.Sprintf("%#v", this.SndAddr)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "GasPrice: "+fmt.Sprintf("%#v", this.GasPrice)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSovereignTx(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SovereignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SovereignTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SovereignTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSovereignTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GasPrice != 0 {
		i = encodeVarintSovereignTx(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.GasLimit != 0 {
		i = encodeVarintSovereignTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SndAddr) > 0 {
		i -= len(m.SndAddr)
		copy(dAtA[i:], m.SndAddr)
		i = encodeVarintSovereignTx(dAtA, i, uint64(len(m.SndAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RcvAddr) > 0 {
		i -= len(m.RcvAddr)
		copy(dAtA[i:], m.RcvAddr)
		i = encodeVarintSovereignTx(dAtA, i, uint64(len(m.RcvAddr)))
		i--
		dAtA[i] = 0x1a
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSovereignTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Nonce != 0 {
		i = encodeVarintSovereignTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSovereignTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovSovereignTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SovereignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovSovereignTx(uint64(m.Nonce))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovSovereignTx(uint64(l))
	}
	l = len(m.RcvAddr)
	if l > 0 {
		n += 1 + l + sovSovereignTx(uint64(l))
	}
	l = len(m.SndAddr)
	if l > 0 {
		n += 1 + l + sovSovereignTx(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovSovereignTx(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovSovereignTx(uint64(m.GasPrice))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSovereignTx(uint64(l))
	}
	return n
}

func sovSovereignTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSovereignTx(x uint64) (n int) {
	return sovSovereignTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SovereignTx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SovereignTx{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`RcvAddr:` + fmt.Sprintf("%v", this.RcvAddr) + `,`,
		`SndAddr:` + fmt.Sprintf("%v", this.SndAddr) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`GasPrice:` + fmt.Sprintf("%v", this.GasPrice) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSovereignTx(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SovereignTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSovereignTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SovereignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SovereignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcvAddr = append(m.RcvAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RcvAddr == nil {
				m.RcvAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SndAddr = append(m.SndAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.SndAddr == nil {
				m.SndAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSovereignTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSovereignTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSovereignTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSovereignTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSovereignTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSovereignTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSovereignTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSovereignTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSovereignTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSovereignTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSovereignTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSovereignTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSovereignTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSovereignTx = fmt.Errorf("proto: unexpected end of group")
)
