// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apiHyperBlock.proto

package api

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	alteredAccount "github.com/multiversx/mx-chain-core-go/data/alteredAccount"
	github_com_multiversx_mx_chain_core_go_data_transaction "github.com/multiversx/mx-chain-core-go/data/transaction"
	github_com_multiversx_mx_chain_core_go_data_vm "github.com/multiversx/mx-chain-core-go/data/vm"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Hyperblock struct {
	Hash                   string                  `protobuf:"bytes,1,opt,name=Hash,proto3" json:"hash"`
	PrevBlockHash          string                  `protobuf:"bytes,2,opt,name=PrevBlockHash,proto3" json:"prevBlockHash"`
	StateRootHash          string                  `protobuf:"bytes,3,opt,name=StateRootHash,proto3" json:"stateRootHash"`
	Nonce                  uint64                  `protobuf:"varint,4,opt,name=Nonce,proto3" json:"nonce"`
	Round                  uint64                  `protobuf:"varint,5,opt,name=Round,proto3" json:"round"`
	Epoch                  uint32                  `protobuf:"varint,6,opt,name=Epoch,proto3" json:"epoch"`
	NumTxs                 uint32                  `protobuf:"varint,7,opt,name=NumTxs,proto3" json:"numTxs"`
	AccumulatedFees        string                  `protobuf:"bytes,8,opt,name=AccumulatedFees,proto3" json:"accumulatedFees,omitempty"`
	DeveloperFees          string                  `protobuf:"bytes,9,opt,name=DeveloperFees,proto3" json:"developerFees,omitempty"`
	AccumulatedFeesInEpoch string                  `protobuf:"bytes,10,opt,name=AccumulatedFeesInEpoch,proto3" json:"accumulatedFeesInEpoch,omitempty"`
	DeveloperFeesInEpoch   string                  `protobuf:"bytes,11,opt,name=DeveloperFeesInEpoch,proto3" json:"developerFeesInEpoch,omitempty"`
	Timestamp              uint64                  `protobuf:"varint,12,opt,name=Timestamp,proto3" json:"timestamp,omitempty"`
	EpochStartInfo         *EpochStartInfo         `protobuf:"bytes,13,opt,name=EpochStartInfo,proto3" json:"epochStartInfo,omitempty"`
	EpochStartShardsData   []*EpochStartShardData  `protobuf:"bytes,14,rep,name=EpochStartShardsData,proto3" json:"epochStartShardsData,omitempty"`
	ShardBlocks            []*NotarizedBlock       `protobuf:"bytes,15,rep,name=ShardBlocks,proto3" json:"shardBlocks"`
	Transactions           []*ApiTransactionResult `protobuf:"bytes,16,rep,name=Transactions,proto3" json:"transactions"`
	Status                 string                  `protobuf:"bytes,17,opt,name=Status,proto3" json:"status,omitempty"`
}

func (m *Hyperblock) Reset()      { *m = Hyperblock{} }
func (*Hyperblock) ProtoMessage() {}
func (*Hyperblock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{0}
}
func (m *Hyperblock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hyperblock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Hyperblock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hyperblock.Merge(m, src)
}
func (m *Hyperblock) XXX_Size() int {
	return m.Size()
}
func (m *Hyperblock) XXX_DiscardUnknown() {
	xxx_messageInfo_Hyperblock.DiscardUnknown(m)
}

var xxx_messageInfo_Hyperblock proto.InternalMessageInfo

func (m *Hyperblock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Hyperblock) GetPrevBlockHash() string {
	if m != nil {
		return m.PrevBlockHash
	}
	return ""
}

func (m *Hyperblock) GetStateRootHash() string {
	if m != nil {
		return m.StateRootHash
	}
	return ""
}

func (m *Hyperblock) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Hyperblock) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Hyperblock) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Hyperblock) GetNumTxs() uint32 {
	if m != nil {
		return m.NumTxs
	}
	return 0
}

func (m *Hyperblock) GetAccumulatedFees() string {
	if m != nil {
		return m.AccumulatedFees
	}
	return ""
}

func (m *Hyperblock) GetDeveloperFees() string {
	if m != nil {
		return m.DeveloperFees
	}
	return ""
}

func (m *Hyperblock) GetAccumulatedFeesInEpoch() string {
	if m != nil {
		return m.AccumulatedFeesInEpoch
	}
	return ""
}

func (m *Hyperblock) GetDeveloperFeesInEpoch() string {
	if m != nil {
		return m.DeveloperFeesInEpoch
	}
	return ""
}

func (m *Hyperblock) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Hyperblock) GetEpochStartInfo() *EpochStartInfo {
	if m != nil {
		return m.EpochStartInfo
	}
	return nil
}

func (m *Hyperblock) GetEpochStartShardsData() []*EpochStartShardData {
	if m != nil {
		return m.EpochStartShardsData
	}
	return nil
}

func (m *Hyperblock) GetShardBlocks() []*NotarizedBlock {
	if m != nil {
		return m.ShardBlocks
	}
	return nil
}

func (m *Hyperblock) GetTransactions() []*ApiTransactionResult {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Hyperblock) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type EpochStartInfo struct {
	TotalSupply                      string `protobuf:"bytes,1,opt,name=TotalSupply,proto3" json:"totalSupply"`
	TotalToDistribute                string `protobuf:"bytes,2,opt,name=TotalToDistribute,proto3" json:"totalToDistribute"`
	TotalNewlyMinted                 string `protobuf:"bytes,3,opt,name=TotalNewlyMinted,proto3" json:"totalNewlyMinted"`
	RewardsPerBlock                  string `protobuf:"bytes,4,opt,name=RewardsPerBlock,proto3" json:"rewardsPerBlock"`
	RewardsForProtocolSustainability string `protobuf:"bytes,5,opt,name=RewardsForProtocolSustainability,proto3" json:"rewardsForProtocolSustainability"`
	NodePrice                        string `protobuf:"bytes,6,opt,name=NodePrice,proto3" json:"nodePrice"`
	PrevEpochStartRound              uint64 `protobuf:"varint,7,opt,name=PrevEpochStartRound,proto3" json:"prevEpochStartRound"`
	PrevEpochStartHash               string `protobuf:"bytes,8,opt,name=PrevEpochStartHash,proto3" json:"prevEpochStartHash"`
}

func (m *EpochStartInfo) Reset()      { *m = EpochStartInfo{} }
func (*EpochStartInfo) ProtoMessage() {}
func (*EpochStartInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{1}
}
func (m *EpochStartInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochStartInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EpochStartInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochStartInfo.Merge(m, src)
}
func (m *EpochStartInfo) XXX_Size() int {
	return m.Size()
}
func (m *EpochStartInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochStartInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EpochStartInfo proto.InternalMessageInfo

func (m *EpochStartInfo) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

func (m *EpochStartInfo) GetTotalToDistribute() string {
	if m != nil {
		return m.TotalToDistribute
	}
	return ""
}

func (m *EpochStartInfo) GetTotalNewlyMinted() string {
	if m != nil {
		return m.TotalNewlyMinted
	}
	return ""
}

func (m *EpochStartInfo) GetRewardsPerBlock() string {
	if m != nil {
		return m.RewardsPerBlock
	}
	return ""
}

func (m *EpochStartInfo) GetRewardsForProtocolSustainability() string {
	if m != nil {
		return m.RewardsForProtocolSustainability
	}
	return ""
}

func (m *EpochStartInfo) GetNodePrice() string {
	if m != nil {
		return m.NodePrice
	}
	return ""
}

func (m *EpochStartInfo) GetPrevEpochStartRound() uint64 {
	if m != nil {
		return m.PrevEpochStartRound
	}
	return 0
}

func (m *EpochStartInfo) GetPrevEpochStartHash() string {
	if m != nil {
		return m.PrevEpochStartHash
	}
	return ""
}

type EpochStartShardData struct {
	ShardID                 uint32       `protobuf:"varint,1,opt,name=ShardID,proto3" json:"shard"`
	Epoch                   uint32       `protobuf:"varint,2,opt,name=Epoch,proto3" json:"epoch"`
	Round                   uint64       `protobuf:"varint,3,opt,name=Round,proto3" json:"round,omitempty"`
	Nonce                   uint64       `protobuf:"varint,4,opt,name=Nonce,proto3" json:"nonce,omitempty"`
	HeaderHash              string       `protobuf:"bytes,5,opt,name=HeaderHash,proto3" json:"headerHash,omitempty"`
	RootHash                string       `protobuf:"bytes,6,opt,name=RootHash,proto3" json:"rootHash,omitempty"`
	ScheduledRootHash       string       `protobuf:"bytes,7,opt,name=ScheduledRootHash,proto3" json:"scheduledRootHash,omitempty"`
	FirstPendingMetaBlock   string       `protobuf:"bytes,8,opt,name=FirstPendingMetaBlock,proto3" json:"firstPendingMetaBlock,omitempty"`
	LastFinishedMetaBlock   string       `protobuf:"bytes,9,opt,name=LastFinishedMetaBlock,proto3" json:"lastFinishedMetaBlock,omitempty"`
	PendingMiniBlockHeaders []*MiniBlock `protobuf:"bytes,10,rep,name=PendingMiniBlockHeaders,proto3" json:"pendingMiniBlockHeaders,omitempty"`
}

func (m *EpochStartShardData) Reset()      { *m = EpochStartShardData{} }
func (*EpochStartShardData) ProtoMessage() {}
func (*EpochStartShardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{2}
}
func (m *EpochStartShardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochStartShardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EpochStartShardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochStartShardData.Merge(m, src)
}
func (m *EpochStartShardData) XXX_Size() int {
	return m.Size()
}
func (m *EpochStartShardData) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochStartShardData.DiscardUnknown(m)
}

var xxx_messageInfo_EpochStartShardData proto.InternalMessageInfo

func (m *EpochStartShardData) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *EpochStartShardData) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *EpochStartShardData) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *EpochStartShardData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EpochStartShardData) GetHeaderHash() string {
	if m != nil {
		return m.HeaderHash
	}
	return ""
}

func (m *EpochStartShardData) GetRootHash() string {
	if m != nil {
		return m.RootHash
	}
	return ""
}

func (m *EpochStartShardData) GetScheduledRootHash() string {
	if m != nil {
		return m.ScheduledRootHash
	}
	return ""
}

func (m *EpochStartShardData) GetFirstPendingMetaBlock() string {
	if m != nil {
		return m.FirstPendingMetaBlock
	}
	return ""
}

func (m *EpochStartShardData) GetLastFinishedMetaBlock() string {
	if m != nil {
		return m.LastFinishedMetaBlock
	}
	return ""
}

func (m *EpochStartShardData) GetPendingMiniBlockHeaders() []*MiniBlock {
	if m != nil {
		return m.PendingMiniBlockHeaders
	}
	return nil
}

type MiniBlock struct {
	Hash                    string                  `protobuf:"bytes,1,opt,name=Hash,proto3" json:"hash"`
	Type                    string                  `protobuf:"bytes,2,opt,name=Type,proto3" json:"type"`
	ProcessingType          string                  `protobuf:"bytes,3,opt,name=ProcessingType,proto3" json:"processingType,omitempty"`
	ConstructionState       string                  `protobuf:"bytes,4,opt,name=ConstructionState,proto3" json:"constructionState,omitempty"`
	SFromReceiptsStorage    bool                    `protobuf:"varint,5,opt,name=sFromReceiptsStorage,proto3" json:"isFromReceiptsStorage,omitempty"`
	SourceShard             uint32                  `protobuf:"varint,6,opt,name=SourceShard,proto3" json:"sourceShard"`
	DestinationShard        uint32                  `protobuf:"varint,7,opt,name=DestinationShard,proto3" json:"destinationShard"`
	Transactions            []*ApiTransactionResult `protobuf:"bytes,8,rep,name=Transactions,proto3" json:"transactions,omitempty"`
	Receipts                []*ApiReceipt           `protobuf:"bytes,9,rep,name=Receipts,proto3" json:"receipts,omitempty"`
	IndexOfFirstTxProcessed int32                   `protobuf:"varint,10,opt,name=IndexOfFirstTxProcessed,proto3" json:"indexOfFirstTxProcessed"`
	IndexOfLastTxProcessed  int32                   `protobuf:"varint,11,opt,name=IndexOfLastTxProcessed,proto3" json:"indexOfLastTxProcessed"`
}

func (m *MiniBlock) Reset()      { *m = MiniBlock{} }
func (*MiniBlock) ProtoMessage() {}
func (*MiniBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{3}
}
func (m *MiniBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MiniBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniBlock.Merge(m, src)
}
func (m *MiniBlock) XXX_Size() int {
	return m.Size()
}
func (m *MiniBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MiniBlock proto.InternalMessageInfo

func (m *MiniBlock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MiniBlock) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MiniBlock) GetProcessingType() string {
	if m != nil {
		return m.ProcessingType
	}
	return ""
}

func (m *MiniBlock) GetConstructionState() string {
	if m != nil {
		return m.ConstructionState
	}
	return ""
}

func (m *MiniBlock) GetSFromReceiptsStorage() bool {
	if m != nil {
		return m.SFromReceiptsStorage
	}
	return false
}

func (m *MiniBlock) GetSourceShard() uint32 {
	if m != nil {
		return m.SourceShard
	}
	return 0
}

func (m *MiniBlock) GetDestinationShard() uint32 {
	if m != nil {
		return m.DestinationShard
	}
	return 0
}

func (m *MiniBlock) GetTransactions() []*ApiTransactionResult {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *MiniBlock) GetReceipts() []*ApiReceipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *MiniBlock) GetIndexOfFirstTxProcessed() int32 {
	if m != nil {
		return m.IndexOfFirstTxProcessed
	}
	return 0
}

func (m *MiniBlock) GetIndexOfLastTxProcessed() int32 {
	if m != nil {
		return m.IndexOfLastTxProcessed
	}
	return 0
}

type ApiTransactionResult struct {
	// TransactionHandler Tx                    = 1               [(gogoproto.jsontag) = "-"];
	Type                              string                                                           `protobuf:"bytes,2,opt,name=Type,proto3" json:"type"`
	ProcessingTypeOnSource            string                                                           `protobuf:"bytes,3,opt,name=ProcessingTypeOnSource,proto3" json:"processingTypeOnSource,omitempty"`
	ProcessingTypeOnDestination       string                                                           `protobuf:"bytes,4,opt,name=ProcessingTypeOnDestination,proto3" json:"processingTypeOnDestination,omitempty"`
	Hash                              string                                                           `protobuf:"bytes,5,opt,name=Hash,proto3" json:"hash,omitempty"`
	HashBytes                         []byte                                                           `protobuf:"bytes,6,opt,name=HashBytes,proto3" json:"-"`
	Nonce                             uint64                                                           `protobuf:"varint,7,opt,name=Nonce,proto3" json:"nonce"`
	Round                             uint64                                                           `protobuf:"varint,8,opt,name=Round,proto3" json:"round"`
	Epoch                             uint32                                                           `protobuf:"varint,9,opt,name=Epoch,proto3" json:"epoch"`
	Value                             string                                                           `protobuf:"bytes,10,opt,name=Value,proto3" json:"value,omitempty"`
	Receiver                          string                                                           `protobuf:"bytes,11,opt,name=Receiver,proto3" json:"receiver,omitempty"`
	Sender                            string                                                           `protobuf:"bytes,12,opt,name=Sender,proto3" json:"sender,omitempty"`
	SenderUsername                    []byte                                                           `protobuf:"bytes,13,opt,name=SenderUsername,proto3" json:"senderUsername,omitempty"`
	ReceiverUsername                  []byte                                                           `protobuf:"bytes,14,opt,name=ReceiverUsername,proto3" json:"receiverUsername,omitempty"`
	GasPrice                          uint64                                                           `protobuf:"varint,15,opt,name=GasPrice,proto3" json:"gasPrice,omitempty"`
	GasLimit                          uint64                                                           `protobuf:"varint,16,opt,name=GasLimit,proto3" json:"gasLimit,omitempty"`
	GasUsed                           uint64                                                           `protobuf:"varint,17,opt,name=GasUsed,proto3" json:"gasUsed,omitempty"`
	Data                              []byte                                                           `protobuf:"bytes,18,opt,name=Data,proto3" json:"data,omitempty"`
	CodeMetadata                      []byte                                                           `protobuf:"bytes,19,opt,name=CodeMetadata,proto3" json:"codeMetadata,omitempty"`
	Code                              string                                                           `protobuf:"bytes,20,opt,name=Code,proto3" json:"code,omitempty"`
	PreviousTransactionHash           string                                                           `protobuf:"bytes,21,opt,name=PreviousTransactionHash,proto3" json:"previousTransactionHash,omitempty"`
	OriginalTransactionHash           string                                                           `protobuf:"bytes,22,opt,name=OriginalTransactionHash,proto3" json:"originalTransactionHash,omitempty"`
	ReturnMessage                     string                                                           `protobuf:"bytes,23,opt,name=ReturnMessage,proto3" json:"returnMessage,omitempty"`
	OriginalSender                    string                                                           `protobuf:"bytes,24,opt,name=OriginalSender,proto3" json:"originalSender,omitempty"`
	Signature                         string                                                           `protobuf:"bytes,25,opt,name=Signature,proto3" json:"signature,omitempty"`
	SourceShard                       uint32                                                           `protobuf:"varint,26,opt,name=SourceShard,proto3" json:"sourceShard"`
	DestinationShard                  uint32                                                           `protobuf:"varint,27,opt,name=DestinationShard,proto3" json:"destinationShard"`
	BlockNonce                        uint64                                                           `protobuf:"varint,28,opt,name=BlockNonce,proto3" json:"blockNonce,omitempty"`
	BlockHash                         string                                                           `protobuf:"bytes,29,opt,name=BlockHash,proto3" json:"blockHash,omitempty"`
	NotarizedAtSourceInMetaNonce      uint64                                                           `protobuf:"varint,30,opt,name=NotarizedAtSourceInMetaNonce,proto3" json:"notarizedAtSourceInMetaNonce,omitempty"`
	NotarizedAtSourceInMetaHash       string                                                           `protobuf:"bytes,31,opt,name=NotarizedAtSourceInMetaHash,proto3" json:"NotarizedAtSourceInMetaHash,omitempty"`
	NotarizedAtDestinationInMetaNonce uint64                                                           `protobuf:"varint,32,opt,name=NotarizedAtDestinationInMetaNonce,proto3" json:"notarizedAtDestinationInMetaNonce,omitempty"`
	NotarizedAtDestinationInMetaHash  string                                                           `protobuf:"bytes,33,opt,name=NotarizedAtDestinationInMetaHash,proto3" json:"notarizedAtDestinationInMetaHash,omitempty"`
	MiniBlockType                     string                                                           `protobuf:"bytes,34,opt,name=MiniBlockType,proto3" json:"miniblockType,omitempty"`
	MiniBlockHash                     string                                                           `protobuf:"bytes,35,opt,name=MiniBlockHash,proto3" json:"miniblockHash,omitempty"`
	HyperblockNonce                   uint64                                                           `protobuf:"varint,36,opt,name=HyperblockNonce,proto3" json:"hyperblockNonce,omitempty"`
	HyperblockHash                    string                                                           `protobuf:"bytes,37,opt,name=HyperblockHash,proto3" json:"hyperblockHash,omitempty"`
	Timestamp                         int64                                                            `protobuf:"varint,38,opt,name=Timestamp,proto3" json:"timestamp,omitempty"`
	Receipt                           *ApiReceipt                                                      `protobuf:"bytes,39,opt,name=Receipt,proto3" json:"receipt,omitempty"`
	SmartContractResults              []*ApiSmartContractResult                                        `protobuf:"bytes,40,rep,name=SmartContractResults,proto3" json:"smartContractResults,omitempty"`
	Logs                              *ApiLogs                                                         `protobuf:"bytes,41,opt,name=Logs,proto3" json:"logs,omitempty"`
	Status                            github_com_multiversx_mx_chain_core_go_data_transaction.TxStatus `protobuf:"bytes,42,opt,name=Status,proto3,casttype=github.com/multiversx/mx-chain-core-go/data/transaction.TxStatus" json:"status,omitempty"`
	Tokens                            []string                                                         `protobuf:"bytes,43,rep,name=Tokens,proto3" json:"tokens,omitempty"`
	ESDTValues                        []string                                                         `protobuf:"bytes,44,rep,name=ESDTValues,proto3" json:"esdtValues,omitempty"`
	Receivers                         []string                                                         `protobuf:"bytes,45,rep,name=Receivers,proto3" json:"receivers,omitempty"`
	ReceiversShardIDs                 []uint32                                                         `protobuf:"varint,46,rep,packed,name=ReceiversShardIDs,proto3" json:"receiversShardIDs,omitempty"`
	Operation                         string                                                           `protobuf:"bytes,47,opt,name=Operation,proto3" json:"operation,omitempty"`
	Function                          string                                                           `protobuf:"bytes,48,opt,name=Function,proto3" json:"function,omitempty"`
	InitiallyPaidFee                  string                                                           `protobuf:"bytes,49,opt,name=InitiallyPaidFee,proto3" json:"initiallyPaidFee,omitempty"`
	Fee                               string                                                           `protobuf:"bytes,50,opt,name=Fee,proto3" json:"fee,omitempty"`
	IsRelayed                         bool                                                             `protobuf:"varint,51,opt,name=IsRelayed,proto3" json:"isRelayed,omitempty"`
	IsRefund                          bool                                                             `protobuf:"varint,52,opt,name=IsRefund,proto3" json:"isRefund,omitempty"`
	CallType                          string                                                           `protobuf:"bytes,53,opt,name=CallType,proto3" json:"callType,omitempty"`
	RelayerAddress                    string                                                           `protobuf:"bytes,54,opt,name=RelayerAddress,proto3" json:"relayerAddress,omitempty"`
	RelayedValue                      string                                                           `protobuf:"bytes,55,opt,name=RelayedValue,proto3" json:"relayedValue,omitempty"`
	ChainID                           string                                                           `protobuf:"bytes,56,opt,name=ChainID,proto3" json:"chainID,omitempty"`
	Version                           uint32                                                           `protobuf:"varint,57,opt,name=Version,proto3" json:"version,omitempty"`
	Options                           uint32                                                           `protobuf:"varint,58,opt,name=Options,proto3" json:"options"`
	GuardianAddr                      string                                                           `protobuf:"bytes,59,opt,name=GuardianAddr,proto3" json:"guardian,omitempty"`
	GuardianSignature                 string                                                           `protobuf:"bytes,60,opt,name=GuardianSignature,proto3" json:"guardianSignature,omitempty"`
}

func (m *ApiTransactionResult) Reset()      { *m = ApiTransactionResult{} }
func (*ApiTransactionResult) ProtoMessage() {}
func (*ApiTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{4}
}
func (m *ApiTransactionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiTransactionResult.Merge(m, src)
}
func (m *ApiTransactionResult) XXX_Size() int {
	return m.Size()
}
func (m *ApiTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ApiTransactionResult proto.InternalMessageInfo

func (m *ApiTransactionResult) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApiTransactionResult) GetProcessingTypeOnSource() string {
	if m != nil {
		return m.ProcessingTypeOnSource
	}
	return ""
}

func (m *ApiTransactionResult) GetProcessingTypeOnDestination() string {
	if m != nil {
		return m.ProcessingTypeOnDestination
	}
	return ""
}

func (m *ApiTransactionResult) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ApiTransactionResult) GetHashBytes() []byte {
	if m != nil {
		return m.HashBytes
	}
	return nil
}

func (m *ApiTransactionResult) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ApiTransactionResult) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ApiTransactionResult) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ApiTransactionResult) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ApiTransactionResult) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *ApiTransactionResult) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ApiTransactionResult) GetSenderUsername() []byte {
	if m != nil {
		return m.SenderUsername
	}
	return nil
}

func (m *ApiTransactionResult) GetReceiverUsername() []byte {
	if m != nil {
		return m.ReceiverUsername
	}
	return nil
}

func (m *ApiTransactionResult) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ApiTransactionResult) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ApiTransactionResult) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ApiTransactionResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ApiTransactionResult) GetCodeMetadata() []byte {
	if m != nil {
		return m.CodeMetadata
	}
	return nil
}

func (m *ApiTransactionResult) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ApiTransactionResult) GetPreviousTransactionHash() string {
	if m != nil {
		return m.PreviousTransactionHash
	}
	return ""
}

func (m *ApiTransactionResult) GetOriginalTransactionHash() string {
	if m != nil {
		return m.OriginalTransactionHash
	}
	return ""
}

func (m *ApiTransactionResult) GetReturnMessage() string {
	if m != nil {
		return m.ReturnMessage
	}
	return ""
}

func (m *ApiTransactionResult) GetOriginalSender() string {
	if m != nil {
		return m.OriginalSender
	}
	return ""
}

func (m *ApiTransactionResult) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ApiTransactionResult) GetSourceShard() uint32 {
	if m != nil {
		return m.SourceShard
	}
	return 0
}

func (m *ApiTransactionResult) GetDestinationShard() uint32 {
	if m != nil {
		return m.DestinationShard
	}
	return 0
}

func (m *ApiTransactionResult) GetBlockNonce() uint64 {
	if m != nil {
		return m.BlockNonce
	}
	return 0
}

func (m *ApiTransactionResult) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *ApiTransactionResult) GetNotarizedAtSourceInMetaNonce() uint64 {
	if m != nil {
		return m.NotarizedAtSourceInMetaNonce
	}
	return 0
}

func (m *ApiTransactionResult) GetNotarizedAtSourceInMetaHash() string {
	if m != nil {
		return m.NotarizedAtSourceInMetaHash
	}
	return ""
}

func (m *ApiTransactionResult) GetNotarizedAtDestinationInMetaNonce() uint64 {
	if m != nil {
		return m.NotarizedAtDestinationInMetaNonce
	}
	return 0
}

func (m *ApiTransactionResult) GetNotarizedAtDestinationInMetaHash() string {
	if m != nil {
		return m.NotarizedAtDestinationInMetaHash
	}
	return ""
}

func (m *ApiTransactionResult) GetMiniBlockType() string {
	if m != nil {
		return m.MiniBlockType
	}
	return ""
}

func (m *ApiTransactionResult) GetMiniBlockHash() string {
	if m != nil {
		return m.MiniBlockHash
	}
	return ""
}

func (m *ApiTransactionResult) GetHyperblockNonce() uint64 {
	if m != nil {
		return m.HyperblockNonce
	}
	return 0
}

func (m *ApiTransactionResult) GetHyperblockHash() string {
	if m != nil {
		return m.HyperblockHash
	}
	return ""
}

func (m *ApiTransactionResult) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ApiTransactionResult) GetReceipt() *ApiReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *ApiTransactionResult) GetSmartContractResults() []*ApiSmartContractResult {
	if m != nil {
		return m.SmartContractResults
	}
	return nil
}

func (m *ApiTransactionResult) GetLogs() *ApiLogs {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ApiTransactionResult) GetStatus() github_com_multiversx_mx_chain_core_go_data_transaction.TxStatus {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ApiTransactionResult) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *ApiTransactionResult) GetESDTValues() []string {
	if m != nil {
		return m.ESDTValues
	}
	return nil
}

func (m *ApiTransactionResult) GetReceivers() []string {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *ApiTransactionResult) GetReceiversShardIDs() []uint32 {
	if m != nil {
		return m.ReceiversShardIDs
	}
	return nil
}

func (m *ApiTransactionResult) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ApiTransactionResult) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ApiTransactionResult) GetInitiallyPaidFee() string {
	if m != nil {
		return m.InitiallyPaidFee
	}
	return ""
}

func (m *ApiTransactionResult) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *ApiTransactionResult) GetIsRelayed() bool {
	if m != nil {
		return m.IsRelayed
	}
	return false
}

func (m *ApiTransactionResult) GetIsRefund() bool {
	if m != nil {
		return m.IsRefund
	}
	return false
}

func (m *ApiTransactionResult) GetCallType() string {
	if m != nil {
		return m.CallType
	}
	return ""
}

func (m *ApiTransactionResult) GetRelayerAddress() string {
	if m != nil {
		return m.RelayerAddress
	}
	return ""
}

func (m *ApiTransactionResult) GetRelayedValue() string {
	if m != nil {
		return m.RelayedValue
	}
	return ""
}

func (m *ApiTransactionResult) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ApiTransactionResult) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ApiTransactionResult) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

func (m *ApiTransactionResult) GetGuardianAddr() string {
	if m != nil {
		return m.GuardianAddr
	}
	return ""
}

func (m *ApiTransactionResult) GetGuardianSignature() string {
	if m != nil {
		return m.GuardianSignature
	}
	return ""
}

type ApiReceipt struct {
	Value   *math_big.Int `protobuf:"bytes,1,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"value"`
	SndAddr string        `protobuf:"bytes,2,opt,name=SndAddr,proto3" json:"sender"`
	Data    string        `protobuf:"bytes,3,opt,name=Data,proto3" json:"data,omitempty"`
	TxHash  string        `protobuf:"bytes,4,opt,name=TxHash,proto3" json:"txHash"`
}

func (m *ApiReceipt) Reset()      { *m = ApiReceipt{} }
func (*ApiReceipt) ProtoMessage() {}
func (*ApiReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{5}
}
func (m *ApiReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiReceipt.Merge(m, src)
}
func (m *ApiReceipt) XXX_Size() int {
	return m.Size()
}
func (m *ApiReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_ApiReceipt proto.InternalMessageInfo

func (m *ApiReceipt) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ApiReceipt) GetSndAddr() string {
	if m != nil {
		return m.SndAddr
	}
	return ""
}

func (m *ApiReceipt) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ApiReceipt) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type ApiSmartContractResult struct {
	Hash              string                                                  `protobuf:"bytes,1,opt,name=Hash,proto3" json:"hash,omitempty"`
	Nonce             uint64                                                  `protobuf:"varint,2,opt,name=Nonce,proto3" json:"nonce"`
	Value             *math_big.Int                                           `protobuf:"bytes,3,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"value"`
	RcvAddr           string                                                  `protobuf:"bytes,4,opt,name=RcvAddr,proto3" json:"receiver"`
	SndAddr           string                                                  `protobuf:"bytes,5,opt,name=SndAddr,proto3" json:"sender"`
	RelayerAddr       string                                                  `protobuf:"bytes,6,opt,name=RelayerAddr,proto3" json:"relayerAddress,omitempty"`
	RelayedValue      *math_big.Int                                           `protobuf:"bytes,7,opt,name=RelayedValue,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"relayedValue,omitempty"`
	Code              string                                                  `protobuf:"bytes,8,opt,name=Code,proto3" json:"code,omitempty"`
	Data              string                                                  `protobuf:"bytes,9,opt,name=Data,proto3" json:"data,omitempty"`
	PrevTxHash        string                                                  `protobuf:"bytes,10,opt,name=PrevTxHash,proto3" json:"prevTxHash"`
	OriginalTxHash    string                                                  `protobuf:"bytes,11,opt,name=OriginalTxHash,proto3" json:"originalTxHash"`
	GasLimit          uint64                                                  `protobuf:"varint,12,opt,name=GasLimit,proto3" json:"gasLimit"`
	GasPrice          uint64                                                  `protobuf:"varint,13,opt,name=GasPrice,proto3" json:"gasPrice"`
	CallType          github_com_multiversx_mx_chain_core_go_data_vm.CallType `protobuf:"varint,14,opt,name=CallType,proto3,casttype=github.com/multiversx/mx-chain-core-go/data/vm.CallType" json:"callType"`
	CodeMetadata      string                                                  `protobuf:"bytes,15,opt,name=CodeMetadata,proto3" json:"codeMetadata,omitempty"`
	ReturnMessage     string                                                  `protobuf:"bytes,16,opt,name=ReturnMessage,proto3" json:"returnMessage,omitempty"`
	OriginalSender    string                                                  `protobuf:"bytes,17,opt,name=OriginalSender,proto3" json:"originalSender,omitempty"`
	Logs              *ApiLogs                                                `protobuf:"bytes,18,opt,name=Logs,proto3" json:"logs,omitempty"`
	Tokens            []string                                                `protobuf:"bytes,19,rep,name=Tokens,proto3" json:"tokens,omitempty"`
	ESDTValues        []string                                                `protobuf:"bytes,20,rep,name=ESDTValues,proto3" json:"esdtValues,omitempty"`
	Receivers         []string                                                `protobuf:"bytes,21,rep,name=Receivers,proto3" json:"receivers,omitempty"`
	ReceiversShardIDs []uint32                                                `protobuf:"varint,22,rep,packed,name=ReceiversShardIDs,proto3" json:"receiversShardIDs,omitempty"`
	Operation         string                                                  `protobuf:"bytes,23,opt,name=Operation,proto3" json:"operation,omitempty"`
	Function          string                                                  `protobuf:"bytes,24,opt,name=Function,proto3" json:"function,omitempty"`
	IsRelayed         bool                                                    `protobuf:"varint,25,opt,name=IsRelayed,proto3" json:"isRelayed,omitempty"`
	IsRefund          bool                                                    `protobuf:"varint,26,opt,name=IsRefund,proto3" json:"isRefund,omitempty"`
}

func (m *ApiSmartContractResult) Reset()      { *m = ApiSmartContractResult{} }
func (*ApiSmartContractResult) ProtoMessage() {}
func (*ApiSmartContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{6}
}
func (m *ApiSmartContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiSmartContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiSmartContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiSmartContractResult.Merge(m, src)
}
func (m *ApiSmartContractResult) XXX_Size() int {
	return m.Size()
}
func (m *ApiSmartContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiSmartContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_ApiSmartContractResult proto.InternalMessageInfo

func (m *ApiSmartContractResult) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ApiSmartContractResult) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ApiSmartContractResult) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ApiSmartContractResult) GetRcvAddr() string {
	if m != nil {
		return m.RcvAddr
	}
	return ""
}

func (m *ApiSmartContractResult) GetSndAddr() string {
	if m != nil {
		return m.SndAddr
	}
	return ""
}

func (m *ApiSmartContractResult) GetRelayerAddr() string {
	if m != nil {
		return m.RelayerAddr
	}
	return ""
}

func (m *ApiSmartContractResult) GetRelayedValue() *math_big.Int {
	if m != nil {
		return m.RelayedValue
	}
	return nil
}

func (m *ApiSmartContractResult) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ApiSmartContractResult) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ApiSmartContractResult) GetPrevTxHash() string {
	if m != nil {
		return m.PrevTxHash
	}
	return ""
}

func (m *ApiSmartContractResult) GetOriginalTxHash() string {
	if m != nil {
		return m.OriginalTxHash
	}
	return ""
}

func (m *ApiSmartContractResult) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ApiSmartContractResult) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ApiSmartContractResult) GetCallType() github_com_multiversx_mx_chain_core_go_data_vm.CallType {
	if m != nil {
		return m.CallType
	}
	return 0
}

func (m *ApiSmartContractResult) GetCodeMetadata() string {
	if m != nil {
		return m.CodeMetadata
	}
	return ""
}

func (m *ApiSmartContractResult) GetReturnMessage() string {
	if m != nil {
		return m.ReturnMessage
	}
	return ""
}

func (m *ApiSmartContractResult) GetOriginalSender() string {
	if m != nil {
		return m.OriginalSender
	}
	return ""
}

func (m *ApiSmartContractResult) GetLogs() *ApiLogs {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ApiSmartContractResult) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *ApiSmartContractResult) GetESDTValues() []string {
	if m != nil {
		return m.ESDTValues
	}
	return nil
}

func (m *ApiSmartContractResult) GetReceivers() []string {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *ApiSmartContractResult) GetReceiversShardIDs() []uint32 {
	if m != nil {
		return m.ReceiversShardIDs
	}
	return nil
}

func (m *ApiSmartContractResult) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ApiSmartContractResult) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ApiSmartContractResult) GetIsRelayed() bool {
	if m != nil {
		return m.IsRelayed
	}
	return false
}

func (m *ApiSmartContractResult) GetIsRefund() bool {
	if m != nil {
		return m.IsRefund
	}
	return false
}

type ApiLogs struct {
	Address string    `protobuf:"bytes,1,opt,name=Address,proto3" json:"address"`
	Events  []*Events `protobuf:"bytes,2,rep,name=Events,proto3" json:"events"`
}

func (m *ApiLogs) Reset()      { *m = ApiLogs{} }
func (*ApiLogs) ProtoMessage() {}
func (*ApiLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{7}
}
func (m *ApiLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiLogs.Merge(m, src)
}
func (m *ApiLogs) XXX_Size() int {
	return m.Size()
}
func (m *ApiLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiLogs.DiscardUnknown(m)
}

var xxx_messageInfo_ApiLogs proto.InternalMessageInfo

func (m *ApiLogs) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ApiLogs) GetEvents() []*Events {
	if m != nil {
		return m.Events
	}
	return nil
}

type Events struct {
	Address        string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"address"`
	Identifier     string   `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"identifier"`
	Topics         [][]byte `protobuf:"bytes,3,rep,name=Topics,proto3" json:"topics"`
	Data           []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"data"`
	AdditionalData [][]byte `protobuf:"bytes,5,rep,name=AdditionalData,proto3" json:"additionalData"`
}

func (m *Events) Reset()      { *m = Events{} }
func (*Events) ProtoMessage() {}
func (*Events) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{8}
}
func (m *Events) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Events) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Events) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Events.Merge(m, src)
}
func (m *Events) XXX_Size() int {
	return m.Size()
}
func (m *Events) XXX_DiscardUnknown() {
	xxx_messageInfo_Events.DiscardUnknown(m)
}

var xxx_messageInfo_Events proto.InternalMessageInfo

func (m *Events) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Events) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Events) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Events) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Events) GetAdditionalData() [][]byte {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type NotarizedBlock struct {
	Hash            string                           `protobuf:"bytes,1,opt,name=Hash,proto3" json:"hash"`
	Nonce           uint64                           `protobuf:"varint,2,opt,name=Nonce,proto3" json:"nonce"`
	Round           uint64                           `protobuf:"varint,3,opt,name=Round,proto3" json:"round"`
	Shard           uint32                           `protobuf:"varint,4,opt,name=Shard,proto3" json:"shard"`
	RootHash        string                           `protobuf:"bytes,5,opt,name=RootHash,proto3" json:"rootHash"`
	MiniBlockHashes []string                         `protobuf:"bytes,6,rep,name=MiniBlockHashes,proto3" json:"miniBlockHashes,omitempty"`
	AlteredAccounts []*alteredAccount.AlteredAccount `protobuf:"bytes,7,rep,name=AlteredAccounts,proto3" json:"alteredAccounts,omitempty"`
}

func (m *NotarizedBlock) Reset()      { *m = NotarizedBlock{} }
func (*NotarizedBlock) ProtoMessage() {}
func (*NotarizedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a8d80aca7717b1, []int{9}
}
func (m *NotarizedBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotarizedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NotarizedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotarizedBlock.Merge(m, src)
}
func (m *NotarizedBlock) XXX_Size() int {
	return m.Size()
}
func (m *NotarizedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NotarizedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NotarizedBlock proto.InternalMessageInfo

func (m *NotarizedBlock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *NotarizedBlock) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *NotarizedBlock) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NotarizedBlock) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *NotarizedBlock) GetRootHash() string {
	if m != nil {
		return m.RootHash
	}
	return ""
}

func (m *NotarizedBlock) GetMiniBlockHashes() []string {
	if m != nil {
		return m.MiniBlockHashes
	}
	return nil
}

func (m *NotarizedBlock) GetAlteredAccounts() []*alteredAccount.AlteredAccount {
	if m != nil {
		return m.AlteredAccounts
	}
	return nil
}

func init() {
	proto.RegisterType((*Hyperblock)(nil), "proto.Hyperblock")
	proto.RegisterType((*EpochStartInfo)(nil), "proto.EpochStartInfo")
	proto.RegisterType((*EpochStartShardData)(nil), "proto.EpochStartShardData")
	proto.RegisterType((*MiniBlock)(nil), "proto.MiniBlock")
	proto.RegisterType((*ApiTransactionResult)(nil), "proto.ApiTransactionResult")
	proto.RegisterType((*ApiReceipt)(nil), "proto.ApiReceipt")
	proto.RegisterType((*ApiSmartContractResult)(nil), "proto.ApiSmartContractResult")
	proto.RegisterType((*ApiLogs)(nil), "proto.ApiLogs")
	proto.RegisterType((*Events)(nil), "proto.Events")
	proto.RegisterType((*NotarizedBlock)(nil), "proto.NotarizedBlock")
}

func init() { proto.RegisterFile("apiHyperBlock.proto", fileDescriptor_c6a8d80aca7717b1) }

var fileDescriptor_c6a8d80aca7717b1 = []byte{
	// 2952 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x4b, 0x73, 0xdc, 0xc6,
	0xf1, 0xd7, 0x8a, 0x8f, 0xe5, 0x0e, 0xdf, 0x43, 0x8a, 0x84, 0x29, 0x69, 0x41, 0xaf, 0x2c, 0xfd,
	0x29, 0xdb, 0x22, 0xff, 0x96, 0xe3, 0x47, 0xe4, 0xc4, 0x65, 0x2e, 0x29, 0x52, 0x4c, 0x59, 0x12,
	0x03, 0xd2, 0xce, 0xc3, 0xae, 0xa4, 0x40, 0x60, 0xb8, 0x3b, 0xe5, 0x5d, 0x00, 0xc1, 0xcc, 0xd2,
	0xa4, 0xab, 0x52, 0x95, 0x5b, 0xae, 0xb9, 0xe5, 0x94, 0x7b, 0x2a, 0x9f, 0x20, 0x55, 0xf9, 0x02,
	0x39, 0xfa, 0xe8, 0x4b, 0x90, 0x98, 0xce, 0xc1, 0x85, 0x5c, 0x7c, 0x8d, 0x4f, 0xa9, 0xe9, 0x01,
	0x76, 0x66, 0x40, 0x90, 0x2b, 0x2a, 0xce, 0x89, 0x44, 0xf7, 0xaf, 0x7b, 0xd0, 0xf3, 0xe8, 0xfe,
	0xf5, 0x60, 0xd1, 0x9c, 0x1b, 0xd1, 0x47, 0x27, 0x11, 0x89, 0x9b, 0x9d, 0xd0, 0xfb, 0x64, 0x35,
	0x8a, 0x43, 0x1e, 0xe2, 0x11, 0xf8, 0xb3, 0x74, 0xaf, 0x45, 0x79, 0xbb, 0x77, 0xb0, 0xea, 0x85,
	0xdd, 0xb5, 0x56, 0xd8, 0x0a, 0xd7, 0x40, 0x7c, 0xd0, 0x3b, 0x84, 0x27, 0x78, 0x80, 0xff, 0xa4,
	0xd5, 0xd2, 0x53, 0x0d, 0xde, 0xed, 0x75, 0x38, 0x3d, 0x22, 0x31, 0x3b, 0x5e, 0xeb, 0x1e, 0xdf,
	0xf3, 0xda, 0x2e, 0x0d, 0xee, 0x79, 0x61, 0x4c, 0xee, 0xb5, 0xc2, 0x35, 0xdf, 0xe5, 0xee, 0x9a,
	0xdb, 0xe1, 0x24, 0x26, 0xfe, 0xba, 0xe7, 0x85, 0xbd, 0x80, 0x17, 0x1e, 0xa5, 0xc3, 0xc6, 0x9f,
	0xc7, 0x10, 0x82, 0x77, 0x3b, 0x10, 0xef, 0x86, 0x6f, 0xa0, 0xe1, 0x47, 0x2e, 0x6b, 0x5b, 0x95,
	0xe5, 0xca, 0x4a, 0xad, 0x39, 0x96, 0x26, 0xf6, 0x70, 0xdb, 0x65, 0x6d, 0x07, 0xa4, 0xf8, 0x2d,
	0x34, 0xb9, 0x1b, 0x93, 0x23, 0x08, 0x03, 0x60, 0x57, 0x01, 0x36, 0x9b, 0x26, 0xf6, 0x64, 0xa4,
	0x2b, 0x1c, 0x13, 0x27, 0x0c, 0xf7, 0xb8, 0xcb, 0x89, 0x13, 0x86, 0x1c, 0x0c, 0x87, 0x94, 0x21,
	0xd3, 0x15, 0x8e, 0x89, 0xc3, 0x36, 0x1a, 0x79, 0x12, 0x06, 0x1e, 0xb1, 0x86, 0x97, 0x2b, 0x2b,
	0xc3, 0xcd, 0x5a, 0x9a, 0xd8, 0x23, 0x81, 0x10, 0x38, 0x52, 0x2e, 0x00, 0x4e, 0xd8, 0x0b, 0x7c,
	0x6b, 0x44, 0x01, 0x62, 0x21, 0x70, 0xa4, 0x5c, 0x00, 0x1e, 0x46, 0xa1, 0xd7, 0xb6, 0x46, 0x97,
	0x2b, 0x2b, 0x93, 0x12, 0x40, 0x84, 0xc0, 0x91, 0x72, 0xdc, 0x40, 0xa3, 0x4f, 0x7a, 0xdd, 0xfd,
	0x63, 0x66, 0x55, 0x01, 0x81, 0xd2, 0xc4, 0x1e, 0x0d, 0x40, 0xe2, 0x64, 0x1a, 0xbc, 0x8d, 0xa6,
	0xd7, 0x3d, 0xaf, 0xd7, 0xed, 0x75, 0x5c, 0x4e, 0xfc, 0x2d, 0x42, 0x98, 0x35, 0x06, 0x11, 0xdc,
	0x4c, 0x13, 0xfb, 0x05, 0xd7, 0x54, 0xbd, 0x1a, 0x76, 0x29, 0x27, 0xdd, 0x88, 0x9f, 0x38, 0x45,
	0x2b, 0xbc, 0x8e, 0x26, 0x37, 0xc9, 0x11, 0xe9, 0x84, 0x11, 0x89, 0xc1, 0x4d, 0x0d, 0xdc, 0x5c,
	0x4f, 0x13, 0x7b, 0xd1, 0xd7, 0x15, 0x9a, 0x13, 0xd3, 0x02, 0x7f, 0x8c, 0x16, 0x0a, 0x5e, 0x77,
	0x02, 0x19, 0x21, 0x02, 0x5f, 0x2f, 0xa5, 0x89, 0xbd, 0xec, 0x96, 0x22, 0x34, 0xa7, 0xe7, 0xf8,
	0xc0, 0x1f, 0xa2, 0x79, 0x63, 0xb8, 0xdc, 0xf7, 0x38, 0xf8, 0x6e, 0xa4, 0x89, 0x5d, 0xf7, 0x4b,
	0xf4, 0x9a, 0xe7, 0x52, 0x7b, 0xfc, 0x06, 0xaa, 0xed, 0xd3, 0x2e, 0x61, 0xdc, 0xed, 0x46, 0xd6,
	0x04, 0xac, 0xd5, 0x62, 0x9a, 0xd8, 0x73, 0x3c, 0x17, 0x6a, 0x1e, 0x14, 0x12, 0x7f, 0x84, 0xa6,
	0xc0, 0x7e, 0x8f, 0xbb, 0x31, 0xdf, 0x09, 0x0e, 0x43, 0x6b, 0x72, 0xb9, 0xb2, 0x32, 0x7e, 0xff,
	0x9a, 0xdc, 0xbe, 0xab, 0xa6, 0xb2, 0x79, 0x23, 0x4d, 0x6c, 0x8b, 0x18, 0x32, 0xcd, 0x6f, 0xc1,
	0x15, 0x8e, 0xd1, 0xbc, 0x92, 0xec, 0xb5, 0xdd, 0xd8, 0x67, 0x9b, 0x2e, 0x77, 0xad, 0xa9, 0xe5,
	0xa1, 0x95, 0xf1, 0xfb, 0x4b, 0x67, 0x86, 0x00, 0x88, 0x40, 0xc8, 0x79, 0x20, 0x25, 0xb6, 0xfa,
	0x3c, 0x94, 0xf9, 0xc6, 0x8f, 0xd0, 0x38, 0x3c, 0xc1, 0xd9, 0x60, 0xd6, 0x34, 0x0c, 0x95, 0x47,
	0xf3, 0x24, 0xe4, 0x6e, 0x4c, 0x3f, 0x23, 0x52, 0xdb, 0x9c, 0x4e, 0x13, 0x7b, 0x9c, 0x29, 0xb4,
	0xa3, 0x9b, 0xe2, 0x1f, 0xa3, 0x89, 0xfd, 0xd8, 0x0d, 0x98, 0xeb, 0x71, 0x1a, 0x06, 0xcc, 0x9a,
	0x01, 0x57, 0xd7, 0x33, 0x57, 0xeb, 0x11, 0xd5, 0xb4, 0x0e, 0x61, 0xbd, 0x0e, 0x6f, 0xce, 0xa4,
	0x89, 0x3d, 0xc1, 0x35, 0x23, 0xc7, 0x70, 0x81, 0x5f, 0x45, 0xa3, 0xe2, 0xf8, 0xf5, 0x98, 0x35,
	0x0b, 0xcb, 0x3d, 0x9f, 0x26, 0xf6, 0x0c, 0x03, 0x89, 0x16, 0x58, 0x86, 0x69, 0xfc, 0x65, 0xb8,
	0xb8, 0x38, 0xf8, 0x35, 0x34, 0xbe, 0x1f, 0x72, 0xb7, 0xb3, 0xd7, 0x8b, 0xa2, 0xce, 0x49, 0x96,
	0x45, 0x20, 0x0c, 0xae, 0xc4, 0x8e, 0x8e, 0xc1, 0x1b, 0x68, 0x16, 0x1e, 0xf7, 0xc3, 0x4d, 0xca,
	0x78, 0x4c, 0x0f, 0x7a, 0x9c, 0x64, 0x79, 0xe5, 0x5a, 0x9a, 0xd8, 0xb3, 0xbc, 0xa8, 0x74, 0xce,
	0xe2, 0xf1, 0x7b, 0x68, 0x06, 0x84, 0x4f, 0xc8, 0xa7, 0x9d, 0x93, 0xc7, 0x34, 0xe0, 0xc4, 0xcf,
	0x52, 0x0c, 0x84, 0xc0, 0x0b, 0x3a, 0xe7, 0x0c, 0x1a, 0xff, 0x10, 0x4d, 0x3b, 0xe4, 0x53, 0xb1,
	0x4c, 0xbb, 0x59, 0x9e, 0x86, 0x94, 0x53, 0x6b, 0xce, 0xa5, 0x89, 0x3d, 0x1d, 0x9b, 0x2a, 0xa7,
	0x88, 0xc5, 0x11, 0x5a, 0xce, 0x44, 0x5b, 0x61, 0xbc, 0x2b, 0x56, 0xc0, 0x0b, 0x3b, 0x7b, 0x3d,
	0xc6, 0x5d, 0x1a, 0xb8, 0x07, 0xb4, 0x43, 0xf9, 0x09, 0x64, 0xa8, 0xec, 0x78, 0xc6, 0x03, 0xb0,
	0xce, 0x40, 0x6f, 0xf8, 0x15, 0x54, 0x7b, 0x12, 0xfa, 0x64, 0x37, 0xa6, 0x1e, 0x81, 0xdc, 0x56,
	0x6b, 0x4e, 0xa6, 0x89, 0x5d, 0x0b, 0x72, 0xa1, 0xa3, 0xf4, 0x78, 0x07, 0xcd, 0x89, 0x84, 0xac,
	0x56, 0x4b, 0xe6, 0xcc, 0xaa, 0x3a, 0x87, 0xd1, 0x59, 0xb5, 0x53, 0x66, 0x83, 0xb7, 0x10, 0x36,
	0xc5, 0x90, 0xcf, 0x65, 0x36, 0x5c, 0x48, 0x13, 0x1b, 0x47, 0x67, 0xb4, 0x4e, 0x89, 0x45, 0xe3,
	0xf7, 0x23, 0x68, 0xae, 0xe4, 0x68, 0xe1, 0x5b, 0xa8, 0x0a, 0x0f, 0x3b, 0x9b, 0xb0, 0x7d, 0xb2,
	0x8c, 0x0d, 0xa7, 0xc0, 0xc9, 0x35, 0x2a, 0xa9, 0x5f, 0x3d, 0x27, 0xa9, 0xdf, 0xcd, 0xcb, 0xc2,
	0x10, 0x84, 0x28, 0x17, 0x51, 0x08, 0xb4, 0x7d, 0x9c, 0x15, 0x88, 0xbb, 0x66, 0x89, 0x01, 0x28,
	0x94, 0x18, 0x1d, 0x2a, 0x8b, 0xcd, 0xdb, 0x08, 0x3d, 0x22, 0xae, 0x4f, 0x62, 0x88, 0x59, 0xae,
	0xa7, 0x95, 0x26, 0xf6, 0x7c, 0xbb, 0x2f, 0xd5, 0x8c, 0x34, 0x2c, 0xbe, 0x8f, 0xc6, 0xfa, 0xb5,
	0x6f, 0x54, 0xcd, 0x55, 0x9c, 0xc9, 0x34, 0xab, 0x3e, 0x0e, 0x3f, 0x46, 0xb3, 0x7b, 0x5e, 0x9b,
	0xf8, 0xbd, 0x0e, 0xf1, 0xfb, 0xc6, 0x55, 0x30, 0xb6, 0xd3, 0xc4, 0xbe, 0xce, 0x8a, 0x4a, 0xcd,
	0xcb, 0x59, 0x4b, 0xfc, 0x33, 0x74, 0x6d, 0x8b, 0xc6, 0x8c, 0xef, 0x92, 0xc0, 0xa7, 0x41, 0xeb,
	0x31, 0xe1, 0xae, 0xdc, 0xe7, 0x72, 0xed, 0x6e, 0xa5, 0x89, 0x6d, 0x1f, 0x96, 0x01, 0x34, 0xb7,
	0xe5, 0x1e, 0x84, 0xeb, 0xf7, 0x5d, 0xc6, 0xb7, 0x68, 0x40, 0x59, 0x9b, 0xf8, 0xca, 0x75, 0x4d,
	0xb9, 0xee, 0x94, 0x01, 0x74, 0xd7, 0xa5, 0x1e, 0xf0, 0xaf, 0xd0, 0x62, 0x3e, 0x1c, 0x0d, 0xa8,
	0x64, 0x14, 0x30, 0xad, 0xcc, 0x42, 0x90, 0xf0, 0x66, 0xb2, 0x84, 0xd7, 0x57, 0x37, 0x6f, 0xa7,
	0x89, 0xfd, 0x62, 0x54, 0x6e, 0xa4, 0x0d, 0x78, 0x9e, 0xdf, 0xc6, 0xbf, 0x47, 0x50, 0xad, 0x2f,
	0x1c, 0xc0, 0x88, 0x6e, 0xa0, 0xe1, 0xfd, 0x93, 0x28, 0x4f, 0x58, 0xa0, 0xe5, 0x27, 0x11, 0x71,
	0x40, 0x8a, 0x37, 0xd1, 0xd4, 0x6e, 0x1c, 0x7a, 0x84, 0x31, 0x1a, 0xb4, 0x00, 0x27, 0x93, 0x12,
	0x94, 0xa9, 0xc8, 0xd0, 0xe8, 0x65, 0xca, 0xb4, 0x11, 0xfb, 0x60, 0x23, 0x0c, 0x18, 0x8f, 0x7b,
	0x90, 0xa6, 0x81, 0x20, 0x65, 0xc9, 0x09, 0xf6, 0x81, 0x57, 0x54, 0xea, 0xfb, 0xe0, 0x8c, 0x25,
	0xfe, 0x09, 0x9a, 0x67, 0x5b, 0x71, 0xd8, 0x75, 0x88, 0x47, 0x68, 0xc4, 0xd9, 0x1e, 0x0f, 0x63,
	0xb7, 0x45, 0x60, 0x3b, 0x8f, 0xc9, 0xb5, 0xa2, 0x65, 0x00, 0xbd, 0xb4, 0x95, 0xe9, 0x45, 0xf2,
	0xdf, 0x0b, 0x7b, 0xb1, 0x47, 0xe0, 0x94, 0x66, 0x7c, 0x4b, 0xd6, 0x30, 0x25, 0x76, 0x74, 0x8c,
	0xc8, 0xdb, 0x9b, 0x84, 0x71, 0x1a, 0xb8, 0xf0, 0x7e, 0x60, 0x27, 0x59, 0x18, 0xe4, 0x6d, 0xbf,
	0xa0, 0x73, 0xce, 0xa0, 0xf1, 0x47, 0x85, 0x2a, 0x38, 0x36, 0xb8, 0x0a, 0x2e, 0xa5, 0x89, 0xbd,
	0xa0, 0x57, 0x41, 0x2d, 0x32, 0xb3, 0x1e, 0x3e, 0x44, 0x63, 0x79, 0x90, 0x56, 0x0d, 0x1c, 0xcf,
	0x2a, 0xc7, 0x99, 0x26, 0x3b, 0xc8, 0x19, 0xcc, 0x38, 0xc8, 0x99, 0x0c, 0x7f, 0x80, 0x16, 0x77,
	0x02, 0x9f, 0x1c, 0x3f, 0x3d, 0x84, 0xe3, 0xb3, 0x7f, 0x9c, 0x2d, 0x30, 0xf1, 0x81, 0xb2, 0x8d,
	0x48, 0xfa, 0x47, 0xcb, 0x21, 0xce, 0x79, 0xb6, 0xd8, 0x41, 0x0b, 0x99, 0x4a, 0x1c, 0x1d, 0xdd,
	0xeb, 0x38, 0x78, 0x85, 0x38, 0x69, 0x29, 0xc2, 0x39, 0xc7, 0xb2, 0xf1, 0xaf, 0x9b, 0x68, 0xbe,
	0x6c, 0xd2, 0x06, 0x6c, 0xf4, 0x8f, 0xd1, 0x82, 0xb9, 0x69, 0x9f, 0x06, 0x72, 0x99, 0xb3, 0x0d,
	0x0f, 0x45, 0x2f, 0x2a, 0x45, 0xe8, 0x9c, 0xb4, 0xdc, 0x07, 0xfe, 0x04, 0x5d, 0x2f, 0x6a, 0xb4,
	0x7d, 0x90, 0x1d, 0x85, 0xbb, 0x69, 0x62, 0xdf, 0x8e, 0xce, 0x87, 0x69, 0xe3, 0x5c, 0xe4, 0x0d,
	0xdf, 0xc9, 0xce, 0xbb, 0xcc, 0xee, 0x38, 0x4d, 0xec, 0xa9, 0xb6, 0x99, 0x5b, 0xe5, 0xc9, 0xbf,
	0x85, 0x6a, 0xe2, 0x6f, 0xf3, 0x84, 0x13, 0x06, 0x7b, 0x7d, 0xa2, 0x39, 0x92, 0x26, 0x76, 0xe5,
	0x9e, 0xa3, 0xe4, 0xaa, 0x7d, 0xa9, 0x0e, 0x6a, 0x5f, 0xc6, 0x06, 0xb5, 0x2f, 0xb5, 0xf3, 0x2b,
	0xdd, 0x87, 0x6e, 0xa7, 0x47, 0x32, 0xf6, 0x0f, 0xe5, 0xeb, 0x48, 0x08, 0xf4, 0xf2, 0x05, 0x08,
	0x28, 0x42, 0x62, 0x4f, 0x1e, 0x91, 0x38, 0xe3, 0xf3, 0x6a, 0xef, 0x1e, 0x91, 0xf8, 0xcc, 0xde,
	0x3d, 0x22, 0x31, 0x50, 0x42, 0x12, 0xf8, 0x24, 0x06, 0xd2, 0x9e, 0x53, 0x42, 0x90, 0x18, 0x94,
	0x10, 0x24, 0x22, 0xe1, 0xc9, 0xff, 0x3e, 0x60, 0x24, 0x0e, 0xdc, 0x2e, 0x01, 0xba, 0x3e, 0x21,
	0x13, 0x1e, 0x33, 0x34, 0x7a, 0xc2, 0x33, 0x6d, 0xf0, 0x8f, 0xd0, 0x4c, 0x3e, 0x7e, 0xdf, 0xcf,
	0x14, 0xf8, 0xa9, 0xa7, 0x89, 0xbd, 0x14, 0x17, 0x74, 0x9a, 0xa7, 0x33, 0x76, 0x22, 0xe6, 0x6d,
	0x97, 0x49, 0x96, 0x34, 0x0d, 0x73, 0x0c, 0x31, 0xb7, 0x32, 0x99, 0x1e, 0x73, 0x8e, 0xcb, 0x6c,
	0xde, 0xa7, 0x5d, 0xca, 0xad, 0x19, 0xc3, 0x06, 0x64, 0x05, 0x1b, 0x90, 0xe1, 0x35, 0x54, 0xdd,
	0x76, 0xd9, 0x07, 0xe2, 0xf4, 0xcd, 0x82, 0x09, 0x90, 0xd7, 0x96, 0x14, 0x69, 0x16, 0x39, 0x4a,
	0xec, 0x33, 0x68, 0x36, 0x30, 0x04, 0x06, 0xfb, 0xcc, 0x37, 0x1b, 0x08, 0xd0, 0xe3, 0x77, 0xd1,
	0xc4, 0x46, 0xe8, 0x13, 0x51, 0x11, 0x85, 0xde, 0x9a, 0x03, 0x3c, 0x9c, 0x6d, 0x4f, 0x93, 0xeb,
	0x39, 0x4c, 0xc7, 0x8b, 0x71, 0xc4, 0xb3, 0x35, 0xaf, 0xf6, 0xb3, 0xb0, 0xd3, 0xc7, 0x11, 0x7a,
	0xfc, 0x4b, 0xb4, 0x28, 0x58, 0x1a, 0x0d, 0x7b, 0x4c, 0x3b, 0xfd, 0x70, 0x14, 0xae, 0x81, 0xa9,
	0x2c, 0xab, 0xe5, 0x10, 0xa3, 0xac, 0x96, 0x43, 0xc4, 0x00, 0x4f, 0x63, 0xda, 0xa2, 0x81, 0xdb,
	0x29, 0x0e, 0xb0, 0xa0, 0x06, 0x08, 0xcb, 0x21, 0xfa, 0x00, 0xe7, 0x78, 0x11, 0xbd, 0xb5, 0x43,
	0x78, 0x2f, 0x0e, 0x1e, 0x13, 0xc6, 0x44, 0x45, 0x5b, 0x54, 0xbd, 0x75, 0xac, 0x2b, 0xf4, 0xde,
	0xda, 0xb0, 0x10, 0xfb, 0x37, 0xf7, 0x9e, 0xed, 0x7a, 0x4b, 0x15, 0xec, 0xd0, 0xd0, 0xe8, 0xfb,
	0xd7, 0xb4, 0x11, 0xbd, 0xee, 0x1e, 0x6d, 0x05, 0x2e, 0xef, 0xc5, 0xc4, 0x7a, 0x01, 0x1c, 0x00,
	0xc7, 0x66, 0xb9, 0x50, 0xef, 0x75, 0xfb, 0xc8, 0x62, 0xfd, 0x5c, 0x7a, 0xce, 0xfa, 0x79, 0xfd,
	0x52, 0xf5, 0xf3, 0x6d, 0x84, 0x80, 0xe7, 0xc8, 0x34, 0x75, 0x03, 0xb6, 0x2e, 0x50, 0xda, 0x83,
	0xbe, 0x54, 0xa7, 0xb4, 0x0a, 0x2b, 0xa2, 0x54, 0x17, 0x41, 0x37, 0x55, 0x94, 0x07, 0xb9, 0x50,
	0x8f, 0x52, 0x5d, 0x05, 0x05, 0xe8, 0x46, 0xbf, 0xcd, 0x5d, 0xe7, 0x32, 0x98, 0x9d, 0x40, 0x6c,
	0x57, 0xf9, 0x0a, 0x75, 0x78, 0x85, 0x97, 0xd3, 0xc4, 0xbe, 0x13, 0x5c, 0x80, 0xd3, 0x9c, 0x5f,
	0xe8, 0x4f, 0x14, 0x8f, 0x73, 0xf4, 0xf0, 0xe2, 0xb6, 0x2a, 0x1e, 0x17, 0xc0, 0xf4, 0xe2, 0x71,
	0x01, 0x0c, 0xff, 0x1a, 0xbd, 0xa8, 0xa9, 0xb5, 0xc9, 0xd6, 0x23, 0x5c, 0x86, 0x08, 0xd7, 0xd2,
	0xc4, 0x7e, 0x25, 0x18, 0x04, 0xd6, 0x06, 0x1e, 0xec, 0x19, 0x7f, 0x86, 0x96, 0x2f, 0x02, 0x41,
	0xc0, 0x2f, 0x42, 0xc0, 0xab, 0x69, 0x62, 0xbf, 0x1c, 0x0c, 0xc0, 0x6a, 0x83, 0x0f, 0xf4, 0x2b,
	0x4e, 0x5f, 0x9f, 0x34, 0x03, 0x53, 0x68, 0xa8, 0xd3, 0xd7, 0xa5, 0x01, 0x3d, 0xc8, 0x15, 0xfa,
	0xe9, 0x33, 0x2c, 0x0c, 0x17, 0xf0, 0xae, 0xb7, 0x4a, 0x5c, 0x14, 0x5e, 0xcc, 0xb4, 0xc0, 0xdb,
	0x68, 0x5a, 0xdd, 0x66, 0xca, 0xe9, 0x7e, 0x09, 0xa6, 0x1b, 0x2e, 0xea, 0xda, 0xa6, 0x4a, 0xbf,
	0xa8, 0x2b, 0x58, 0x89, 0x4c, 0xa0, 0x44, 0xf0, 0x32, 0xb7, 0x55, 0x26, 0x68, 0x1b, 0x1a, 0x3d,
	0x13, 0x98, 0x36, 0xe6, 0xad, 0xd7, 0x9d, 0xe5, 0xca, 0xca, 0xd0, 0x33, 0xdd, 0x7a, 0x35, 0x51,
	0x35, 0x23, 0x8f, 0xd6, 0xff, 0xc1, 0x75, 0x57, 0x09, 0xed, 0x84, 0xfa, 0x92, 0xd1, 0x4e, 0xbd,
	0xbe, 0x64, 0x7a, 0xdc, 0x43, 0xf3, 0x7b, 0x5d, 0x37, 0xe6, 0x1b, 0x61, 0xc0, 0x63, 0xd7, 0xe3,
	0x92, 0xc7, 0x31, 0x6b, 0x05, 0x78, 0xec, 0x4d, 0xe5, 0xb0, 0x04, 0x25, 0xef, 0xb7, 0x58, 0x89,
	0xb9, 0xde, 0x04, 0x94, 0xb9, 0xc7, 0x6f, 0xa2, 0xe1, 0xf7, 0xc3, 0x16, 0xb3, 0xee, 0xc2, 0x7b,
	0x4f, 0xa9, 0x61, 0x84, 0x54, 0x96, 0x9f, 0x4e, 0xd8, 0xd2, 0xfd, 0x00, 0x1e, 0x47, 0xfd, 0xab,
	0xa7, 0x97, 0x61, 0x9e, 0x7f, 0x5a, 0x76, 0xf5, 0xf4, 0x6d, 0x62, 0xbf, 0x77, 0x99, 0x0b, 0x70,
	0x8d, 0xe4, 0xaf, 0xee, 0x1f, 0x4b, 0xff, 0xf9, 0xf5, 0x95, 0x60, 0x36, 0xfb, 0xe1, 0x27, 0x24,
	0x60, 0xd6, 0x2b, 0xcb, 0x43, 0xea, 0xa6, 0x48, 0x48, 0x74, 0x66, 0x23, 0x31, 0x22, 0x4f, 0x3e,
	0xdc, 0xdb, 0xdc, 0x07, 0x22, 0xc5, 0xac, 0x57, 0xc1, 0x02, 0xf2, 0x24, 0x61, 0x3e, 0x97, 0x52,
	0x3d, 0x4f, 0x2a, 0xac, 0xd8, 0x03, 0x39, 0x2b, 0x61, 0xd6, 0x3d, 0x30, 0x84, 0x3d, 0x90, 0xd3,
	0x18, 0xdd, 0x4e, 0x21, 0x45, 0xd7, 0xd7, 0x7f, 0xc8, 0xae, 0x3d, 0x98, 0xb5, 0xba, 0x3c, 0xb4,
	0x32, 0x29, 0xbb, 0xbe, 0xb8, 0xa8, 0xd4, 0xbb, 0xbe, 0x33, 0x96, 0xe2, 0x2d, 0x9e, 0x46, 0x24,
	0x96, 0x8c, 0x79, 0x4d, 0x65, 0xeb, 0x30, 0x17, 0xea, 0x6f, 0xd1, 0x47, 0x0a, 0x2a, 0xb4, 0xd5,
	0x0b, 0x60, 0x06, 0xad, 0xff, 0x57, 0x94, 0xf1, 0x30, 0x93, 0xe9, 0x54, 0x28, 0xc7, 0x09, 0xfa,
	0xb6, 0x13, 0x50, 0x4e, 0xdd, 0x4e, 0xe7, 0x64, 0xd7, 0xa5, 0xfe, 0x16, 0x21, 0xd6, 0x6b, 0x60,
	0x0b, 0xf4, 0x8d, 0x16, 0x74, 0x3a, 0x7d, 0x2b, 0xda, 0xe1, 0x5b, 0x68, 0x48, 0x98, 0xdf, 0x57,
	0x9f, 0x0b, 0x0e, 0x0d, 0x0b, 0xa1, 0x15, 0xb1, 0xed, 0x30, 0x87, 0x74, 0xdc, 0x13, 0xe2, 0x5b,
	0xaf, 0x43, 0x1b, 0x0b, 0xb1, 0xd1, 0x5c, 0xa8, 0xc7, 0xd6, 0x47, 0x8a, 0xd8, 0xc4, 0xc3, 0xa1,
	0xa0, 0xdf, 0xdf, 0x03, 0x2b, 0x88, 0x8d, 0x66, 0x32, 0x3d, 0xb6, 0x1c, 0x27, 0x6c, 0x36, 0xdc,
	0x4e, 0x07, 0x12, 0xdc, 0x1b, 0x6a, 0x3e, 0xbc, 0x4c, 0xa6, 0xdb, 0xe4, 0x38, 0x91, 0x4a, 0xe4,
	0x90, 0xf1, 0xba, 0xef, 0xc7, 0x84, 0x31, 0xeb, 0x4d, 0x95, 0x4a, 0x62, 0x43, 0xa3, 0xa7, 0x12,
	0xd3, 0x46, 0xf0, 0xc0, 0xec, 0xc5, 0x25, 0xdd, 0x7f, 0x0b, 0x7c, 0x00, 0x0f, 0x8c, 0x35, 0xb9,
	0xce, 0x03, 0x75, 0xbc, 0x20, 0xa8, 0x1b, 0xe2, 0x84, 0xec, 0x6c, 0x5a, 0x6f, 0xab, 0xdb, 0x55,
	0x4f, 0x8a, 0xf4, 0x04, 0x92, 0xa1, 0x84, 0xc1, 0x87, 0x24, 0x66, 0x62, 0xe5, 0xbf, 0x0f, 0x94,
	0x02, 0x0c, 0x8e, 0xa4, 0x48, 0x37, 0xc8, 0x50, 0xf8, 0x36, 0xaa, 0x3e, 0x8d, 0x64, 0x17, 0xfe,
	0x00, 0x0c, 0xc6, 0xd3, 0xc4, 0xae, 0x86, 0x52, 0xe4, 0xe4, 0x3a, 0xfc, 0x00, 0x4d, 0x6c, 0xf7,
	0xdc, 0xd8, 0xa7, 0x6e, 0x20, 0x62, 0xb3, 0xde, 0x51, 0xd3, 0xd8, 0xca, 0xe4, 0x7a, 0x10, 0x3a,
	0x56, 0x1c, 0x8a, 0xfc, 0x59, 0x31, 0xac, 0x1f, 0xa8, 0xab, 0x90, 0x56, 0x51, 0xa9, 0x1f, 0x8a,
	0x33, 0x96, 0x8d, 0xaf, 0x2b, 0x08, 0xa9, 0x94, 0x8a, 0xdb, 0x79, 0x2b, 0x55, 0x01, 0x8e, 0xed,
	0x88, 0x5e, 0x0b, 0x5a, 0xa9, 0x3f, 0xfd, 0xdd, 0x7e, 0xd8, 0x75, 0x79, 0x7b, 0xed, 0x80, 0xb6,
	0x56, 0x77, 0x02, 0xfe, 0xce, 0x25, 0x92, 0xd0, 0x6a, 0x93, 0xb6, 0x76, 0x02, 0xbe, 0xe1, 0x32,
	0x4e, 0xe2, 0xbc, 0x13, 0x7b, 0x09, 0x55, 0xf7, 0x02, 0x1f, 0xc2, 0x97, 0x0d, 0x35, 0x7c, 0x74,
	0x92, 0x0d, 0x92, 0x93, 0xab, 0xfa, 0x2d, 0xc2, 0x90, 0xa2, 0xee, 0xa5, 0x2d, 0x42, 0x03, 0x8d,
	0xee, 0x1f, 0x43, 0x8d, 0x1a, 0x56, 0xce, 0x38, 0x48, 0x9c, 0x4c, 0xd3, 0xf8, 0xc3, 0x04, 0x5a,
	0x28, 0x4f, 0xf6, 0xfd, 0x8e, 0xb7, 0x32, 0xa0, 0xe3, 0xed, 0x37, 0xb3, 0x57, 0xcf, 0x69, 0x66,
	0xfb, 0xf3, 0x37, 0xf4, 0xbf, 0x9e, 0xbf, 0x3b, 0xa8, 0xea, 0x78, 0x47, 0x30, 0x7f, 0x32, 0xe4,
	0x89, 0x34, 0xb1, 0xc7, 0xf2, 0x94, 0xe8, 0xe4, 0x4a, 0x7d, 0x9e, 0x47, 0xce, 0x9f, 0xe7, 0x77,
	0xd1, 0xb8, 0x76, 0xd8, 0xb2, 0xfb, 0xd9, 0x8b, 0x4f, 0xa7, 0x6e, 0x80, 0x7f, 0x5b, 0x29, 0x9c,
	0xcd, 0x2a, 0xc4, 0xef, 0x9d, 0x7f, 0x36, 0xbf, 0xbb, 0x09, 0x31, 0x0f, 0x79, 0xde, 0xec, 0x8d,
	0x0d, 0x68, 0xf6, 0xf2, 0x9d, 0x55, 0x1b, 0xb0, 0xb3, 0x56, 0x11, 0x12, 0xed, 0x5c, 0xb6, 0xbb,
	0xe4, 0x0d, 0xc3, 0x54, 0x9a, 0xd8, 0x28, 0xea, 0x4b, 0x1d, 0x0d, 0x81, 0x1f, 0xa8, 0xfe, 0x29,
	0xb3, 0x19, 0x57, 0x23, 0x84, 0x86, 0xc6, 0x29, 0x20, 0xf1, 0x8a, 0xd6, 0x75, 0xcb, 0x0f, 0x84,
	0xb0, 0xa8, 0x79, 0xd7, 0xad, 0xf5, 0xda, 0x2b, 0x5a, 0x4f, 0x3f, 0x69, 0x20, 0xe5, 0x87, 0x0f,
	0xd5, 0xc9, 0x7b, 0x5a, 0xba, 0x9e, 0x02, 0xfa, 0xb5, 0x2d, 0x90, 0x79, 0xba, 0xfe, 0x36, 0xb1,
	0xdf, 0xba, 0x0c, 0x9f, 0x38, 0xea, 0xae, 0xe6, 0xee, 0xb4, 0xfc, 0x5e, 0xec, 0xd0, 0xa7, 0x55,
	0x66, 0x7e, 0xa6, 0x0e, 0xfd, 0x4c, 0xdf, 0x3a, 0xf3, 0x1d, 0xf4, 0xad, 0xb3, 0xcf, 0xd1, 0xb7,
	0xe6, 0xdc, 0x0d, 0x5f, 0x92, 0xbb, 0x29, 0x26, 0x35, 0x77, 0x69, 0x26, 0x35, 0xff, 0xbc, 0x4c,
	0xea, 0xda, 0x7f, 0xc7, 0xa4, 0x16, 0xbe, 0x1b, 0x26, 0xb5, 0xf8, 0x5c, 0x4c, 0xca, 0x7a, 0x46,
	0x26, 0x65, 0x10, 0x9b, 0x17, 0x9e, 0x8b, 0xd8, 0x2c, 0x3d, 0x1b, 0xb1, 0x69, 0x78, 0xa8, 0x9a,
	0x2d, 0xb4, 0xa8, 0xe3, 0x39, 0x51, 0x91, 0x25, 0x01, 0xea, 0xb8, 0x2b, 0x45, 0x4e, 0xae, 0xc3,
	0xaf, 0xa1, 0xd1, 0x87, 0x47, 0x24, 0xe0, 0xcc, 0xba, 0x0a, 0x2d, 0xc5, 0x64, 0xfe, 0xbd, 0x1c,
	0x84, 0x32, 0xd3, 0x12, 0xf8, 0xdf, 0xc9, 0x80, 0x8d, 0xbf, 0x55, 0x72, 0x9b, 0x67, 0x1d, 0x64,
	0x15, 0xa1, 0x1d, 0x9f, 0x04, 0x9c, 0x1e, 0x52, 0x92, 0xd7, 0x4a, 0x48, 0x40, 0xb4, 0x2f, 0x75,
	0x34, 0x04, 0x94, 0xc2, 0x30, 0xa2, 0x1e, 0xb3, 0x86, 0x96, 0x87, 0x56, 0x26, 0xb2, 0x52, 0x08,
	0x12, 0x27, 0xd3, 0xe0, 0x1b, 0x59, 0xf2, 0x1b, 0x86, 0x2c, 0x0d, 0x57, 0xd9, 0xe2, 0x1c, 0x66,
	0x29, 0xef, 0x01, 0x9a, 0x5a, 0xf7, 0x7d, 0x2a, 0xe6, 0xdf, 0xed, 0x00, 0x6e, 0x04, 0x3c, 0xc1,
	0xf6, 0x77, 0x0d, 0x8d, 0x53, 0x40, 0x36, 0xfe, 0x79, 0x15, 0x4d, 0x99, 0xdf, 0xf0, 0x07, 0x7c,
	0x3e, 0x1a, 0x58, 0x52, 0x6d, 0xf3, 0x3b, 0x66, 0xe9, 0xfd, 0xb0, 0xbc, 0xf6, 0x19, 0x2e, 0x7e,
	0x2c, 0x95, 0x72, 0x91, 0x2c, 0xfb, 0x1f, 0x0f, 0x47, 0xb4, 0x5a, 0x99, 0xff, 0xe0, 0x46, 0x7d,
	0x6f, 0xdc, 0x46, 0xd3, 0x46, 0x33, 0x0d, 0xf7, 0xda, 0x43, 0xf9, 0x8f, 0x5c, 0xba, 0xa6, 0x4a,
	0xef, 0x9d, 0x0b, 0x56, 0xf8, 0x17, 0x68, 0x7a, 0xdd, 0xf8, 0xad, 0x11, 0xb3, 0xaa, 0xc6, 0xef,
	0x1c, 0x4c, 0x6d, 0xf6, 0x23, 0x1a, 0xd3, 0xc2, 0xf8, 0x11, 0x8d, 0xa9, 0x6a, 0x76, 0x3f, 0xff,
	0xb2, 0x7e, 0xe5, 0x8b, 0x2f, 0xeb, 0x57, 0xbe, 0xf9, 0xb2, 0x5e, 0xf9, 0xcd, 0x69, 0xbd, 0xf2,
	0xc7, 0xd3, 0x7a, 0xe5, 0xaf, 0xa7, 0xf5, 0xca, 0xe7, 0xa7, 0xf5, 0xca, 0x17, 0xa7, 0xf5, 0xca,
	0x3f, 0x4e, 0xeb, 0x95, 0xaf, 0x4f, 0xeb, 0x57, 0xbe, 0x39, 0xad, 0x57, 0x7e, 0xf7, 0x55, 0xfd,
	0xca, 0xe7, 0x5f, 0xd5, 0xaf, 0x7c, 0xf1, 0x55, 0xfd, 0xca, 0xcf, 0x5f, 0xbf, 0xd4, 0xcf, 0xa7,
	0x22, 0xfa, 0x8e, 0x1b, 0xd1, 0x83, 0x51, 0x78, 0xe9, 0xd7, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xc4, 0xe6, 0x2e, 0xa1, 0xc7, 0x25, 0x00, 0x00,
}

func (this *Hyperblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hyperblock)
	if !ok {
		that2, ok := that.(Hyperblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.PrevBlockHash != that1.PrevBlockHash {
		return false
	}
	if this.StateRootHash != that1.StateRootHash {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.NumTxs != that1.NumTxs {
		return false
	}
	if this.AccumulatedFees != that1.AccumulatedFees {
		return false
	}
	if this.DeveloperFees != that1.DeveloperFees {
		return false
	}
	if this.AccumulatedFeesInEpoch != that1.AccumulatedFeesInEpoch {
		return false
	}
	if this.DeveloperFeesInEpoch != that1.DeveloperFeesInEpoch {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.EpochStartInfo.Equal(that1.EpochStartInfo) {
		return false
	}
	if len(this.EpochStartShardsData) != len(that1.EpochStartShardsData) {
		return false
	}
	for i := range this.EpochStartShardsData {
		if !this.EpochStartShardsData[i].Equal(that1.EpochStartShardsData[i]) {
			return false
		}
	}
	if len(this.ShardBlocks) != len(that1.ShardBlocks) {
		return false
	}
	for i := range this.ShardBlocks {
		if !this.ShardBlocks[i].Equal(that1.ShardBlocks[i]) {
			return false
		}
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *EpochStartInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochStartInfo)
	if !ok {
		that2, ok := that.(EpochStartInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalSupply != that1.TotalSupply {
		return false
	}
	if this.TotalToDistribute != that1.TotalToDistribute {
		return false
	}
	if this.TotalNewlyMinted != that1.TotalNewlyMinted {
		return false
	}
	if this.RewardsPerBlock != that1.RewardsPerBlock {
		return false
	}
	if this.RewardsForProtocolSustainability != that1.RewardsForProtocolSustainability {
		return false
	}
	if this.NodePrice != that1.NodePrice {
		return false
	}
	if this.PrevEpochStartRound != that1.PrevEpochStartRound {
		return false
	}
	if this.PrevEpochStartHash != that1.PrevEpochStartHash {
		return false
	}
	return true
}
func (this *EpochStartShardData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochStartShardData)
	if !ok {
		that2, ok := that.(EpochStartShardData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.HeaderHash != that1.HeaderHash {
		return false
	}
	if this.RootHash != that1.RootHash {
		return false
	}
	if this.ScheduledRootHash != that1.ScheduledRootHash {
		return false
	}
	if this.FirstPendingMetaBlock != that1.FirstPendingMetaBlock {
		return false
	}
	if this.LastFinishedMetaBlock != that1.LastFinishedMetaBlock {
		return false
	}
	if len(this.PendingMiniBlockHeaders) != len(that1.PendingMiniBlockHeaders) {
		return false
	}
	for i := range this.PendingMiniBlockHeaders {
		if !this.PendingMiniBlockHeaders[i].Equal(that1.PendingMiniBlockHeaders[i]) {
			return false
		}
	}
	return true
}
func (this *MiniBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MiniBlock)
	if !ok {
		that2, ok := that.(MiniBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ProcessingType != that1.ProcessingType {
		return false
	}
	if this.ConstructionState != that1.ConstructionState {
		return false
	}
	if this.SFromReceiptsStorage != that1.SFromReceiptsStorage {
		return false
	}
	if this.SourceShard != that1.SourceShard {
		return false
	}
	if this.DestinationShard != that1.DestinationShard {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if len(this.Receipts) != len(that1.Receipts) {
		return false
	}
	for i := range this.Receipts {
		if !this.Receipts[i].Equal(that1.Receipts[i]) {
			return false
		}
	}
	if this.IndexOfFirstTxProcessed != that1.IndexOfFirstTxProcessed {
		return false
	}
	if this.IndexOfLastTxProcessed != that1.IndexOfLastTxProcessed {
		return false
	}
	return true
}
func (this *ApiTransactionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiTransactionResult)
	if !ok {
		that2, ok := that.(ApiTransactionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ProcessingTypeOnSource != that1.ProcessingTypeOnSource {
		return false
	}
	if this.ProcessingTypeOnDestination != that1.ProcessingTypeOnDestination {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if !bytes.Equal(this.HashBytes, that1.HashBytes) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Receiver != that1.Receiver {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !bytes.Equal(this.SenderUsername, that1.SenderUsername) {
		return false
	}
	if !bytes.Equal(this.ReceiverUsername, that1.ReceiverUsername) {
		return false
	}
	if this.GasPrice != that1.GasPrice {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.CodeMetadata, that1.CodeMetadata) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.PreviousTransactionHash != that1.PreviousTransactionHash {
		return false
	}
	if this.OriginalTransactionHash != that1.OriginalTransactionHash {
		return false
	}
	if this.ReturnMessage != that1.ReturnMessage {
		return false
	}
	if this.OriginalSender != that1.OriginalSender {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	if this.SourceShard != that1.SourceShard {
		return false
	}
	if this.DestinationShard != that1.DestinationShard {
		return false
	}
	if this.BlockNonce != that1.BlockNonce {
		return false
	}
	if this.BlockHash != that1.BlockHash {
		return false
	}
	if this.NotarizedAtSourceInMetaNonce != that1.NotarizedAtSourceInMetaNonce {
		return false
	}
	if this.NotarizedAtSourceInMetaHash != that1.NotarizedAtSourceInMetaHash {
		return false
	}
	if this.NotarizedAtDestinationInMetaNonce != that1.NotarizedAtDestinationInMetaNonce {
		return false
	}
	if this.NotarizedAtDestinationInMetaHash != that1.NotarizedAtDestinationInMetaHash {
		return false
	}
	if this.MiniBlockType != that1.MiniBlockType {
		return false
	}
	if this.MiniBlockHash != that1.MiniBlockHash {
		return false
	}
	if this.HyperblockNonce != that1.HyperblockNonce {
		return false
	}
	if this.HyperblockHash != that1.HyperblockHash {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.Receipt.Equal(that1.Receipt) {
		return false
	}
	if len(this.SmartContractResults) != len(that1.SmartContractResults) {
		return false
	}
	for i := range this.SmartContractResults {
		if !this.SmartContractResults[i].Equal(that1.SmartContractResults[i]) {
			return false
		}
	}
	if !this.Logs.Equal(that1.Logs) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if this.Tokens[i] != that1.Tokens[i] {
			return false
		}
	}
	if len(this.ESDTValues) != len(that1.ESDTValues) {
		return false
	}
	for i := range this.ESDTValues {
		if this.ESDTValues[i] != that1.ESDTValues[i] {
			return false
		}
	}
	if len(this.Receivers) != len(that1.Receivers) {
		return false
	}
	for i := range this.Receivers {
		if this.Receivers[i] != that1.Receivers[i] {
			return false
		}
	}
	if len(this.ReceiversShardIDs) != len(that1.ReceiversShardIDs) {
		return false
	}
	for i := range this.ReceiversShardIDs {
		if this.ReceiversShardIDs[i] != that1.ReceiversShardIDs[i] {
			return false
		}
	}
	if this.Operation != that1.Operation {
		return false
	}
	if this.Function != that1.Function {
		return false
	}
	if this.InitiallyPaidFee != that1.InitiallyPaidFee {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if this.IsRelayed != that1.IsRelayed {
		return false
	}
	if this.IsRefund != that1.IsRefund {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if this.RelayerAddress != that1.RelayerAddress {
		return false
	}
	if this.RelayedValue != that1.RelayedValue {
		return false
	}
	if this.ChainID != that1.ChainID {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Options != that1.Options {
		return false
	}
	if this.GuardianAddr != that1.GuardianAddr {
		return false
	}
	if this.GuardianSignature != that1.GuardianSignature {
		return false
	}
	return true
}
func (this *ApiReceipt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiReceipt)
	if !ok {
		that2, ok := that.(ApiReceipt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if this.SndAddr != that1.SndAddr {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	return true
}
func (this *ApiSmartContractResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiSmartContractResult)
	if !ok {
		that2, ok := that.(ApiSmartContractResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if this.RcvAddr != that1.RcvAddr {
		return false
	}
	if this.SndAddr != that1.SndAddr {
		return false
	}
	if this.RelayerAddr != that1.RelayerAddr {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.RelayedValue, that1.RelayedValue) {
			return false
		}
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.PrevTxHash != that1.PrevTxHash {
		return false
	}
	if this.OriginalTxHash != that1.OriginalTxHash {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasPrice != that1.GasPrice {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if this.CodeMetadata != that1.CodeMetadata {
		return false
	}
	if this.ReturnMessage != that1.ReturnMessage {
		return false
	}
	if this.OriginalSender != that1.OriginalSender {
		return false
	}
	if !this.Logs.Equal(that1.Logs) {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if this.Tokens[i] != that1.Tokens[i] {
			return false
		}
	}
	if len(this.ESDTValues) != len(that1.ESDTValues) {
		return false
	}
	for i := range this.ESDTValues {
		if this.ESDTValues[i] != that1.ESDTValues[i] {
			return false
		}
	}
	if len(this.Receivers) != len(that1.Receivers) {
		return false
	}
	for i := range this.Receivers {
		if this.Receivers[i] != that1.Receivers[i] {
			return false
		}
	}
	if len(this.ReceiversShardIDs) != len(that1.ReceiversShardIDs) {
		return false
	}
	for i := range this.ReceiversShardIDs {
		if this.ReceiversShardIDs[i] != that1.ReceiversShardIDs[i] {
			return false
		}
	}
	if this.Operation != that1.Operation {
		return false
	}
	if this.Function != that1.Function {
		return false
	}
	if this.IsRelayed != that1.IsRelayed {
		return false
	}
	if this.IsRefund != that1.IsRefund {
		return false
	}
	return true
}
func (this *ApiLogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiLogs)
	if !ok {
		that2, ok := that.(ApiLogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *Events) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Events)
	if !ok {
		that2, ok := that.(Events)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !bytes.Equal(this.Topics[i], that1.Topics[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !bytes.Equal(this.AdditionalData[i], that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *NotarizedBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotarizedBlock)
	if !ok {
		that2, ok := that.(NotarizedBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Shard != that1.Shard {
		return false
	}
	if this.RootHash != that1.RootHash {
		return false
	}
	if len(this.MiniBlockHashes) != len(that1.MiniBlockHashes) {
		return false
	}
	for i := range this.MiniBlockHashes {
		if this.MiniBlockHashes[i] != that1.MiniBlockHashes[i] {
			return false
		}
	}
	if len(this.AlteredAccounts) != len(that1.AlteredAccounts) {
		return false
	}
	for i := range this.AlteredAccounts {
		if !this.AlteredAccounts[i].Equal(that1.AlteredAccounts[i]) {
			return false
		}
	}
	return true
}
func (this *Hyperblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&api.Hyperblock{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "PrevBlockHash: "+fmt.Sprintf("%#v", this.PrevBlockHash)+",\n")
	s = append(s, "StateRootHash: "+fmt.Sprintf("%#v", this.StateRootHash)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "NumTxs: "+fmt.Sprintf("%#v", this.NumTxs)+",\n")
	s = append(s, "AccumulatedFees: "+fmt.Sprintf("%#v", this.AccumulatedFees)+",\n")
	s = append(s, "DeveloperFees: "+fmt.Sprintf("%#v", this.DeveloperFees)+",\n")
	s = append(s, "AccumulatedFeesInEpoch: "+fmt.Sprintf("%#v", this.AccumulatedFeesInEpoch)+",\n")
	s = append(s, "DeveloperFeesInEpoch: "+fmt.Sprintf("%#v", this.DeveloperFeesInEpoch)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.EpochStartInfo != nil {
		s = append(s, "EpochStartInfo: "+fmt.Sprintf("%#v", this.EpochStartInfo)+",\n")
	}
	if this.EpochStartShardsData != nil {
		s = append(s, "EpochStartShardsData: "+fmt.Sprintf("%#v", this.EpochStartShardsData)+",\n")
	}
	if this.ShardBlocks != nil {
		s = append(s, "ShardBlocks: "+fmt.Sprintf("%#v", this.ShardBlocks)+",\n")
	}
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EpochStartInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&api.EpochStartInfo{")
	s = append(s, "TotalSupply: "+fmt.Sprintf("%#v", this.TotalSupply)+",\n")
	s = append(s, "TotalToDistribute: "+fmt.Sprintf("%#v", this.TotalToDistribute)+",\n")
	s = append(s, "TotalNewlyMinted: "+fmt.Sprintf("%#v", this.TotalNewlyMinted)+",\n")
	s = append(s, "RewardsPerBlock: "+fmt.Sprintf("%#v", this.RewardsPerBlock)+",\n")
	s = append(s, "RewardsForProtocolSustainability: "+fmt.Sprintf("%#v", this.RewardsForProtocolSustainability)+",\n")
	s = append(s, "NodePrice: "+fmt.Sprintf("%#v", this.NodePrice)+",\n")
	s = append(s, "PrevEpochStartRound: "+fmt.Sprintf("%#v", this.PrevEpochStartRound)+",\n")
	s = append(s, "PrevEpochStartHash: "+fmt.Sprintf("%#v", this.PrevEpochStartHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EpochStartShardData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&api.EpochStartShardData{")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	s = append(s, "ScheduledRootHash: "+fmt.Sprintf("%#v", this.ScheduledRootHash)+",\n")
	s = append(s, "FirstPendingMetaBlock: "+fmt.Sprintf("%#v", this.FirstPendingMetaBlock)+",\n")
	s = append(s, "LastFinishedMetaBlock: "+fmt.Sprintf("%#v", this.LastFinishedMetaBlock)+",\n")
	if this.PendingMiniBlockHeaders != nil {
		s = append(s, "PendingMiniBlockHeaders: "+fmt.Sprintf("%#v", this.PendingMiniBlockHeaders)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MiniBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&api.MiniBlock{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ProcessingType: "+fmt.Sprintf("%#v", this.ProcessingType)+",\n")
	s = append(s, "ConstructionState: "+fmt.Sprintf("%#v", this.ConstructionState)+",\n")
	s = append(s, "SFromReceiptsStorage: "+fmt.Sprintf("%#v", this.SFromReceiptsStorage)+",\n")
	s = append(s, "SourceShard: "+fmt.Sprintf("%#v", this.SourceShard)+",\n")
	s = append(s, "DestinationShard: "+fmt.Sprintf("%#v", this.DestinationShard)+",\n")
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	if this.Receipts != nil {
		s = append(s, "Receipts: "+fmt.Sprintf("%#v", this.Receipts)+",\n")
	}
	s = append(s, "IndexOfFirstTxProcessed: "+fmt.Sprintf("%#v", this.IndexOfFirstTxProcessed)+",\n")
	s = append(s, "IndexOfLastTxProcessed: "+fmt.Sprintf("%#v", this.IndexOfLastTxProcessed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiTransactionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 63)
	s = append(s, "&api.ApiTransactionResult{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ProcessingTypeOnSource: "+fmt.Sprintf("%#v", this.ProcessingTypeOnSource)+",\n")
	s = append(s, "ProcessingTypeOnDestination: "+fmt.Sprintf("%#v", this.ProcessingTypeOnDestination)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "HashBytes: "+fmt.Sprintf("%#v", this.HashBytes)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "SenderUsername: "+fmt.Sprintf("%#v", this.SenderUsername)+",\n")
	s = append(s, "ReceiverUsername: "+fmt.Sprintf("%#v", this.ReceiverUsername)+",\n")
	s = append(s, "GasPrice: "+fmt.Sprintf("%#v", this.GasPrice)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "CodeMetadata: "+fmt.Sprintf("%#v", this.CodeMetadata)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "PreviousTransactionHash: "+fmt.Sprintf("%#v", this.PreviousTransactionHash)+",\n")
	s = append(s, "OriginalTransactionHash: "+fmt.Sprintf("%#v", this.OriginalTransactionHash)+",\n")
	s = append(s, "ReturnMessage: "+fmt.Sprintf("%#v", this.ReturnMessage)+",\n")
	s = append(s, "OriginalSender: "+fmt.Sprintf("%#v", this.OriginalSender)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "SourceShard: "+fmt.Sprintf("%#v", this.SourceShard)+",\n")
	s = append(s, "DestinationShard: "+fmt.Sprintf("%#v", this.DestinationShard)+",\n")
	s = append(s, "BlockNonce: "+fmt.Sprintf("%#v", this.BlockNonce)+",\n")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "NotarizedAtSourceInMetaNonce: "+fmt.Sprintf("%#v", this.NotarizedAtSourceInMetaNonce)+",\n")
	s = append(s, "NotarizedAtSourceInMetaHash: "+fmt.Sprintf("%#v", this.NotarizedAtSourceInMetaHash)+",\n")
	s = append(s, "NotarizedAtDestinationInMetaNonce: "+fmt.Sprintf("%#v", this.NotarizedAtDestinationInMetaNonce)+",\n")
	s = append(s, "NotarizedAtDestinationInMetaHash: "+fmt.Sprintf("%#v", this.NotarizedAtDestinationInMetaHash)+",\n")
	s = append(s, "MiniBlockType: "+fmt.Sprintf("%#v", this.MiniBlockType)+",\n")
	s = append(s, "MiniBlockHash: "+fmt.Sprintf("%#v", this.MiniBlockHash)+",\n")
	s = append(s, "HyperblockNonce: "+fmt.Sprintf("%#v", this.HyperblockNonce)+",\n")
	s = append(s, "HyperblockHash: "+fmt.Sprintf("%#v", this.HyperblockHash)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.Receipt != nil {
		s = append(s, "Receipt: "+fmt.Sprintf("%#v", this.Receipt)+",\n")
	}
	if this.SmartContractResults != nil {
		s = append(s, "SmartContractResults: "+fmt.Sprintf("%#v", this.SmartContractResults)+",\n")
	}
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	s = append(s, "ESDTValues: "+fmt.Sprintf("%#v", this.ESDTValues)+",\n")
	s = append(s, "Receivers: "+fmt.Sprintf("%#v", this.Receivers)+",\n")
	s = append(s, "ReceiversShardIDs: "+fmt.Sprintf("%#v", this.ReceiversShardIDs)+",\n")
	s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	s = append(s, "Function: "+fmt.Sprintf("%#v", this.Function)+",\n")
	s = append(s, "InitiallyPaidFee: "+fmt.Sprintf("%#v", this.InitiallyPaidFee)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "IsRelayed: "+fmt.Sprintf("%#v", this.IsRelayed)+",\n")
	s = append(s, "IsRefund: "+fmt.Sprintf("%#v", this.IsRefund)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "RelayerAddress: "+fmt.Sprintf("%#v", this.RelayerAddress)+",\n")
	s = append(s, "RelayedValue: "+fmt.Sprintf("%#v", this.RelayedValue)+",\n")
	s = append(s, "ChainID: "+fmt.Sprintf("%#v", this.ChainID)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	s = append(s, "GuardianAddr: "+fmt.Sprintf("%#v", this.GuardianAddr)+",\n")
	s = append(s, "GuardianSignature: "+fmt.Sprintf("%#v", this.GuardianSignature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiReceipt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api.ApiReceipt{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "SndAddr: "+fmt.Sprintf("%#v", this.SndAddr)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "TxHash: "+fmt.Sprintf("%#v", this.TxHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiSmartContractResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 30)
	s = append(s, "&api.ApiSmartContractResult{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "RcvAddr: "+fmt.Sprintf("%#v", this.RcvAddr)+",\n")
	s = append(s, "SndAddr: "+fmt.Sprintf("%#v", this.SndAddr)+",\n")
	s = append(s, "RelayerAddr: "+fmt.Sprintf("%#v", this.RelayerAddr)+",\n")
	s = append(s, "RelayedValue: "+fmt.Sprintf("%#v", this.RelayedValue)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "PrevTxHash: "+fmt.Sprintf("%#v", this.PrevTxHash)+",\n")
	s = append(s, "OriginalTxHash: "+fmt.Sprintf("%#v", this.OriginalTxHash)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "GasPrice: "+fmt.Sprintf("%#v", this.GasPrice)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "CodeMetadata: "+fmt.Sprintf("%#v", this.CodeMetadata)+",\n")
	s = append(s, "ReturnMessage: "+fmt.Sprintf("%#v", this.ReturnMessage)+",\n")
	s = append(s, "OriginalSender: "+fmt.Sprintf("%#v", this.OriginalSender)+",\n")
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	s = append(s, "ESDTValues: "+fmt.Sprintf("%#v", this.ESDTValues)+",\n")
	s = append(s, "Receivers: "+fmt.Sprintf("%#v", this.Receivers)+",\n")
	s = append(s, "ReceiversShardIDs: "+fmt.Sprintf("%#v", this.ReceiversShardIDs)+",\n")
	s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	s = append(s, "Function: "+fmt.Sprintf("%#v", this.Function)+",\n")
	s = append(s, "IsRelayed: "+fmt.Sprintf("%#v", this.IsRelayed)+",\n")
	s = append(s, "IsRefund: "+fmt.Sprintf("%#v", this.IsRefund)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiLogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.ApiLogs{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Events) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api.Events{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotarizedBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&api.NotarizedBlock{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Shard: "+fmt.Sprintf("%#v", this.Shard)+",\n")
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	s = append(s, "MiniBlockHashes: "+fmt.Sprintf("%#v", this.MiniBlockHashes)+",\n")
	if this.AlteredAccounts != nil {
		s = append(s, "AlteredAccounts: "+fmt.Sprintf("%#v", this.AlteredAccounts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApiHyperBlock(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Hyperblock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hyperblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hyperblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ShardBlocks) > 0 {
		for iNdEx := len(m.ShardBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShardBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.EpochStartShardsData) > 0 {
		for iNdEx := len(m.EpochStartShardsData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochStartShardsData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.EpochStartInfo != nil {
		{
			size, err := m.EpochStartInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Timestamp != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x60
	}
	if len(m.DeveloperFeesInEpoch) > 0 {
		i -= len(m.DeveloperFeesInEpoch)
		copy(dAtA[i:], m.DeveloperFeesInEpoch)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.DeveloperFeesInEpoch)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AccumulatedFeesInEpoch) > 0 {
		i -= len(m.AccumulatedFeesInEpoch)
		copy(dAtA[i:], m.AccumulatedFeesInEpoch)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.AccumulatedFeesInEpoch)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DeveloperFees) > 0 {
		i -= len(m.DeveloperFees)
		copy(dAtA[i:], m.DeveloperFees)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.DeveloperFees)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AccumulatedFees) > 0 {
		i -= len(m.AccumulatedFees)
		copy(dAtA[i:], m.AccumulatedFees)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.AccumulatedFees)))
		i--
		dAtA[i] = 0x42
	}
	if m.NumTxs != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.NumTxs))
		i--
		dAtA[i] = 0x38
	}
	if m.Epoch != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x30
	}
	if m.Round != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x28
	}
	if m.Nonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StateRootHash) > 0 {
		i -= len(m.StateRootHash)
		copy(dAtA[i:], m.StateRootHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.StateRootHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrevBlockHash) > 0 {
		i -= len(m.PrevBlockHash)
		copy(dAtA[i:], m.PrevBlockHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.PrevBlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochStartInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochStartInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochStartInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrevEpochStartHash) > 0 {
		i -= len(m.PrevEpochStartHash)
		copy(dAtA[i:], m.PrevEpochStartHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.PrevEpochStartHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.PrevEpochStartRound != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.PrevEpochStartRound))
		i--
		dAtA[i] = 0x38
	}
	if len(m.NodePrice) > 0 {
		i -= len(m.NodePrice)
		copy(dAtA[i:], m.NodePrice)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.NodePrice)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RewardsForProtocolSustainability) > 0 {
		i -= len(m.RewardsForProtocolSustainability)
		copy(dAtA[i:], m.RewardsForProtocolSustainability)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RewardsForProtocolSustainability)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardsPerBlock) > 0 {
		i -= len(m.RewardsPerBlock)
		copy(dAtA[i:], m.RewardsPerBlock)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RewardsPerBlock)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalNewlyMinted) > 0 {
		i -= len(m.TotalNewlyMinted)
		copy(dAtA[i:], m.TotalNewlyMinted)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.TotalNewlyMinted)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalToDistribute) > 0 {
		i -= len(m.TotalToDistribute)
		copy(dAtA[i:], m.TotalToDistribute)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.TotalToDistribute)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochStartShardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochStartShardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochStartShardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingMiniBlockHeaders) > 0 {
		for iNdEx := len(m.PendingMiniBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingMiniBlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.LastFinishedMetaBlock) > 0 {
		i -= len(m.LastFinishedMetaBlock)
		copy(dAtA[i:], m.LastFinishedMetaBlock)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.LastFinishedMetaBlock)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FirstPendingMetaBlock) > 0 {
		i -= len(m.FirstPendingMetaBlock)
		copy(dAtA[i:], m.FirstPendingMetaBlock)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.FirstPendingMetaBlock)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ScheduledRootHash) > 0 {
		i -= len(m.ScheduledRootHash)
		copy(dAtA[i:], m.ScheduledRootHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ScheduledRootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Nonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if m.Round != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x18
	}
	if m.Epoch != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MiniBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexOfLastTxProcessed != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.IndexOfLastTxProcessed))
		i--
		dAtA[i] = 0x58
	}
	if m.IndexOfFirstTxProcessed != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.IndexOfFirstTxProcessed))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Receipts) > 0 {
		for iNdEx := len(m.Receipts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receipts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.DestinationShard != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.DestinationShard))
		i--
		dAtA[i] = 0x38
	}
	if m.SourceShard != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.SourceShard))
		i--
		dAtA[i] = 0x30
	}
	if m.SFromReceiptsStorage {
		i--
		if m.SFromReceiptsStorage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ConstructionState) > 0 {
		i -= len(m.ConstructionState)
		copy(dAtA[i:], m.ConstructionState)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ConstructionState)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProcessingType) > 0 {
		i -= len(m.ProcessingType)
		copy(dAtA[i:], m.ProcessingType)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ProcessingType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiTransactionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiTransactionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiTransactionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuardianSignature) > 0 {
		i -= len(m.GuardianSignature)
		copy(dAtA[i:], m.GuardianSignature)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.GuardianSignature)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if len(m.GuardianAddr) > 0 {
		i -= len(m.GuardianAddr)
		copy(dAtA[i:], m.GuardianAddr)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.GuardianAddr)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.Options != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Options))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.Version != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if len(m.RelayedValue) > 0 {
		i -= len(m.RelayedValue)
		copy(dAtA[i:], m.RelayedValue)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RelayedValue)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if len(m.RelayerAddress) > 0 {
		i -= len(m.RelayerAddress)
		copy(dAtA[i:], m.RelayerAddress)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RelayerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if len(m.CallType) > 0 {
		i -= len(m.CallType)
		copy(dAtA[i:], m.CallType)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.CallType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.IsRefund {
		i--
		if m.IsRefund {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.IsRelayed {
		i--
		if m.IsRelayed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.InitiallyPaidFee) > 0 {
		i -= len(m.InitiallyPaidFee)
		copy(dAtA[i:], m.InitiallyPaidFee)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.InitiallyPaidFee)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if len(m.ReceiversShardIDs) > 0 {
		dAtA3 := make([]byte, len(m.ReceiversShardIDs)*10)
		var j2 int
		for _, num := range m.ReceiversShardIDs {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Receivers[iNdEx])
			copy(dAtA[i:], m.Receivers[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Receivers[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.ESDTValues) > 0 {
		for iNdEx := len(m.ESDTValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ESDTValues[iNdEx])
			copy(dAtA[i:], m.ESDTValues[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ESDTValues[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tokens[iNdEx])
			copy(dAtA[i:], m.Tokens[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Tokens[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if m.Logs != nil {
		{
			size, err := m.Logs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.SmartContractResults) > 0 {
		for iNdEx := len(m.SmartContractResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SmartContractResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Receipt != nil {
		{
			size, err := m.Receipt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.Timestamp != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if len(m.HyperblockHash) > 0 {
		i -= len(m.HyperblockHash)
		copy(dAtA[i:], m.HyperblockHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.HyperblockHash)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.HyperblockNonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.HyperblockNonce))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if len(m.MiniBlockHash) > 0 {
		i -= len(m.MiniBlockHash)
		copy(dAtA[i:], m.MiniBlockHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.MiniBlockHash)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MiniBlockType) > 0 {
		i -= len(m.MiniBlockType)
		copy(dAtA[i:], m.MiniBlockType)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.MiniBlockType)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.NotarizedAtDestinationInMetaHash) > 0 {
		i -= len(m.NotarizedAtDestinationInMetaHash)
		copy(dAtA[i:], m.NotarizedAtDestinationInMetaHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.NotarizedAtDestinationInMetaHash)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.NotarizedAtDestinationInMetaNonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.NotarizedAtDestinationInMetaNonce))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.NotarizedAtSourceInMetaHash) > 0 {
		i -= len(m.NotarizedAtSourceInMetaHash)
		copy(dAtA[i:], m.NotarizedAtSourceInMetaHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.NotarizedAtSourceInMetaHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.NotarizedAtSourceInMetaNonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.NotarizedAtSourceInMetaNonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.BlockNonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.BlockNonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.DestinationShard != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.DestinationShard))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.SourceShard != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.SourceShard))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.OriginalSender) > 0 {
		i -= len(m.OriginalSender)
		copy(dAtA[i:], m.OriginalSender)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.OriginalSender)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ReturnMessage) > 0 {
		i -= len(m.ReturnMessage)
		copy(dAtA[i:], m.ReturnMessage)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ReturnMessage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.OriginalTransactionHash) > 0 {
		i -= len(m.OriginalTransactionHash)
		copy(dAtA[i:], m.OriginalTransactionHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.OriginalTransactionHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.PreviousTransactionHash) > 0 {
		i -= len(m.PreviousTransactionHash)
		copy(dAtA[i:], m.PreviousTransactionHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.PreviousTransactionHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.CodeMetadata) > 0 {
		i -= len(m.CodeMetadata)
		copy(dAtA[i:], m.CodeMetadata)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.CodeMetadata)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.GasUsed != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.GasLimit != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.GasPrice != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ReceiverUsername) > 0 {
		i -= len(m.ReceiverUsername)
		copy(dAtA[i:], m.ReceiverUsername)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ReceiverUsername)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SenderUsername) > 0 {
		i -= len(m.SenderUsername)
		copy(dAtA[i:], m.SenderUsername)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.SenderUsername)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x52
	}
	if m.Epoch != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x48
	}
	if m.Round != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x40
	}
	if m.Nonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x38
	}
	if len(m.HashBytes) > 0 {
		i -= len(m.HashBytes)
		copy(dAtA[i:], m.HashBytes)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.HashBytes)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProcessingTypeOnDestination) > 0 {
		i -= len(m.ProcessingTypeOnDestination)
		copy(dAtA[i:], m.ProcessingTypeOnDestination)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ProcessingTypeOnDestination)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProcessingTypeOnSource) > 0 {
		i -= len(m.ProcessingTypeOnSource)
		copy(dAtA[i:], m.ProcessingTypeOnSource)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ProcessingTypeOnSource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ApiReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SndAddr) > 0 {
		i -= len(m.SndAddr)
		copy(dAtA[i:], m.SndAddr)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.SndAddr)))
		i--
		dAtA[i] = 0x12
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApiSmartContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiSmartContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiSmartContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRefund {
		i--
		if m.IsRefund {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.IsRelayed {
		i--
		if m.IsRelayed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.ReceiversShardIDs) > 0 {
		dAtA7 := make([]byte, len(m.ReceiversShardIDs)*10)
		var j6 int
		for _, num := range m.ReceiversShardIDs {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Receivers[iNdEx])
			copy(dAtA[i:], m.Receivers[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Receivers[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.ESDTValues) > 0 {
		for iNdEx := len(m.ESDTValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ESDTValues[iNdEx])
			copy(dAtA[i:], m.ESDTValues[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ESDTValues[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tokens[iNdEx])
			copy(dAtA[i:], m.Tokens[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Tokens[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.Logs != nil {
		{
			size, err := m.Logs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.OriginalSender) > 0 {
		i -= len(m.OriginalSender)
		copy(dAtA[i:], m.OriginalSender)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.OriginalSender)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ReturnMessage) > 0 {
		i -= len(m.ReturnMessage)
		copy(dAtA[i:], m.ReturnMessage)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.ReturnMessage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CodeMetadata) > 0 {
		i -= len(m.CodeMetadata)
		copy(dAtA[i:], m.CodeMetadata)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.CodeMetadata)))
		i--
		dAtA[i] = 0x7a
	}
	if m.CallType != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x70
	}
	if m.GasPrice != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x68
	}
	if m.GasLimit != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x60
	}
	if len(m.OriginalTxHash) > 0 {
		i -= len(m.OriginalTxHash)
		copy(dAtA[i:], m.OriginalTxHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.OriginalTxHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PrevTxHash) > 0 {
		i -= len(m.PrevTxHash)
		copy(dAtA[i:], m.PrevTxHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.PrevTxHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x42
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.RelayedValue)
		i -= size
		if _, err := __caster.MarshalTo(m.RelayedValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.RelayerAddr) > 0 {
		i -= len(m.RelayerAddr)
		copy(dAtA[i:], m.RelayerAddr)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RelayerAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SndAddr) > 0 {
		i -= len(m.SndAddr)
		copy(dAtA[i:], m.SndAddr)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.SndAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RcvAddr) > 0 {
		i -= len(m.RcvAddr)
		copy(dAtA[i:], m.RcvAddr)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RcvAddr)))
		i--
		dAtA[i] = 0x22
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Nonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Events) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Events) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Events) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for iNdEx := len(m.AdditionalData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdditionalData[iNdEx])
			copy(dAtA[i:], m.AdditionalData[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.AdditionalData[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotarizedBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotarizedBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotarizedBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlteredAccounts) > 0 {
		for iNdEx := len(m.AlteredAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlteredAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiHyperBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MiniBlockHashes) > 0 {
		for iNdEx := len(m.MiniBlockHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MiniBlockHashes[iNdEx])
			copy(dAtA[i:], m.MiniBlockHashes[iNdEx])
			i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.MiniBlockHashes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Shard != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x20
	}
	if m.Round != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApiHyperBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiHyperBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiHyperBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Hyperblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.PrevBlockHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.StateRootHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Nonce))
	}
	if m.Round != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Round))
	}
	if m.Epoch != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Epoch))
	}
	if m.NumTxs != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.NumTxs))
	}
	l = len(m.AccumulatedFees)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.DeveloperFees)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.AccumulatedFeesInEpoch)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.DeveloperFeesInEpoch)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Timestamp))
	}
	if m.EpochStartInfo != nil {
		l = m.EpochStartInfo.Size()
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.EpochStartShardsData) > 0 {
		for _, e := range m.EpochStartShardsData {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.ShardBlocks) > 0 {
		for _, e := range m.ShardBlocks {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	return n
}

func (m *EpochStartInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.TotalToDistribute)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.TotalNewlyMinted)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RewardsPerBlock)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RewardsForProtocolSustainability)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.NodePrice)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.PrevEpochStartRound != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.PrevEpochStartRound))
	}
	l = len(m.PrevEpochStartHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	return n
}

func (m *EpochStartShardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.ShardID))
	}
	if m.Epoch != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Round))
	}
	if m.Nonce != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Nonce))
	}
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ScheduledRootHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.FirstPendingMetaBlock)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.LastFinishedMetaBlock)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.PendingMiniBlockHeaders) > 0 {
		for _, e := range m.PendingMiniBlockHeaders {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	return n
}

func (m *MiniBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ProcessingType)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ConstructionState)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.SFromReceiptsStorage {
		n += 2
	}
	if m.SourceShard != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.SourceShard))
	}
	if m.DestinationShard != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.DestinationShard))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if m.IndexOfFirstTxProcessed != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.IndexOfFirstTxProcessed))
	}
	if m.IndexOfLastTxProcessed != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.IndexOfLastTxProcessed))
	}
	return n
}

func (m *ApiTransactionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ProcessingTypeOnSource)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ProcessingTypeOnDestination)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.HashBytes)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Nonce))
	}
	if m.Round != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Round))
	}
	if m.Epoch != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Epoch))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.SenderUsername)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ReceiverUsername)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.GasPrice != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.GasPrice))
	}
	if m.GasLimit != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.GasUsed))
	}
	l = len(m.Data)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.CodeMetadata)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.PreviousTransactionHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.OriginalTransactionHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ReturnMessage)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.OriginalSender)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.SourceShard != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.SourceShard))
	}
	if m.DestinationShard != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.DestinationShard))
	}
	if m.BlockNonce != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.BlockNonce))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.NotarizedAtSourceInMetaNonce != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.NotarizedAtSourceInMetaNonce))
	}
	l = len(m.NotarizedAtSourceInMetaHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.NotarizedAtDestinationInMetaNonce != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.NotarizedAtDestinationInMetaNonce))
	}
	l = len(m.NotarizedAtDestinationInMetaHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.MiniBlockType)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.MiniBlockHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.HyperblockNonce != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.HyperblockNonce))
	}
	l = len(m.HyperblockHash)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.Timestamp))
	}
	if m.Receipt != nil {
		l = m.Receipt.Size()
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.SmartContractResults) > 0 {
		for _, e := range m.SmartContractResults {
			l = e.Size()
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if m.Logs != nil {
		l = m.Logs.Size()
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, s := range m.Tokens {
			l = len(s)
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.ESDTValues) > 0 {
		for _, s := range m.ESDTValues {
			l = len(s)
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, s := range m.Receivers {
			l = len(s)
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.ReceiversShardIDs) > 0 {
		l = 0
		for _, e := range m.ReceiversShardIDs {
			l += sovApiHyperBlock(uint64(e))
		}
		n += 2 + sovApiHyperBlock(uint64(l)) + l
	}
	l = len(m.Operation)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.InitiallyPaidFee)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.IsRelayed {
		n += 3
	}
	if m.IsRefund {
		n += 3
	}
	l = len(m.CallType)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RelayerAddress)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RelayedValue)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.Version))
	}
	if m.Options != 0 {
		n += 2 + sovApiHyperBlock(uint64(m.Options))
	}
	l = len(m.GuardianAddr)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.GuardianSignature)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	return n
}

func (m *ApiReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.SndAddr)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	return n
}

func (m *ApiSmartContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Nonce))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RcvAddr)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.SndAddr)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.RelayerAddr)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.RelayedValue)
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.PrevTxHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.OriginalTxHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.GasPrice))
	}
	if m.CallType != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.CallType))
	}
	l = len(m.CodeMetadata)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.ReturnMessage)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.OriginalSender)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Logs != nil {
		l = m.Logs.Size()
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, s := range m.Tokens {
			l = len(s)
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.ESDTValues) > 0 {
		for _, s := range m.ESDTValues {
			l = len(s)
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, s := range m.Receivers {
			l = len(s)
			n += 2 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.ReceiversShardIDs) > 0 {
		l = 0
		for _, e := range m.ReceiversShardIDs {
			l += sovApiHyperBlock(uint64(e))
		}
		n += 2 + sovApiHyperBlock(uint64(l)) + l
	}
	l = len(m.Operation)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 2 + l + sovApiHyperBlock(uint64(l))
	}
	if m.IsRelayed {
		n += 3
	}
	if m.IsRefund {
		n += 3
	}
	return n
}

func (m *ApiLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	return n
}

func (m *Events) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, b := range m.Topics {
			l = len(b)
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.AdditionalData) > 0 {
		for _, b := range m.AdditionalData {
			l = len(b)
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	return n
}

func (m *NotarizedBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Nonce))
	}
	if m.Round != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Round))
	}
	if m.Shard != 0 {
		n += 1 + sovApiHyperBlock(uint64(m.Shard))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovApiHyperBlock(uint64(l))
	}
	if len(m.MiniBlockHashes) > 0 {
		for _, s := range m.MiniBlockHashes {
			l = len(s)
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	if len(m.AlteredAccounts) > 0 {
		for _, e := range m.AlteredAccounts {
			l = e.Size()
			n += 1 + l + sovApiHyperBlock(uint64(l))
		}
	}
	return n
}

func sovApiHyperBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiHyperBlock(x uint64) (n int) {
	return sovApiHyperBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Hyperblock) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEpochStartShardsData := "[]*EpochStartShardData{"
	for _, f := range this.EpochStartShardsData {
		repeatedStringForEpochStartShardsData += strings.Replace(f.String(), "EpochStartShardData", "EpochStartShardData", 1) + ","
	}
	repeatedStringForEpochStartShardsData += "}"
	repeatedStringForShardBlocks := "[]*NotarizedBlock{"
	for _, f := range this.ShardBlocks {
		repeatedStringForShardBlocks += strings.Replace(f.String(), "NotarizedBlock", "NotarizedBlock", 1) + ","
	}
	repeatedStringForShardBlocks += "}"
	repeatedStringForTransactions := "[]*ApiTransactionResult{"
	for _, f := range this.Transactions {
		repeatedStringForTransactions += strings.Replace(f.String(), "ApiTransactionResult", "ApiTransactionResult", 1) + ","
	}
	repeatedStringForTransactions += "}"
	s := strings.Join([]string{`&Hyperblock{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`PrevBlockHash:` + fmt.Sprintf("%v", this.PrevBlockHash) + `,`,
		`StateRootHash:` + fmt.Sprintf("%v", this.StateRootHash) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`NumTxs:` + fmt.Sprintf("%v", this.NumTxs) + `,`,
		`AccumulatedFees:` + fmt.Sprintf("%v", this.AccumulatedFees) + `,`,
		`DeveloperFees:` + fmt.Sprintf("%v", this.DeveloperFees) + `,`,
		`AccumulatedFeesInEpoch:` + fmt.Sprintf("%v", this.AccumulatedFeesInEpoch) + `,`,
		`DeveloperFeesInEpoch:` + fmt.Sprintf("%v", this.DeveloperFeesInEpoch) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`EpochStartInfo:` + strings.Replace(this.EpochStartInfo.String(), "EpochStartInfo", "EpochStartInfo", 1) + `,`,
		`EpochStartShardsData:` + repeatedStringForEpochStartShardsData + `,`,
		`ShardBlocks:` + repeatedStringForShardBlocks + `,`,
		`Transactions:` + repeatedStringForTransactions + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EpochStartInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EpochStartInfo{`,
		`TotalSupply:` + fmt.Sprintf("%v", this.TotalSupply) + `,`,
		`TotalToDistribute:` + fmt.Sprintf("%v", this.TotalToDistribute) + `,`,
		`TotalNewlyMinted:` + fmt.Sprintf("%v", this.TotalNewlyMinted) + `,`,
		`RewardsPerBlock:` + fmt.Sprintf("%v", this.RewardsPerBlock) + `,`,
		`RewardsForProtocolSustainability:` + fmt.Sprintf("%v", this.RewardsForProtocolSustainability) + `,`,
		`NodePrice:` + fmt.Sprintf("%v", this.NodePrice) + `,`,
		`PrevEpochStartRound:` + fmt.Sprintf("%v", this.PrevEpochStartRound) + `,`,
		`PrevEpochStartHash:` + fmt.Sprintf("%v", this.PrevEpochStartHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EpochStartShardData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPendingMiniBlockHeaders := "[]*MiniBlock{"
	for _, f := range this.PendingMiniBlockHeaders {
		repeatedStringForPendingMiniBlockHeaders += strings.Replace(f.String(), "MiniBlock", "MiniBlock", 1) + ","
	}
	repeatedStringForPendingMiniBlockHeaders += "}"
	s := strings.Join([]string{`&EpochStartShardData{`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`ScheduledRootHash:` + fmt.Sprintf("%v", this.ScheduledRootHash) + `,`,
		`FirstPendingMetaBlock:` + fmt.Sprintf("%v", this.FirstPendingMetaBlock) + `,`,
		`LastFinishedMetaBlock:` + fmt.Sprintf("%v", this.LastFinishedMetaBlock) + `,`,
		`PendingMiniBlockHeaders:` + repeatedStringForPendingMiniBlockHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *MiniBlock) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTransactions := "[]*ApiTransactionResult{"
	for _, f := range this.Transactions {
		repeatedStringForTransactions += strings.Replace(f.String(), "ApiTransactionResult", "ApiTransactionResult", 1) + ","
	}
	repeatedStringForTransactions += "}"
	repeatedStringForReceipts := "[]*ApiReceipt{"
	for _, f := range this.Receipts {
		repeatedStringForReceipts += strings.Replace(f.String(), "ApiReceipt", "ApiReceipt", 1) + ","
	}
	repeatedStringForReceipts += "}"
	s := strings.Join([]string{`&MiniBlock{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ProcessingType:` + fmt.Sprintf("%v", this.ProcessingType) + `,`,
		`ConstructionState:` + fmt.Sprintf("%v", this.ConstructionState) + `,`,
		`SFromReceiptsStorage:` + fmt.Sprintf("%v", this.SFromReceiptsStorage) + `,`,
		`SourceShard:` + fmt.Sprintf("%v", this.SourceShard) + `,`,
		`DestinationShard:` + fmt.Sprintf("%v", this.DestinationShard) + `,`,
		`Transactions:` + repeatedStringForTransactions + `,`,
		`Receipts:` + repeatedStringForReceipts + `,`,
		`IndexOfFirstTxProcessed:` + fmt.Sprintf("%v", this.IndexOfFirstTxProcessed) + `,`,
		`IndexOfLastTxProcessed:` + fmt.Sprintf("%v", this.IndexOfLastTxProcessed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiTransactionResult) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSmartContractResults := "[]*ApiSmartContractResult{"
	for _, f := range this.SmartContractResults {
		repeatedStringForSmartContractResults += strings.Replace(f.String(), "ApiSmartContractResult", "ApiSmartContractResult", 1) + ","
	}
	repeatedStringForSmartContractResults += "}"
	s := strings.Join([]string{`&ApiTransactionResult{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ProcessingTypeOnSource:` + fmt.Sprintf("%v", this.ProcessingTypeOnSource) + `,`,
		`ProcessingTypeOnDestination:` + fmt.Sprintf("%v", this.ProcessingTypeOnDestination) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`HashBytes:` + fmt.Sprintf("%v", this.HashBytes) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`SenderUsername:` + fmt.Sprintf("%v", this.SenderUsername) + `,`,
		`ReceiverUsername:` + fmt.Sprintf("%v", this.ReceiverUsername) + `,`,
		`GasPrice:` + fmt.Sprintf("%v", this.GasPrice) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`CodeMetadata:` + fmt.Sprintf("%v", this.CodeMetadata) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`PreviousTransactionHash:` + fmt.Sprintf("%v", this.PreviousTransactionHash) + `,`,
		`OriginalTransactionHash:` + fmt.Sprintf("%v", this.OriginalTransactionHash) + `,`,
		`ReturnMessage:` + fmt.Sprintf("%v", this.ReturnMessage) + `,`,
		`OriginalSender:` + fmt.Sprintf("%v", this.OriginalSender) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`SourceShard:` + fmt.Sprintf("%v", this.SourceShard) + `,`,
		`DestinationShard:` + fmt.Sprintf("%v", this.DestinationShard) + `,`,
		`BlockNonce:` + fmt.Sprintf("%v", this.BlockNonce) + `,`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`NotarizedAtSourceInMetaNonce:` + fmt.Sprintf("%v", this.NotarizedAtSourceInMetaNonce) + `,`,
		`NotarizedAtSourceInMetaHash:` + fmt.Sprintf("%v", this.NotarizedAtSourceInMetaHash) + `,`,
		`NotarizedAtDestinationInMetaNonce:` + fmt.Sprintf("%v", this.NotarizedAtDestinationInMetaNonce) + `,`,
		`NotarizedAtDestinationInMetaHash:` + fmt.Sprintf("%v", this.NotarizedAtDestinationInMetaHash) + `,`,
		`MiniBlockType:` + fmt.Sprintf("%v", this.MiniBlockType) + `,`,
		`MiniBlockHash:` + fmt.Sprintf("%v", this.MiniBlockHash) + `,`,
		`HyperblockNonce:` + fmt.Sprintf("%v", this.HyperblockNonce) + `,`,
		`HyperblockHash:` + fmt.Sprintf("%v", this.HyperblockHash) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Receipt:` + strings.Replace(this.Receipt.String(), "ApiReceipt", "ApiReceipt", 1) + `,`,
		`SmartContractResults:` + repeatedStringForSmartContractResults + `,`,
		`Logs:` + strings.Replace(this.Logs.String(), "ApiLogs", "ApiLogs", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Tokens:` + fmt.Sprintf("%v", this.Tokens) + `,`,
		`ESDTValues:` + fmt.Sprintf("%v", this.ESDTValues) + `,`,
		`Receivers:` + fmt.Sprintf("%v", this.Receivers) + `,`,
		`ReceiversShardIDs:` + fmt.Sprintf("%v", this.ReceiversShardIDs) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Function:` + fmt.Sprintf("%v", this.Function) + `,`,
		`InitiallyPaidFee:` + fmt.Sprintf("%v", this.InitiallyPaidFee) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`IsRelayed:` + fmt.Sprintf("%v", this.IsRelayed) + `,`,
		`IsRefund:` + fmt.Sprintf("%v", this.IsRefund) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`RelayerAddress:` + fmt.Sprintf("%v", this.RelayerAddress) + `,`,
		`RelayedValue:` + fmt.Sprintf("%v", this.RelayedValue) + `,`,
		`ChainID:` + fmt.Sprintf("%v", this.ChainID) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`GuardianAddr:` + fmt.Sprintf("%v", this.GuardianAddr) + `,`,
		`GuardianSignature:` + fmt.Sprintf("%v", this.GuardianSignature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiReceipt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiReceipt{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`SndAddr:` + fmt.Sprintf("%v", this.SndAddr) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiSmartContractResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiSmartContractResult{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`RcvAddr:` + fmt.Sprintf("%v", this.RcvAddr) + `,`,
		`SndAddr:` + fmt.Sprintf("%v", this.SndAddr) + `,`,
		`RelayerAddr:` + fmt.Sprintf("%v", this.RelayerAddr) + `,`,
		`RelayedValue:` + fmt.Sprintf("%v", this.RelayedValue) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`PrevTxHash:` + fmt.Sprintf("%v", this.PrevTxHash) + `,`,
		`OriginalTxHash:` + fmt.Sprintf("%v", this.OriginalTxHash) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`GasPrice:` + fmt.Sprintf("%v", this.GasPrice) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`CodeMetadata:` + fmt.Sprintf("%v", this.CodeMetadata) + `,`,
		`ReturnMessage:` + fmt.Sprintf("%v", this.ReturnMessage) + `,`,
		`OriginalSender:` + fmt.Sprintf("%v", this.OriginalSender) + `,`,
		`Logs:` + strings.Replace(this.Logs.String(), "ApiLogs", "ApiLogs", 1) + `,`,
		`Tokens:` + fmt.Sprintf("%v", this.Tokens) + `,`,
		`ESDTValues:` + fmt.Sprintf("%v", this.ESDTValues) + `,`,
		`Receivers:` + fmt.Sprintf("%v", this.Receivers) + `,`,
		`ReceiversShardIDs:` + fmt.Sprintf("%v", this.ReceiversShardIDs) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Function:` + fmt.Sprintf("%v", this.Function) + `,`,
		`IsRelayed:` + fmt.Sprintf("%v", this.IsRelayed) + `,`,
		`IsRefund:` + fmt.Sprintf("%v", this.IsRefund) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiLogs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*Events{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "Events", "Events", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&ApiLogs{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *Events) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Events{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Topics:` + fmt.Sprintf("%v", this.Topics) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`AdditionalData:` + fmt.Sprintf("%v", this.AdditionalData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotarizedBlock) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlteredAccounts := "[]*AlteredAccount{"
	for _, f := range this.AlteredAccounts {
		repeatedStringForAlteredAccounts += strings.Replace(fmt.Sprintf("%v", f), "AlteredAccount", "alteredAccount.AlteredAccount", 1) + ","
	}
	repeatedStringForAlteredAccounts += "}"
	s := strings.Join([]string{`&NotarizedBlock{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Shard:` + fmt.Sprintf("%v", this.Shard) + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`MiniBlockHashes:` + fmt.Sprintf("%v", this.MiniBlockHashes) + `,`,
		`AlteredAccounts:` + repeatedStringForAlteredAccounts + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApiHyperBlock(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Hyperblock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hyperblock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hyperblock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTxs", wireType)
			}
			m.NumTxs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTxs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatedFees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperFees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFeesInEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatedFeesInEpoch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperFeesInEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperFeesInEpoch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochStartInfo == nil {
				m.EpochStartInfo = &EpochStartInfo{}
			}
			if err := m.EpochStartInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartShardsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochStartShardsData = append(m.EpochStartShardsData, &EpochStartShardData{})
			if err := m.EpochStartShardsData[len(m.EpochStartShardsData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardBlocks = append(m.ShardBlocks, &NotarizedBlock{})
			if err := m.ShardBlocks[len(m.ShardBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &ApiTransactionResult{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochStartInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochStartInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochStartInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalToDistribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalToDistribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNewlyMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalNewlyMinted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPerBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPerBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsForProtocolSustainability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsForProtocolSustainability = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEpochStartRound", wireType)
			}
			m.PrevEpochStartRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevEpochStartRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEpochStartHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevEpochStartHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochStartShardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochStartShardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochStartShardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPendingMetaBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstPendingMetaBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFinishedMetaBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFinishedMetaBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingMiniBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingMiniBlockHeaders = append(m.PendingMiniBlockHeaders, &MiniBlock{})
			if err := m.PendingMiniBlockHeaders[len(m.PendingMiniBlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiniBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstructionState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstructionState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SFromReceiptsStorage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SFromReceiptsStorage = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceShard", wireType)
			}
			m.SourceShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceShard |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationShard", wireType)
			}
			m.DestinationShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationShard |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &ApiTransactionResult{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, &ApiReceipt{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOfFirstTxProcessed", wireType)
			}
			m.IndexOfFirstTxProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOfFirstTxProcessed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOfLastTxProcessed", wireType)
			}
			m.IndexOfLastTxProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOfLastTxProcessed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiTransactionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiTransactionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiTransactionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingTypeOnSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessingTypeOnSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingTypeOnDestination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessingTypeOnDestination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashBytes = append(m.HashBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.HashBytes == nil {
				m.HashBytes = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUsername", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderUsername = append(m.SenderUsername[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderUsername == nil {
				m.SenderUsername = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverUsername", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverUsername = append(m.ReceiverUsername[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiverUsername == nil {
				m.ReceiverUsername = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMetadata = append(m.CodeMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeMetadata == nil {
				m.CodeMetadata = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousTransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousTransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceShard", wireType)
			}
			m.SourceShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceShard |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationShard", wireType)
			}
			m.DestinationShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationShard |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNonce", wireType)
			}
			m.BlockNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedAtSourceInMetaNonce", wireType)
			}
			m.NotarizedAtSourceInMetaNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotarizedAtSourceInMetaNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedAtSourceInMetaHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedAtSourceInMetaHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedAtDestinationInMetaNonce", wireType)
			}
			m.NotarizedAtDestinationInMetaNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotarizedAtDestinationInMetaNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotarizedAtDestinationInMetaHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotarizedAtDestinationInMetaHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlockType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlockType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperblockNonce", wireType)
			}
			m.HyperblockNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperblockNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperblockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyperblockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipt == nil {
				m.Receipt = &ApiReceipt{}
			}
			if err := m.Receipt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractResults = append(m.SmartContractResults, &ApiSmartContractResult{})
			if err := m.SmartContractResults[len(m.SmartContractResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = &ApiLogs{}
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = github_com_multiversx_mx_chain_core_go_data_transaction.TxStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ESDTValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ESDTValues = append(m.ESDTValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 46:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiHyperBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReceiversShardIDs = append(m.ReceiversShardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiHyperBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApiHyperBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApiHyperBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReceiversShardIDs) == 0 {
					m.ReceiversShardIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiHyperBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReceiversShardIDs = append(m.ReceiversShardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiversShardIDs", wireType)
			}
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiallyPaidFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiallyPaidFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRelayed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRelayed = bool(v != 0)
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefund", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRefund = bool(v != 0)
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardianAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardianSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SndAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiSmartContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiSmartContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiSmartContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcvAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SndAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.RelayedValue = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= github_com_multiversx_mx_chain_core_go_data_vm.CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = &ApiLogs{}
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ESDTValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ESDTValues = append(m.ESDTValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiHyperBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReceiversShardIDs = append(m.ReceiversShardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiHyperBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApiHyperBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApiHyperBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReceiversShardIDs) == 0 {
					m.ReceiversShardIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiHyperBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReceiversShardIDs = append(m.ReceiversShardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiversShardIDs", wireType)
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRelayed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRelayed = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefund", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRefund = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Events{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Events) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, make([]byte, postIndex-iNdEx))
			copy(m.Topics[len(m.Topics)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, make([]byte, postIndex-iNdEx))
			copy(m.AdditionalData[len(m.AdditionalData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotarizedBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotarizedBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotarizedBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlockHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlockHashes = append(m.MiniBlockHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlteredAccounts = append(m.AlteredAccounts, &alteredAccount.AlteredAccount{})
			if err := m.AlteredAccounts[len(m.AlteredAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiHyperBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiHyperBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiHyperBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiHyperBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiHyperBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiHyperBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApiHyperBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApiHyperBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApiHyperBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiHyperBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApiHyperBlock = fmt.Errorf("proto: unexpected end of group")
)
