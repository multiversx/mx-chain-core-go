// This file holds the data structures related with the functionality of a shard block
//
// MiniBlock structure represents the body of a transaction block, holding an array of miniblocks
// each of the miniblocks has a different destination shard
// The body can be transmitted even before having built the heder and go through a prevalidation of each transaction

syntax = "proto3";

package proto;

option go_package = "github.com/multiversx/mx-chain-core-go/data/transaction;transaction";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Transaction holds all the data needed for a value transfer or SC call
message Transaction {
	uint64   Nonce             = 1  [(gogoproto.jsontag) = "nonce"];
	bytes    Value             = 2  [(gogoproto.jsontag) = "value", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
	bytes    RcvAddr           = 3  [(gogoproto.jsontag) = "receiver"];
	bytes    RcvUserName       = 4  [(gogoproto.jsontag) = "rcvUserName,omitempty"];
	bytes    SndAddr           = 5  [(gogoproto.jsontag) = "sender"];
	bytes    SndUserName       = 6  [(gogoproto.jsontag) = "sndUserName,omitempty"];
	uint64   GasPrice          = 7  [(gogoproto.jsontag) = "gasPrice,omitempty"];
	uint64   GasLimit          = 8  [(gogoproto.jsontag) = "gasLimit,omitempty"];
	bytes    Data              = 9  [(gogoproto.jsontag) = "data,omitempty"];
	bytes    ChainID           = 10 [(gogoproto.jsontag) = "chainID"];
	uint32   Version           = 11 [(gogoproto.jsontag) = "version"];
	bytes    Signature         = 12 [(gogoproto.jsontag) = "signature,omitempty"];
	uint32   Options           = 13 [(gogoproto.jsontag) = "options,omitempty"];
	bytes    GuardianAddr      = 14 [(gogoproto.jsontag) = "guardian,omitempty"];
	bytes    GuardianSignature = 15 [(gogoproto.jsontag) = "guardianSignature,omitempty"];
}
