// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alteredAccount.proto

package alteredAccount

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AlteredAccount struct {
	Address        string                 `protobuf:"bytes,1,opt,name=Address,proto3" json:"address"`
	Nonce          uint64                 `protobuf:"varint,2,opt,name=Nonce,proto3" json:"nonce"`
	Balance        string                 `protobuf:"bytes,3,opt,name=Balance,proto3" json:"balance,omitempty"`
	Tokens         []*AccountTokenData    `protobuf:"bytes,4,rep,name=Tokens,proto3" json:"tokens,omitempty"`
	AdditionalData *AdditionalAccountData `protobuf:"bytes,5,opt,name=AdditionalData,proto3" json:"additionalAccountData,omitempty"`
}

func (m *AlteredAccount) Reset()      { *m = AlteredAccount{} }
func (*AlteredAccount) ProtoMessage() {}
func (*AlteredAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_804e04a1cde31bca, []int{0}
}
func (m *AlteredAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlteredAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AlteredAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlteredAccount.Merge(m, src)
}
func (m *AlteredAccount) XXX_Size() int {
	return m.Size()
}
func (m *AlteredAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AlteredAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AlteredAccount proto.InternalMessageInfo

func (m *AlteredAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AlteredAccount) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AlteredAccount) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *AlteredAccount) GetTokens() []*AccountTokenData {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *AlteredAccount) GetAdditionalData() *AdditionalAccountData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type AccountTokenData struct {
	Nonce          uint64                      `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	Identifier     string                      `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"identifier"`
	Balance        string                      `protobuf:"bytes,3,opt,name=Balance,proto3" json:"balance"`
	Properties     string                      `protobuf:"bytes,4,opt,name=Properties,proto3" json:"properties"`
	MetaData       *TokenMetaData              `protobuf:"bytes,5,opt,name=MetaData,proto3" json:"metaData,omitempty"`
	AdditionalData *AdditionalAccountTokenData `protobuf:"bytes,6,opt,name=AdditionalData,proto3" json:"additionalData,omitempty"`
}

func (m *AccountTokenData) Reset()      { *m = AccountTokenData{} }
func (*AccountTokenData) ProtoMessage() {}
func (*AccountTokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_804e04a1cde31bca, []int{1}
}
func (m *AccountTokenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountTokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AccountTokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountTokenData.Merge(m, src)
}
func (m *AccountTokenData) XXX_Size() int {
	return m.Size()
}
func (m *AccountTokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountTokenData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountTokenData proto.InternalMessageInfo

func (m *AccountTokenData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AccountTokenData) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AccountTokenData) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *AccountTokenData) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func (m *AccountTokenData) GetMetaData() *TokenMetaData {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *AccountTokenData) GetAdditionalData() *AdditionalAccountTokenData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type TokenMetaData struct {
	Nonce      uint64   `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	Name       string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Creator    string   `protobuf:"bytes,3,opt,name=Creator,proto3" json:"creator"`
	Royalties  uint32   `protobuf:"varint,4,opt,name=Royalties,proto3" json:"royalties"`
	Hash       []byte   `protobuf:"bytes,5,opt,name=Hash,proto3" json:"hash"`
	URIs       [][]byte `protobuf:"bytes,6,rep,name=URIs,proto3" json:"uris"`
	Attributes []byte   `protobuf:"bytes,7,opt,name=Attributes,proto3" json:"attributes"`
}

func (m *TokenMetaData) Reset()      { *m = TokenMetaData{} }
func (*TokenMetaData) ProtoMessage() {}
func (*TokenMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_804e04a1cde31bca, []int{2}
}
func (m *TokenMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TokenMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetaData.Merge(m, src)
}
func (m *TokenMetaData) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetaData proto.InternalMessageInfo

func (m *TokenMetaData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TokenMetaData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenMetaData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TokenMetaData) GetRoyalties() uint32 {
	if m != nil {
		return m.Royalties
	}
	return 0
}

func (m *TokenMetaData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TokenMetaData) GetURIs() [][]byte {
	if m != nil {
		return m.URIs
	}
	return nil
}

func (m *TokenMetaData) GetAttributes() []byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type AdditionalAccountTokenData struct {
	IsNFTCreate bool `protobuf:"varint,1,opt,name=IsNFTCreate,proto3" json:"isNFTCreate,omitempty"`
}

func (m *AdditionalAccountTokenData) Reset()      { *m = AdditionalAccountTokenData{} }
func (*AdditionalAccountTokenData) ProtoMessage() {}
func (*AdditionalAccountTokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_804e04a1cde31bca, []int{3}
}
func (m *AdditionalAccountTokenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdditionalAccountTokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdditionalAccountTokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdditionalAccountTokenData.Merge(m, src)
}
func (m *AdditionalAccountTokenData) XXX_Size() int {
	return m.Size()
}
func (m *AdditionalAccountTokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_AdditionalAccountTokenData.DiscardUnknown(m)
}

var xxx_messageInfo_AdditionalAccountTokenData proto.InternalMessageInfo

func (m *AdditionalAccountTokenData) GetIsNFTCreate() bool {
	if m != nil {
		return m.IsNFTCreate
	}
	return false
}

type AdditionalAccountData struct {
	IsSender         bool   `protobuf:"varint,1,opt,name=IsSender,proto3" json:"isSender,omitempty"`
	BalanceChanged   bool   `protobuf:"varint,2,opt,name=BalanceChanged,proto3" json:"balanceChanged,omitempty"`
	CurrentOwner     string `protobuf:"bytes,3,opt,name=CurrentOwner,proto3" json:"currentOwner,omitempty"`
	UserName         string `protobuf:"bytes,4,opt,name=UserName,proto3" json:"userName,omitempty"`
	DeveloperRewards string `protobuf:"bytes,5,opt,name=DeveloperRewards,proto3" json:"developerRewards,omitempty"`
	CodeHash         []byte `protobuf:"bytes,6,opt,name=CodeHash,proto3" json:"codeHash,omitempty"`
	RootHash         []byte `protobuf:"bytes,7,opt,name=RootHash,proto3" json:"rootHash,omitempty"`
	CodeMetadata     []byte `protobuf:"bytes,8,opt,name=CodeMetadata,proto3" json:"codeMetadata,omitempty"`
}

func (m *AdditionalAccountData) Reset()      { *m = AdditionalAccountData{} }
func (*AdditionalAccountData) ProtoMessage() {}
func (*AdditionalAccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_804e04a1cde31bca, []int{4}
}
func (m *AdditionalAccountData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdditionalAccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdditionalAccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdditionalAccountData.Merge(m, src)
}
func (m *AdditionalAccountData) XXX_Size() int {
	return m.Size()
}
func (m *AdditionalAccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_AdditionalAccountData.DiscardUnknown(m)
}

var xxx_messageInfo_AdditionalAccountData proto.InternalMessageInfo

func (m *AdditionalAccountData) GetIsSender() bool {
	if m != nil {
		return m.IsSender
	}
	return false
}

func (m *AdditionalAccountData) GetBalanceChanged() bool {
	if m != nil {
		return m.BalanceChanged
	}
	return false
}

func (m *AdditionalAccountData) GetCurrentOwner() string {
	if m != nil {
		return m.CurrentOwner
	}
	return ""
}

func (m *AdditionalAccountData) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *AdditionalAccountData) GetDeveloperRewards() string {
	if m != nil {
		return m.DeveloperRewards
	}
	return ""
}

func (m *AdditionalAccountData) GetCodeHash() []byte {
	if m != nil {
		return m.CodeHash
	}
	return nil
}

func (m *AdditionalAccountData) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *AdditionalAccountData) GetCodeMetadata() []byte {
	if m != nil {
		return m.CodeMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*AlteredAccount)(nil), "proto.AlteredAccount")
	proto.RegisterType((*AccountTokenData)(nil), "proto.AccountTokenData")
	proto.RegisterType((*TokenMetaData)(nil), "proto.TokenMetaData")
	proto.RegisterType((*AdditionalAccountTokenData)(nil), "proto.AdditionalAccountTokenData")
	proto.RegisterType((*AdditionalAccountData)(nil), "proto.AdditionalAccountData")
}

func init() { proto.RegisterFile("alteredAccount.proto", fileDescriptor_804e04a1cde31bca) }

var fileDescriptor_804e04a1cde31bca = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0xcd, 0x6a, 0xeb, 0x46,
	0x14, 0xc7, 0x2d, 0x7f, 0x7b, 0x9c, 0x98, 0x54, 0x24, 0xa9, 0x6b, 0x82, 0xe4, 0xba, 0x14, 0x0c,
	0xad, 0x6d, 0x48, 0x97, 0x81, 0x82, 0xe5, 0xb4, 0xc4, 0x85, 0xa6, 0x45, 0x4d, 0x16, 0xed, 0x6e,
	0x2c, 0x4d, 0x6c, 0x51, 0x4b, 0x63, 0x46, 0xa3, 0x7c, 0xec, 0x0a, 0xdd, 0x97, 0x3e, 0x46, 0xdf,
	0xa1, 0x2f, 0xd0, 0x65, 0x96, 0x59, 0x89, 0x46, 0xd9, 0x5c, 0x04, 0x17, 0xb2, 0xbd, 0xbb, 0xcb,
	0x1c, 0x49, 0xf6, 0x28, 0x1f, 0xf7, 0xae, 0x92, 0xf9, 0x9f, 0x73, 0xfe, 0xe7, 0xf8, 0x77, 0x66,
	0x6c, 0xb4, 0x8b, 0x97, 0x9c, 0x30, 0x62, 0x8f, 0x2d, 0x8b, 0x06, 0x1e, 0x1f, 0xae, 0x18, 0xe5,
	0x54, 0xad, 0xc0, 0x9f, 0xce, 0x60, 0xee, 0xf0, 0x45, 0x30, 0x1b, 0x5a, 0xd4, 0x1d, 0xcd, 0xe9,
	0x9c, 0x8e, 0x40, 0x9e, 0x05, 0x17, 0x70, 0x82, 0x03, 0xfc, 0x97, 0x54, 0xf5, 0xfe, 0x2d, 0xa2,
	0xd6, 0x38, 0x67, 0xa7, 0x7e, 0x89, 0x6a, 0x63, 0xdb, 0x66, 0xc4, 0xf7, 0xdb, 0x4a, 0x57, 0xe9,
	0x37, 0x8c, 0x66, 0x1c, 0xea, 0x35, 0x9c, 0x48, 0x66, 0x16, 0x53, 0x75, 0x54, 0x39, 0xa5, 0x9e,
	0x45, 0xda, 0xc5, 0xae, 0xd2, 0x2f, 0x1b, 0x8d, 0x38, 0xd4, 0x2b, 0x9e, 0x10, 0xcc, 0x44, 0x57,
	0x47, 0xa8, 0x66, 0xe0, 0x25, 0x16, 0x29, 0x25, 0xf0, 0xd9, 0x8b, 0x43, 0xfd, 0x93, 0x59, 0x22,
	0x7d, 0x4d, 0x5d, 0x87, 0x13, 0x77, 0xc5, 0x6f, 0xcc, 0x2c, 0x4b, 0xfd, 0x0e, 0x55, 0xcf, 0xe8,
	0xef, 0xc4, 0xf3, 0xdb, 0xe5, 0x6e, 0xa9, 0xdf, 0x3c, 0xfc, 0x34, 0x99, 0x71, 0x98, 0x0e, 0x06,
	0xb1, 0x63, 0xcc, 0xb1, 0xb1, 0x1b, 0x87, 0xfa, 0x0e, 0x87, 0x54, 0xc9, 0x27, 0x2d, 0x56, 0x1d,
	0xd4, 0x1a, 0xdb, 0xb6, 0xc3, 0x1d, 0xea, 0xe1, 0xa5, 0xc8, 0x6f, 0x57, 0xba, 0x4a, 0xbf, 0x79,
	0x78, 0x90, 0xd9, 0xad, 0x83, 0xa9, 0x31, 0x78, 0x7e, 0x11, 0x87, 0xba, 0x8e, 0x5f, 0x0a, 0x49,
	0x2d, 0x9e, 0x18, 0xf7, 0xde, 0x16, 0xd1, 0xce, 0xd3, 0xe9, 0x36, 0x60, 0x94, 0x57, 0xc0, 0x0c,
	0x11, 0x9a, 0xda, 0xc4, 0xe3, 0xce, 0x85, 0x43, 0x18, 0xe0, 0x6b, 0x18, 0xad, 0x38, 0xd4, 0x91,
	0xb3, 0x56, 0x4d, 0x29, 0x43, 0x2c, 0x24, 0x0f, 0x12, 0x16, 0x92, 0x82, 0xdc, 0xe0, 0x1b, 0x22,
	0xf4, 0x33, 0xa3, 0x2b, 0xc2, 0xb8, 0x43, 0x04, 0xc2, 0xb5, 0xed, 0x6a, 0xad, 0x9a, 0x52, 0x86,
	0x7a, 0x82, 0xea, 0x3f, 0x12, 0x8e, 0x25, 0x42, 0xbb, 0x29, 0x21, 0xf8, 0x2c, 0x59, 0xcc, 0xd8,
	0x8f, 0x43, 0x5d, 0x75, 0xd3, 0x93, 0x04, 0x63, 0x5d, 0xad, 0xce, 0x9f, 0x11, 0xaf, 0x82, 0xdf,
	0xe7, 0xaf, 0x11, 0xdf, 0xac, 0xf2, 0x20, 0x0e, 0xf5, 0x36, 0xce, 0x15, 0x7f, 0x80, 0xf7, 0x5f,
	0x45, 0xb4, 0x9d, 0x1b, 0xee, 0xe3, 0xb0, 0x0f, 0x50, 0xf9, 0x14, 0xbb, 0x24, 0xc5, 0x5c, 0x8f,
	0x43, 0xbd, 0xec, 0x61, 0x97, 0x98, 0xa0, 0x0a, 0xb4, 0x13, 0x46, 0x30, 0xa7, 0x4c, 0x46, 0x6b,
	0x25, 0x92, 0x99, 0xc5, 0xd4, 0xaf, 0x50, 0xc3, 0xa4, 0x37, 0x78, 0xb9, 0x26, 0xbb, 0x6d, 0x6c,
	0xc7, 0xa1, 0xde, 0x60, 0x99, 0x68, 0x6e, 0xe2, 0xa2, 0xe3, 0x09, 0xf6, 0x17, 0xc0, 0x74, 0x2b,
	0xe9, 0xb8, 0xc0, 0xfe, 0xc2, 0x04, 0x55, 0x44, 0xcf, 0xcd, 0xa9, 0xdf, 0xae, 0x76, 0x4b, 0x59,
	0x34, 0x60, 0x8e, 0x6f, 0x82, 0x2a, 0x76, 0x38, 0xe6, 0x9c, 0x39, 0xb3, 0x80, 0x13, 0xbf, 0x5d,
	0x03, 0x07, 0xd8, 0x21, 0x5e, 0xab, 0xa6, 0x94, 0xd1, 0xfb, 0x15, 0x75, 0x5e, 0x87, 0xab, 0x1e,
	0xa1, 0xe6, 0xd4, 0x3f, 0xfd, 0xfe, 0x0c, 0x3e, 0x46, 0x82, 0xa8, 0x6e, 0x7c, 0x16, 0x87, 0xfa,
	0x9e, 0xb3, 0x91, 0x25, 0xdc, 0x72, 0x76, 0xef, 0x5d, 0x09, 0xed, 0xbd, 0xf8, 0x54, 0xd4, 0x43,
	0x54, 0x9f, 0xfa, 0xbf, 0x10, 0xcf, 0x26, 0x2c, 0xf5, 0x84, 0x2b, 0xe2, 0xa4, 0x9a, 0x7c, 0x45,
	0xb2, 0x3c, 0xf5, 0x18, 0xb5, 0xd2, 0x7b, 0x3a, 0x59, 0x60, 0x6f, 0x4e, 0x6c, 0x58, 0x48, 0x3d,
	0xd9, 0xff, 0x2c, 0x17, 0x91, 0xf7, 0x9f, 0xaf, 0x51, 0xbf, 0x45, 0x5b, 0x93, 0x80, 0x31, 0xe2,
	0xf1, 0x9f, 0xae, 0x3c, 0x92, 0xed, 0xac, 0x13, 0x87, 0xfa, 0xbe, 0x25, 0xe9, 0x92, 0x43, 0x2e,
	0x5f, 0x4c, 0x7e, 0xee, 0x13, 0x06, 0x17, 0x22, 0x79, 0x20, 0x30, 0x79, 0x90, 0x6a, 0xf2, 0xe4,
	0x59, 0x9e, 0xfa, 0x03, 0xda, 0x39, 0x26, 0x97, 0x64, 0x29, 0xde, 0x8d, 0x49, 0xae, 0x30, 0xb3,
	0x7d, 0x58, 0x6d, 0xc3, 0xd0, 0xe2, 0x50, 0xef, 0xd8, 0x4f, 0x62, 0x92, 0xc7, 0xb3, 0x3a, 0xd1,
	0x7f, 0x42, 0x6d, 0x02, 0xd7, 0xa3, 0x0a, 0xcb, 0x85, 0xfe, 0x56, 0xaa, 0xc9, 0xfd, 0xb3, 0x3c,
	0x51, 0x63, 0x52, 0xca, 0xa1, 0xa6, 0xb6, 0xa9, 0x61, 0xa9, 0x26, 0xd7, 0x64, 0x79, 0xc0, 0x89,
	0xda, 0x44, 0xbc, 0x12, 0x5b, 0x3c, 0xc7, 0x3a, 0xd4, 0x25, 0x9c, 0x24, 0x3d, 0xc7, 0x49, 0xd2,
	0x8d, 0x3f, 0x95, 0xdb, 0x7b, 0xad, 0x70, 0x77, 0xaf, 0x15, 0x1e, 0xef, 0x35, 0xe5, 0x8f, 0x48,
	0x53, 0xfe, 0x89, 0x34, 0xe5, 0xbf, 0x48, 0x53, 0x6e, 0x23, 0x4d, 0xb9, 0x8b, 0x34, 0xe5, 0xff,
	0x48, 0x53, 0xde, 0x44, 0x5a, 0xe1, 0x31, 0xd2, 0x94, 0xbf, 0x1f, 0xb4, 0xc2, 0xed, 0x83, 0x56,
	0xb8, 0x7b, 0xd0, 0x0a, 0xbf, 0x4d, 0xa5, 0xdf, 0x1f, 0x37, 0x58, 0x72, 0xe7, 0x92, 0x30, 0xff,
	0x7a, 0xe4, 0x5e, 0x0f, 0xac, 0x05, 0x76, 0xbc, 0x81, 0x45, 0x19, 0x19, 0xcc, 0xe9, 0x48, 0xf4,
	0x19, 0xe5, 0x7f, 0xc8, 0x8e, 0xf2, 0xc7, 0x59, 0x15, 0xbe, 0x3d, 0xbe, 0x79, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0xf3, 0xb4, 0x64, 0x47, 0xf0, 0x06, 0x00, 0x00,
}

func (this *AlteredAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlteredAccount)
	if !ok {
		that2, ok := that.(AlteredAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(that1.Tokens[i]) {
			return false
		}
	}
	if !this.AdditionalData.Equal(that1.AdditionalData) {
		return false
	}
	return true
}
func (this *AccountTokenData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountTokenData)
	if !ok {
		that2, ok := that.(AccountTokenData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.Properties != that1.Properties {
		return false
	}
	if !this.MetaData.Equal(that1.MetaData) {
		return false
	}
	if !this.AdditionalData.Equal(that1.AdditionalData) {
		return false
	}
	return true
}
func (this *TokenMetaData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenMetaData)
	if !ok {
		that2, ok := that.(TokenMetaData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Royalties != that1.Royalties {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if len(this.URIs) != len(that1.URIs) {
		return false
	}
	for i := range this.URIs {
		if !bytes.Equal(this.URIs[i], that1.URIs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Attributes, that1.Attributes) {
		return false
	}
	return true
}
func (this *AdditionalAccountTokenData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdditionalAccountTokenData)
	if !ok {
		that2, ok := that.(AdditionalAccountTokenData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsNFTCreate != that1.IsNFTCreate {
		return false
	}
	return true
}
func (this *AdditionalAccountData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdditionalAccountData)
	if !ok {
		that2, ok := that.(AdditionalAccountData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSender != that1.IsSender {
		return false
	}
	if this.BalanceChanged != that1.BalanceChanged {
		return false
	}
	if this.CurrentOwner != that1.CurrentOwner {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	if this.DeveloperRewards != that1.DeveloperRewards {
		return false
	}
	if !bytes.Equal(this.CodeHash, that1.CodeHash) {
		return false
	}
	if !bytes.Equal(this.RootHash, that1.RootHash) {
		return false
	}
	if !bytes.Equal(this.CodeMetadata, that1.CodeMetadata) {
		return false
	}
	return true
}
func (this *AlteredAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&alteredAccount.AlteredAccount{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	if this.Tokens != nil {
		s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountTokenData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alteredAccount.AccountTokenData{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	s = append(s, "Properties: "+fmt.Sprintf("%#v", this.Properties)+",\n")
	if this.MetaData != nil {
		s = append(s, "MetaData: "+fmt.Sprintf("%#v", this.MetaData)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenMetaData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&alteredAccount.TokenMetaData{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	s = append(s, "Royalties: "+fmt.Sprintf("%#v", this.Royalties)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "URIs: "+fmt.Sprintf("%#v", this.URIs)+",\n")
	s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdditionalAccountTokenData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alteredAccount.AdditionalAccountTokenData{")
	s = append(s, "IsNFTCreate: "+fmt.Sprintf("%#v", this.IsNFTCreate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdditionalAccountData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&alteredAccount.AdditionalAccountData{")
	s = append(s, "IsSender: "+fmt.Sprintf("%#v", this.IsSender)+",\n")
	s = append(s, "BalanceChanged: "+fmt.Sprintf("%#v", this.BalanceChanged)+",\n")
	s = append(s, "CurrentOwner: "+fmt.Sprintf("%#v", this.CurrentOwner)+",\n")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	s = append(s, "DeveloperRewards: "+fmt.Sprintf("%#v", this.DeveloperRewards)+",\n")
	s = append(s, "CodeHash: "+fmt.Sprintf("%#v", this.CodeHash)+",\n")
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	s = append(s, "CodeMetadata: "+fmt.Sprintf("%#v", this.CodeMetadata)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAlteredAccount(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AlteredAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlteredAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlteredAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdditionalData != nil {
		{
			size, err := m.AdditionalData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlteredAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlteredAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintAlteredAccount(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountTokenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountTokenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountTokenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdditionalData != nil {
		{
			size, err := m.AdditionalData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlteredAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MetaData != nil {
		{
			size, err := m.MetaData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlteredAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Properties) > 0 {
		i -= len(m.Properties)
		copy(dAtA[i:], m.Properties)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Properties)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintAlteredAccount(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		i -= len(m.Attributes)
		copy(dAtA[i:], m.Attributes)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Attributes)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.URIs) > 0 {
		for iNdEx := len(m.URIs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.URIs[iNdEx])
			copy(dAtA[i:], m.URIs[iNdEx])
			i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.URIs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Royalties != 0 {
		i = encodeVarintAlteredAccount(dAtA, i, uint64(m.Royalties))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintAlteredAccount(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdditionalAccountTokenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdditionalAccountTokenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdditionalAccountTokenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNFTCreate {
		i--
		if m.IsNFTCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdditionalAccountData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdditionalAccountData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdditionalAccountData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CodeMetadata) > 0 {
		i -= len(m.CodeMetadata)
		copy(dAtA[i:], m.CodeMetadata)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.CodeMetadata)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeveloperRewards) > 0 {
		i -= len(m.DeveloperRewards)
		copy(dAtA[i:], m.DeveloperRewards)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.DeveloperRewards)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CurrentOwner) > 0 {
		i -= len(m.CurrentOwner)
		copy(dAtA[i:], m.CurrentOwner)
		i = encodeVarintAlteredAccount(dAtA, i, uint64(len(m.CurrentOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BalanceChanged {
		i--
		if m.BalanceChanged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsSender {
		i--
		if m.IsSender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlteredAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlteredAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlteredAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovAlteredAccount(uint64(m.Nonce))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovAlteredAccount(uint64(l))
		}
	}
	if m.AdditionalData != nil {
		l = m.AdditionalData.Size()
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	return n
}

func (m *AccountTokenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovAlteredAccount(uint64(m.Nonce))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.Properties)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	if m.MetaData != nil {
		l = m.MetaData.Size()
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	if m.AdditionalData != nil {
		l = m.AdditionalData.Size()
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	return n
}

func (m *TokenMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovAlteredAccount(uint64(m.Nonce))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	if m.Royalties != 0 {
		n += 1 + sovAlteredAccount(uint64(m.Royalties))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	if len(m.URIs) > 0 {
		for _, b := range m.URIs {
			l = len(b)
			n += 1 + l + sovAlteredAccount(uint64(l))
		}
	}
	l = len(m.Attributes)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	return n
}

func (m *AdditionalAccountTokenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsNFTCreate {
		n += 2
	}
	return n
}

func (m *AdditionalAccountData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSender {
		n += 2
	}
	if m.BalanceChanged {
		n += 2
	}
	l = len(m.CurrentOwner)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.DeveloperRewards)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	l = len(m.CodeMetadata)
	if l > 0 {
		n += 1 + l + sovAlteredAccount(uint64(l))
	}
	return n
}

func sovAlteredAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlteredAccount(x uint64) (n int) {
	return sovAlteredAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AlteredAccount) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTokens := "[]*AccountTokenData{"
	for _, f := range this.Tokens {
		repeatedStringForTokens += strings.Replace(f.String(), "AccountTokenData", "AccountTokenData", 1) + ","
	}
	repeatedStringForTokens += "}"
	s := strings.Join([]string{`&AlteredAccount{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`Tokens:` + repeatedStringForTokens + `,`,
		`AdditionalData:` + strings.Replace(this.AdditionalData.String(), "AdditionalAccountData", "AdditionalAccountData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountTokenData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountTokenData{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`Properties:` + fmt.Sprintf("%v", this.Properties) + `,`,
		`MetaData:` + strings.Replace(this.MetaData.String(), "TokenMetaData", "TokenMetaData", 1) + `,`,
		`AdditionalData:` + strings.Replace(this.AdditionalData.String(), "AdditionalAccountTokenData", "AdditionalAccountTokenData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenMetaData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenMetaData{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Creator:` + fmt.Sprintf("%v", this.Creator) + `,`,
		`Royalties:` + fmt.Sprintf("%v", this.Royalties) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`URIs:` + fmt.Sprintf("%v", this.URIs) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdditionalAccountTokenData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdditionalAccountTokenData{`,
		`IsNFTCreate:` + fmt.Sprintf("%v", this.IsNFTCreate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdditionalAccountData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdditionalAccountData{`,
		`IsSender:` + fmt.Sprintf("%v", this.IsSender) + `,`,
		`BalanceChanged:` + fmt.Sprintf("%v", this.BalanceChanged) + `,`,
		`CurrentOwner:` + fmt.Sprintf("%v", this.CurrentOwner) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`DeveloperRewards:` + fmt.Sprintf("%v", this.DeveloperRewards) + `,`,
		`CodeHash:` + fmt.Sprintf("%v", this.CodeHash) + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`CodeMetadata:` + fmt.Sprintf("%v", this.CodeMetadata) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAlteredAccount(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AlteredAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlteredAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlteredAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlteredAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &AccountTokenData{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdditionalData == nil {
				m.AdditionalData = &AdditionalAccountData{}
			}
			if err := m.AdditionalData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlteredAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountTokenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlteredAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountTokenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountTokenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = &TokenMetaData{}
			}
			if err := m.MetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdditionalData == nil {
				m.AdditionalData = &AdditionalAccountTokenData{}
			}
			if err := m.AdditionalData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlteredAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlteredAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Royalties", wireType)
			}
			m.Royalties = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Royalties |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URIs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URIs = append(m.URIs, make([]byte, postIndex-iNdEx))
			copy(m.URIs[len(m.URIs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes[:0], dAtA[iNdEx:postIndex]...)
			if m.Attributes == nil {
				m.Attributes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlteredAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdditionalAccountTokenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlteredAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdditionalAccountTokenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdditionalAccountTokenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNFTCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNFTCreate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAlteredAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdditionalAccountData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlteredAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdditionalAccountData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdditionalAccountData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSender = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceChanged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BalanceChanged = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperRewards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = append(m.CodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeHash == nil {
				m.CodeHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMetadata = append(m.CodeMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeMetadata == nil {
				m.CodeMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlteredAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlteredAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlteredAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlteredAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlteredAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlteredAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlteredAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlteredAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlteredAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlteredAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlteredAccount = fmt.Errorf("proto: unexpected end of group")
)
